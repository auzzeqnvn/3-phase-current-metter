;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;ï¿½ Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : 3 Phase current metter
;Version : 1.0
;Date    : 11/10/2018
;Author  :
;Company :
;Comments:
;Do va hien thi cuong do dong dien
;Su dung IC ADE7753
;
;
;Chip type               : ATmega8L
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Declare your global variables here
;#define DO_595_LATCH  PORTB.1
;#define DO_595_MOSI    PORTB.3
;#define DO_595_SCK    PORTB.5
;
;#define CTRL_595_ON     DO_595_LATCH = 1
;#define CTRL_595_OFF    DO_595_LATCH = 0
;
;#define BUZZER  PORTC.2
;
;#define BUZZER_ON   BUZZER = 1
;#define BUZZER_OFF  BUZZER = 0
;
;#define CS_PHASE1_MCU   PORTC.4
;#define CS_PHASE2_MCU   PORTC.5
;#define CS_PHASE3_MCU   PORTC.3
;
;#define PHASE_1_ON  CS_PHASE1_MCU = 1
;#define PHASE_1_OFF CS_PHASE1_MCU = 0
;#define PHASE_2_ON  CS_PHASE2_MCU = 1
;#define PHASE_2_OFF CS_PHASE2_MCU = 0
;#define PHASE_3_ON  CS_PHASE3_MCU = 1
;#define PHASE_3_OFF CS_PHASE3_MCU = 0
;
;#define DOUT_MOSI_SPI_7753_MCU   PORTD.1
;#define DIN_MISO_SPI_7753_MCU    PIND.0
;#define DOUT_CLK_SPI_7753_MCU   PORTD.4
;
;//Dia chi cac thanh ghi SPI_ADE7753
;#define WAVEFORM        0x01,3
;#define AENERGY         0x02,3
;#define RAENERGY        0x03,3
;#define LAENERGY		0x04,3
;#define VAENERGY		0x05,3
;#define RVAENERGY		0x06,3
;#define LVAENERGY		0x07,3
;#define LVARENERGY		0x08,3
;#define MODE			0x09,2
;#define IRQEN			0x0A,2
;#define STATUS			0x0B,2
;#define RSTSTATUS		0x0C,2
;#define CH1OS			0x0D,1
;#define CH2OS			0x0E,1
;#define GAIN			0x0F,1
;#define PHCAL			0x10,1
;#define APOS			0x11,2
;#define WGAIN			0x12,2
;#define WDIV			0x13,1
;#define CFNUM			0x14,2
;#define CFDEN			0x15,2
;#define IRMS			0x16,3
;#define VRMS			0x17,3
;#define IRMSOS			0x18,2
;#define VRMSOS			0x19,2
;#define VAGAIN			0x1A,2
;#define VADIV			0x1B,1
;#define LINECYC			0x1C,2
;#define ZXTOUT			0x1D,2
;#define SAGCYC			0x1E,1
;#define SAGLVL			0x1F,1
;#define IPKLVL			0x20,1
;#define VPKLVL			0x21,1
;#define IPEAK			0x22,3
;#define RSTIPEAK		0x23,3
;#define VPEAK			0x24,3
;#define RSTVPEAK		0x25,3
;#define TEMP			0x26,1
;#define PERIOD			0x27,2
;#define TMODE			0x3D,1
;#define CHKSUM			0x3E,1
;#define DIEREV			0x3F,1
;
;void    SEND_DATA_LED(unsigned char  data_first,unsigned char  data_second,unsigned char  data_third);
;void    SCAN_LED(unsigned char num_led,unsigned char    data);
;
;unsigned char   cnt=1;
;unsigned char   data = 0;
;unsigned int   data1 = 0;
;unsigned int   data2 = 0;
;unsigned int   data3 = 0;
;
;unsigned long int   CURRENT = 0;
;
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0073 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0074 // Reinitialize Timer1 value
; 0000 0075     TCNT1H=0xAA00 >> 8;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0076     TCNT1L=0xAA00 & 0xff;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0077 // Place your code here
; 0000 0078     if(cnt > 12) cnt=1;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0079     if(cnt == 1)    data = data1/1000;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 007A     else if(cnt == 2)    data = data1/100%10;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 007B     else if(cnt == 3)    data = data1/10%10;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 007C     else if(cnt == 4)    data = data1%10;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 007D     else if(cnt == 5)    data = data2/1000;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 007E     else if(cnt == 6)    data = data2/100%10;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 007F     else if(cnt == 7)    data = data2/10%10;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0080     else if(cnt == 8)    data = data2%10;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0081     else if(cnt == 9)    data = data3/1000;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0082     else if(cnt == 10)    data = data3/100%10;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0083     else if(cnt == 11)    data = data3/10%10;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0084     else if(cnt == 12)    data = data3%10;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0085     SCAN_LED(cnt++,data);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0086     data3++;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0087 }
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;
;// Voltage Reference: AVCC pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 008E {
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 008F     ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $000000AE VOL: 0
;	adc_input -> Y+0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0090     // Delay needed for the stabilization of the ADC input voltage
; 0000 0091     delay_us(10);
;PCODE: $000000B2 VOL: 0
; 0000 0092     // Start the AD conversion
; 0000 0093     ADCSRA|=(1<<ADSC);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0094     // Wait for the AD conversion to complete
; 0000 0095     while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0096     ADCSRA|=(1<<ADIF);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0097     return ADCW;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0098 }
;PCODE: $000000C0 VOL: 0
;
;void    SEND_DATA_LED(unsigned char  data_first,unsigned char  data_second,unsigned char  data_third)
; 0000 009B {
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 009C     unsigned char   i;
; 0000 009D     unsigned char   data;
; 0000 009E     data = data_first;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;	data_first -> Y+4
;	data_second -> Y+3
;	data_third -> Y+2
;	i -> R17
;	data -> R16
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 009F     for(i=0;i<8;i++)
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00A0     {
; 0000 00A1         if((data & 0x80) == 0x80)    DO_595_MOSI = 1;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00A2         else    DO_595_MOSI = 0;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00A3         data <<= 1;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00A4         DO_595_SCK = 0;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00A5         DO_595_SCK = 1;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00A6     }
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00A7     data = data_second;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00A8     for(i=0;i<8;i++)
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00A9     {
; 0000 00AA         if((data & 0x80) == 0x80)    DO_595_MOSI = 1;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00AB         else    DO_595_MOSI = 0;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00AC         data <<= 1;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00AD         DO_595_SCK = 0;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00AE         DO_595_SCK = 1;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00AF     }
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00B0     data = data_third;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00B1     for(i=0;i<8;i++)
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00B2     {
; 0000 00B3         if((data & 0x80) == 0x80)    DO_595_MOSI = 1;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00B4         else    DO_595_MOSI = 0;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00B5         data <<= 1;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00B6         DO_595_SCK = 0;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00B7         DO_595_SCK = 1;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00B8     }
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00B9     CTRL_595_ON;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00BA     CTRL_595_OFF;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00BB }
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;
;void    SCAN_LED(unsigned char num_led,unsigned char    data)
; 0000 00BE {
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00BF     unsigned char   byte1,byte2,byte3;
; 0000 00C0     byte1 = 0;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;	num_led -> Y+5
;	data -> Y+4
;	byte1 -> R17
;	byte2 -> R16
;	byte3 -> R19
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00C1     byte2 = 0;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00C2     byte3 = 0;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00C3     switch(num_led)
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00C4     {
; 0000 00C5         case    1:
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00C6         {
; 0000 00C7             byte3 = 0x01;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00C8             byte2 = 0x00;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00C9             break;
;PCODE: $0000013F VOL: 0
; 0000 00CA         }
; 0000 00CB         case    2:
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00CC         {
; 0000 00CD             byte3 = 0x02;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00CE             byte2 = 0x00;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00CF             byte1 = 0x04;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00D0             break;
;PCODE: $00000149 VOL: 0
; 0000 00D1         }
; 0000 00D2         case    3:
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00D3         {
; 0000 00D4             byte3 = 0x04;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00D5             byte2 = 0x00;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 00D6             break;
;PCODE: $00000151 VOL: 0
; 0000 00D7         }
; 0000 00D8         case    4:
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00D9         {
; 0000 00DA             byte3 = 0x08;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 00DB             byte2 = 0x00;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00DC             break;
;PCODE: $00000159 VOL: 0
; 0000 00DD         }
; 0000 00DE         case    5:
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 00DF         {
; 0000 00E0             byte3 = 0x40;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00E1             byte2 = 0x00;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 00E2             break;
;PCODE: $00000161 VOL: 0
; 0000 00E3         }
; 0000 00E4         case    6:
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00E5         {
; 0000 00E6             byte3 = 0x20;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 00E7             byte2 = 0x00;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00E8             byte1 = 0x04;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00E9             break;
;PCODE: $0000016B VOL: 0
; 0000 00EA         }
; 0000 00EB         case    7:
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 00EC         {
; 0000 00ED             byte3 = 0x10;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 00EE             byte2 = 0x00;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00EF             break;
;PCODE: $00000173 VOL: 0
; 0000 00F0         }
; 0000 00F1         case    8:
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00F2         {
; 0000 00F3             byte3 = 0x80;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 00F4             byte2 = 0x00;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 00F5             break;
;PCODE: $0000017B VOL: 0
; 0000 00F6         }
; 0000 00F7         case    9:
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 00F8         {
; 0000 00F9             byte3 = 0x00;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 00FA             byte2 = 0x40;
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 00FB             break;
;PCODE: $00000183 VOL: 0
; 0000 00FC         }
; 0000 00FD         case    10:
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 00FE         {
; 0000 00FF             byte3 = 0x00;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 0100             byte2 = 0x20;
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 0101             byte1 = 0x04;
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 0102             break;
;PCODE: $0000018D VOL: 0
; 0000 0103         }
; 0000 0104         case    11:
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 0105         {
; 0000 0106             byte3 = 0x00;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 0107             byte2 = 0x10;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 0108             break;
;PCODE: $00000195 VOL: 0
; 0000 0109         }
; 0000 010A         case    12:
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 010B         {
; 0000 010C             byte3 = 0x00;
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 010D             byte2 = 0x80;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 010E             break;
;PCODE: $0000019D VOL: 0
; 0000 010F         }
; 0000 0110     }
;PCODE: $0000019E VOL: 0
; 0000 0111     switch(data)
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 0112     {
; 0000 0113         case    0:
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 0114         {
; 0000 0115             byte1 |= 0xF9;
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 0116             break;
;PCODE: $000001A5 VOL: 0
; 0000 0117         }
; 0000 0118         case    1:
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0119         {
; 0000 011A             byte1 |= 0x81;
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 011B             break;
;PCODE: $000001AB VOL: 0
; 0000 011C         }
; 0000 011D         case    2:
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 011E         {
; 0000 011F             byte1 |= 0xBA;
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0120             break;
;PCODE: $000001B1 VOL: 0
; 0000 0121         }
; 0000 0122         case    3:
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 0123         {
; 0000 0124             byte1 |= 0xAB;
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 0125             break;
;PCODE: $000001B7 VOL: 0
; 0000 0126         }
; 0000 0127         case    4:
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 0128         {
; 0000 0129             byte1 |= 0xC3;
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 012A             break;
;PCODE: $000001BD VOL: 0
; 0000 012B         }
; 0000 012C         case    5:
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 012D         {
; 0000 012E             byte1 |= 0x6B;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 012F             break;
;PCODE: $000001C3 VOL: 0
; 0000 0130         }
; 0000 0131         case    6:
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 0132         {
; 0000 0133             byte1 |= 0x7B;
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 0134             break;
;PCODE: $000001C9 VOL: 0
; 0000 0135         }
; 0000 0136         case    7:
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 0137         {
; 0000 0138             byte1 = 0xA1;
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 0139             break;
;PCODE: $000001CF VOL: 0
; 0000 013A         }
; 0000 013B         case    8:
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 013C         {
; 0000 013D             byte1 |= 0xFB;
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 013E             break;
;PCODE: $000001D5 VOL: 0
; 0000 013F         }
; 0000 0140         case    9:
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 0141         {
; 0000 0142             byte1 |= 0xEB;
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 0143             break;
;PCODE: $000001DB VOL: 0
; 0000 0144         }
; 0000 0145     }
;PCODE: $000001DC VOL: 0
; 0000 0146     SEND_DATA_LED(byte1,byte2,byte3);
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 0147 }
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;
;void    SPI_7753_SEND(unsigned char data)
; 0000 014A {
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 014B     unsigned char cnt;
; 0000 014C     unsigned char   tmp = data;
; 0000 014D     for(cnt = 0;cnt < 8; cnt++)
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;	data -> Y+2
;	cnt -> R17
;	tmp -> R16
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 014E     {
; 0000 014F         if((tmp & 0x80) == 0x80)   DOUT_MOSI_SPI_7753_MCU = 1;
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 0150         DOUT_MOSI_SPI_7753_MCU = 0;
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 0151         tmp <<= 1;
;PCODE: $000001FD VOL: 0
; 0000 0152         // DOUT_CLK_SPI_7753_MCU = 0;
; 0000 0153         DOUT_CLK_SPI_7753_MCU = 1;
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 0154         DOUT_CLK_SPI_7753_MCU = 0;
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 0155     }
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 0156 }
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;
;unsigned char    SPI_7753_RECEIVE(void)
; 0000 0159 {
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 015A     unsigned char cnt;
; 0000 015B     unsigned char data;
; 0000 015C     data = 0;
;PCODE: $0000020D VOL: 0
;	cnt -> R17
;	data -> R16
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 015D     for(cnt = 0;cnt < 8; cnt++)
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 015E     {
; 0000 015F         // DOUT_CLK_SPI_7753_MCU = 0;
; 0000 0160         DOUT_CLK_SPI_7753_MCU = 1;
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 0161         if(DIN_MISO_SPI_7753_MCU == 1)   data += 1;
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 0162         data <<= 1;
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 0163         DOUT_CLK_SPI_7753_MCU = 0;
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 0164         // DOUT_CLK_SPI_7753_MCU = 0;
; 0000 0165         // DOUT_CLK_SPI_7753_MCU = 1;
; 0000 0166     }
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 0167     return data;
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 0168 }
;PCODE: $0000022C VOL: 0
;
;void    ADE7753_WRITE(unsigned char IC_CS,unsigned char addr,unsigned char num_data,unsigned char data_1,unsigned char d ...
; 0000 016B {
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 016C     unsigned char data[4];
; 0000 016D     unsigned char   i;
; 0000 016E     data[0] = data_1;
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;	IC_CS -> Y+10
;	addr -> Y+9
;	num_data -> Y+8
;	data_1 -> Y+7
;	data_2 -> Y+6
;	data_3 -> Y+5
;	data -> Y+1
;	i -> R17
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 016F     data[1] = data_2;
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 0170     data[2] = data_3;
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 0171 
; 0000 0172     switch (IC_CS)
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 0173     {
; 0000 0174         case 1:
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 0175         {
; 0000 0176             PHASE_1_ON;
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 0177             PHASE_2_OFF;
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 0178             PHASE_3_OFF;
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 0179             break;
;PCODE: $00000242 VOL: 0
; 0000 017A         }
; 0000 017B         case 2:
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0000 017C         {
; 0000 017D             PHASE_1_OFF;
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 017E             PHASE_2_ON;
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 017F             PHASE_3_OFF;
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 0180             break;
;PCODE: $0000024C VOL: 0
; 0000 0181         }
; 0000 0182         case 3:
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 0183         {
; 0000 0184             PHASE_1_OFF;
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0000 0185             PHASE_2_OFF;
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0000 0186             PHASE_3_ON;
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 0187             break;
;PCODE: $00000256 VOL: 0
; 0000 0188         }
; 0000 0189     }
;PCODE: $00000257 VOL: 0
; 0000 018A     //addr |= 0x80;
; 0000 018B     SPI_7753_SEND(addr);
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 018C     delay_us(20);
;PCODE: $0000025A VOL: 0
; 0000 018D     for(i=0;i<num_data;i++)    SPI_7753_SEND(data[i]);
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 018E PORTC.4 = 0;
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0000 018F     PHASE_2_OFF;
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0000 0190     PHASE_3_OFF;
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0000 0191 }
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;unsigned long int    ADE7753_READ(unsigned char IC_CS,unsigned char addr,unsigned char num_data)
; 0000 0193 {
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 0194     unsigned char   i;
; 0000 0195     unsigned char   data[4];
; 0000 0196     unsigned long int res;
; 0000 0197     for(i=0;i<4;i++)    data[i] = 0;
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;	IC_CS -> Y+11
;	addr -> Y+10
;	num_data -> Y+9
;	i -> R17
;	data -> Y+5
;	res -> Y+1
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0000 0198 switch (IC_CS)
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0000 0199     {
; 0000 019A         case 1:
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 019B         {
; 0000 019C             PHASE_1_ON;
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0000 019D             PHASE_2_OFF;
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 019E             PHASE_3_OFF;
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0000 019F             break;
;PCODE: $0000029D VOL: 0
; 0000 01A0         }
; 0000 01A1         case 2:
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0000 01A2         {
; 0000 01A3             PHASE_1_OFF;
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
; 0000 01A4             PHASE_2_ON;
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 01A5             PHASE_3_OFF;
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
; 0000 01A6             break;
;PCODE: $000002A7 VOL: 0
; 0000 01A7         }
; 0000 01A8         case 3:
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
; 0000 01A9         {
; 0000 01AA             PHASE_1_OFF;
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0000 01AB             PHASE_2_OFF;
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0000 01AC             PHASE_3_ON;
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
; 0000 01AD             break;
;PCODE: $000002B1 VOL: 0
; 0000 01AE         }
; 0000 01AF     }
;PCODE: $000002B2 VOL: 0
; 0000 01B0     addr &= 0x3F;
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 01B1     SPI_7753_SEND(addr);
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 01B2     for(i=0;i<num_data;i++) data[i] = SPI_7753_RECEIVE();
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 01B3 PORTC.4 = 0;
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 01B4     PHASE_2_OFF;
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
; 0000 01B5     PHASE_3_OFF;
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 01B6     res = 0;
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 01B7     for(i=0;i<num_data;i++)
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
; 0000 01B8     {
; 0000 01B9         res <<= 8;
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 0000 01BA         res += data[i];
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
; 0000 01BB     }
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0000 01BC     return (res);
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 01BD }
;PCODE: $000002F7 VOL: 0
;
;void    ADE7753_INIT(void)
; 0000 01C0 {
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
; 0000 01C1     ADE7753_WRITE(1,MODE,0x00,0x00,0x00);
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
; 0000 01C2     ADE7753_WRITE(1,SAGLVL,0X2a,0X00,0X00);
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
; 0000 01C3     ADE7753_WRITE(1,SAGCYC,0X04,0X00,0X00);
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
; 0000 01C4 }
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;
;void main(void)
; 0000 01C7 {
;PCODE: $00000320 VOL: 0
; 0000 01C8 // Declare your local variables here
; 0000 01C9 // Input/Output Ports initialization
; 0000 01CA // Port B initialization
; 0000 01CB // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=Out Bit2=In Bit1=Out Bit0=In
; 0000 01CC DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (0<<DDB2) | (1<<DDB1) | (0<<DDB0);
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
; 0000 01CD // State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=0 Bit2=T Bit1=0 Bit0=T
; 0000 01CE PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
; 0000 01CF 
; 0000 01D0 // Port C initialization
; 0000 01D1 // Function: Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=In Bit0=In
; 0000 01D2 DDRC=(0<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
; 0000 01D3 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 01D4 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0000 01D5 
; 0000 01D6 // Port D initialization
; 0000 01D7 // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=Out
; 0000 01D8 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (1<<DDD4) | (0<<DDD3) | (0<<DDD2) | (1<<DDD1) | (0<<DDD0);
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
; 0000 01D9 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 01DA PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
; 0000 01DB 
; 0000 01DC // Timer/Counter 0 initialization
; 0000 01DD // Clock source: System Clock
; 0000 01DE // Clock value: Timer 0 Stopped
; 0000 01DF TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
; 0000 01E0 TCNT0=0x94;
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
; 0000 01E1 
; 0000 01E2 // Timer/Counter 1 initialization
; 0000 01E3 // Clock source: System Clock
; 0000 01E4 // Clock value: 11059.200 kHz
; 0000 01E5 // Mode: Normal top=0xFFFF
; 0000 01E6 // OC1A output: Disconnected
; 0000 01E7 // OC1B output: Disconnected
; 0000 01E8 // Noise Canceler: Off
; 0000 01E9 // Input Capture on Falling Edge
; 0000 01EA // Timer Period: 2 ms
; 0000 01EB // Timer1 Overflow Interrupt: On
; 0000 01EC // Input Capture Interrupt: Off
; 0000 01ED // Compare A Match Interrupt: Off
; 0000 01EE // Compare B Match Interrupt: Off
; 0000 01EF TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
; 0000 01F0 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
; 0000 01F1 TCNT1H=0xA9;
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
; 0000 01F2 TCNT1L=0x9A;
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
; 0000 01F3 ICR1H=0x00;
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
; 0000 01F4 ICR1L=0x00;
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
; 0000 01F5 OCR1AH=0x00;
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
; 0000 01F6 OCR1AL=0x00;
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
; 0000 01F7 OCR1BH=0x00;
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 0000 01F8 OCR1BL=0x00;
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
; 0000 01F9 
; 0000 01FA // Timer/Counter 2 initialization
; 0000 01FB // Clock source: System Clock
; 0000 01FC // Clock value: Timer2 Stopped
; 0000 01FD // Mode: Normal top=0xFF
; 0000 01FE // OC2 output: Disconnected
; 0000 01FF ASSR=0<<AS2;
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
; 0000 0200 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
; 0000 0201 TCNT2=0x00;
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
; 0000 0202 OCR2=0x00;
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
; 0000 0203 
; 0000 0204 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0205 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<TOIE0);
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
; 0000 0206 
; 0000 0207 // External Interrupt(s) initialization
; 0000 0208 // INT0: Off
; 0000 0209 // INT1: Off
; 0000 020A MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
; 0000 020B 
; 0000 020C // USART initialization
; 0000 020D // USART disabled
; 0000 020E UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
; 0000 020F 
; 0000 0210 // Analog Comparator initialization
; 0000 0211 // Analog Comparator: Off
; 0000 0212 // The Analog Comparator's positive input is
; 0000 0213 // connected to the AIN0 pin
; 0000 0214 // The Analog Comparator's negative input is
; 0000 0215 // connected to the AIN1 pin
; 0000 0216 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
; 0000 0217 
; 0000 0218 // ADC initialization
; 0000 0219 // ADC Clock frequency: 345.600 kHz
; 0000 021A // ADC Voltage Reference: AREF pin
; 0000 021B ADMUX=ADC_VREF_TYPE;
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
; 0000 021C ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
; 0000 021D SFIOR=(0<<ACME);
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
; 0000 021E 
; 0000 021F // SPI initialization
; 0000 0220 // SPI disabled
; 0000 0221 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
; 0000 0222 
; 0000 0223 // TWI initialization
; 0000 0224 // TWI disabled
; 0000 0225 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
; 0000 0226 
; 0000 0227 // Global enable interrupts
; 0000 0228 #asm("sei")
;PCODE: $0000035F VOL: 0
	sei
;PCODE: $00000360 VOL: 0
; 0000 0229 //ADE7753_INIT();
; 0000 022A //PHASE_1_ON;
; 0000 022B while (1)
;PCODE: $00000361 VOL: 0
; 0000 022C       {
; 0000 022D           CURRENT = ADE7753_READ(1,IRMS);
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
; 0000 022E           data1 = (unsigned int) (((unsigned long)read_adc(0)*500)/1023);
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
; 0000 022F           data2 = (unsigned int)CURRENT*100;
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
; 0000 0230           //data3++;
; 0000 0231       }
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
; 0000 0232 }
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
