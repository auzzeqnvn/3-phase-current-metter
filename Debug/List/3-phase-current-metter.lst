
AVRASM ver. 2.1.30  D:\My Data\TanPhat\3 phase current metter\3-phase-current-metter\Debug\List\3-phase-current-metter.asm Wed Nov 28 01:39:24 2018

D:\My Data\TanPhat\3 phase current metter\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1086): warning: Register r7 already defined by the .DEF directive
D:\My Data\TanPhat\3 phase current metter\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1087): warning: Register r8 already defined by the .DEF directive
D:\My Data\TanPhat\3 phase current metter\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1088): warning: Register r9 already defined by the .DEF directive
D:\My Data\TanPhat\3 phase current metter\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1089): warning: Register r6 already defined by the .DEF directive
D:\My Data\TanPhat\3 phase current metter\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1090): warning: Register r11 already defined by the .DEF directive
D:\My Data\TanPhat\3 phase current metter\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1091): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8L
                 ;Program type           : Application
                 ;Clock frequency        : 11.059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8L
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Uc_Current_Array_Cnt=R7
                 	.DEF _AI10_Current_Set=R8
                 	.DEF _AI10_Current_Set_msb=R9
                 	.DEF _Uc_Buzzer_cnt=R6
                 	.DEF _Uc_Timer_cnt=R11
                 	.DEF _Uc_Select_led=R10
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c034      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 c058      	RJMP _timer1_ovf_isr
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000013 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000014 0000
000015 0000      	.DB  0x0,0x0,0x0,0x0
000016 0001      	.DB  0x1,0x0
                 
                 _0x40003:
000017 81f9
000018 abba
000019 6bc3
00001a a17b      	.DB  0xF9,0x81,0xBA,0xAB,0xC3,0x6B,0x7B,0xA1
00001b ebfb      	.DB  0xFB,0xEB
                 _0x40004:
00001c 0001
00001d 0002
00001e 0004
00001f 0008      	.DB  0x1,0x0,0x2,0x0,0x4,0x0,0x8,0x0
000020 0040
000021 0020
000022 0010
000023 0080      	.DB  0x40,0x0,0x20,0x0,0x10,0x0,0x80,0x0
000024 4000
000025 2000
000026 1000
000027 8000      	.DB  0x0,0x40,0x0,0x20,0x0,0x10,0x0,0x80
                 
                 __GLOBAL_INI_TBL:
000028 0001      	.DW  0x01
000029 0002      	.DW  0x02
00002a 0026      	.DW  __REG_BIT_VARS*2
                 
00002b 0006      	.DW  0x06
00002c 0006      	.DW  0x06
00002d 0028      	.DW  __REG_VARS*2
                 
00002e 000a      	.DW  0x0A
00002f 0184      	.DW  _BCDLED
000030 002e      	.DW  _0x40003*2
                 
000031 0018      	.DW  0x18
000032 018f      	.DW  _LED_SELECT
000033 0038      	.DW  _0x40004*2
                 
                 _0xFFFFFFFF:
000034 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000035 94f8      	CLI
000036 27ee      	CLR  R30
000037 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000038 e0f1      	LDI  R31,1
000039 bffb      	OUT  GICR,R31
00003a bfeb      	OUT  GICR,R30
00003b bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003c e08d      	LDI  R24,(14-2)+1
00003d e0a2      	LDI  R26,2
00003e 27bb      	CLR  R27
                 __CLEAR_REG:
00003f 93ed      	ST   X+,R30
000040 958a      	DEC  R24
000041 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000042 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000043 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000044 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000045 93ed      	ST   X+,R30
000046 9701      	SBIW R24,1
000047 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000048 e5e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000049 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004a 9185      	LPM  R24,Z+
00004b 9195      	LPM  R25,Z+
00004c 9700      	SBIW R24,0
00004d f061      	BREQ __GLOBAL_INI_END
00004e 91a5      	LPM  R26,Z+
00004f 91b5      	LPM  R27,Z+
000050 9005      	LPM  R0,Z+
000051 9015      	LPM  R1,Z+
000052 01bf      	MOVW R22,R30
000053 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000054 9005      	LPM  R0,Z+
000055 920d      	ST   X+,R0
000056 9701      	SBIW R24,1
000057 f7e1      	BRNE __GLOBAL_INI_LOOP
000058 01fb      	MOVW R30,R22
000059 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005a e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005b bfed      	OUT  SPL,R30
00005c e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00005d bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00005e e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00005f e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000060 c133      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : 3 Phase current metter
                 ;Version : 1.0
                 ;Date    : 11/10/2018
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;Do va hien thi cuong do dong dien
                 ;Su dung IC ADE7753
                 ;
                 ;
                 ;Chip type               : ATmega8L
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 11.059200 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <ADE7753.h>
                 ;#include "led.h"
                 ;
                 ;
                 ;#define BUZZER  PORTC.2
                 ;
                 ;#define BUZZER_ON   BUZZER = 1
                 ;#define BUZZER_OFF  BUZZER = 0
                 ;
                 ;#define CURRENT_MAX_SET 15
                 ;#define CURRENT_MIN_SET 8
                 ;
                 ;/* So luong mau lay de tinh toan */
                 ;#define NUM_SAMPLE  5
                 ;/* So luong noise loai bo */
                 ;#define NUM_FILTER  1
                 ;
                 ;bit Bit_Warning_1 = 0;
                 ;bit Bit_Warning_2 = 0;
                 ;bit Bit_Warning_3 = 0;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;/* Co bao da lay du luong mau de tinh toan */
                 ;bit Bit_sample_full =0;
                 ;
                 ;/* mang luu gia tri dong dien */
                 ;unsigned int AI10__Current_L1[NUM_SAMPLE];
                 ;unsigned int AI10__Current_L2[NUM_SAMPLE];
                 ;unsigned int AI10__Current_L3[NUM_SAMPLE];
                 ;unsigned char   Uc_Current_Array_Cnt = 0;
                 ;
                 ;unsigned int    AI10_Current_Set;
                 ;
                 ;unsigned char   Uc_Buzzer_cnt = 0;
                 ;
                 ;unsigned char   Uc_Timer_cnt = 0;
                 ;
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0047 {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
000061 920a      	ST   -Y,R0
000062 921a      	ST   -Y,R1
000063 92fa      	ST   -Y,R15
000064 936a      	ST   -Y,R22
000065 937a      	ST   -Y,R23
000066 938a      	ST   -Y,R24
000067 939a      	ST   -Y,R25
000068 93aa      	ST   -Y,R26
000069 93ba      	ST   -Y,R27
00006a 93ea      	ST   -Y,R30
00006b 93fa      	ST   -Y,R31
00006c b7ef      	IN   R30,SREG
00006d 93ea      	ST   -Y,R30
                 ; 0000 0048 // Reinitialize Timer1 value
                 ; 0000 0049     TCNT1H=0xAA00 >> 8;
00006e eaea      	LDI  R30,LOW(170)
00006f bded      	OUT  0x2D,R30
                 ; 0000 004A     TCNT1L=0xAA00 & 0xff;
000070 e0e0      	LDI  R30,LOW(0)
000071 bdec      	OUT  0x2C,R30
                 ; 0000 004B // Place your code here
                 ; 0000 004C     // Uc_Timer_cnt++;
                 ; 0000 004D     if(Uc_Timer_cnt < 200)  Uc_Timer_cnt++;
000072 ece8      	LDI  R30,LOW(200)
000073 16be      	CP   R11,R30
000074 f408      	BRSH _0x3
000075 94b3      	INC  R11
                 ; 0000 004E 
                 ; 0000 004F     LED();
                 _0x3:
000076 d249      	RCALL _LED
                 ; 0000 0050 
                 ; 0000 0051     if(Bit_Warning_1 || Bit_Warning_2 || Bit_Warning_3)
000077 fc20      	SBRC R2,0
000078 c004      	RJMP _0x5
000079 fc21      	SBRC R2,1
00007a c002      	RJMP _0x5
00007b fe22      	SBRS R2,2
00007c c00d      	RJMP _0x4
                 _0x5:
                 ; 0000 0052     {
                 ; 0000 0053         Uc_Buzzer_cnt++;
00007d 9463      	INC  R6
                 ; 0000 0054         if(Uc_Buzzer_cnt < 100) BUZZER_ON;
00007e e6e4      	LDI  R30,LOW(100)
00007f 166e      	CP   R6,R30
000080 f410      	BRSH _0x7
000081 9aaa      	SBI  0x15,2
                 ; 0000 0055         else    if(Uc_Buzzer_cnt < 200) BUZZER_OFF;
000082 c006      	RJMP _0xA
                 _0x7:
000083 ece8      	LDI  R30,LOW(200)
000084 166e      	CP   R6,R30
000085 f410      	BRSH _0xB
000086 98aa      	CBI  0x15,2
                 ; 0000 0056         else Uc_Buzzer_cnt = 0;
000087 c001      	RJMP _0xE
                 _0xB:
000088 2466      	CLR  R6
                 ; 0000 0057     }
                 _0xE:
                 _0xA:
                 ; 0000 0058     else    BUZZER_OFF;
000089 c001      	RJMP _0xF
                 _0x4:
00008a 98aa      	CBI  0x15,2
                 ; 0000 0059 }
                 _0xF:
00008b 91e9      	LD   R30,Y+
00008c bfef      	OUT  SREG,R30
00008d 91f9      	LD   R31,Y+
00008e 91e9      	LD   R30,Y+
00008f 91b9      	LD   R27,Y+
000090 91a9      	LD   R26,Y+
000091 9199      	LD   R25,Y+
000092 9189      	LD   R24,Y+
000093 9179      	LD   R23,Y+
000094 9169      	LD   R22,Y+
000095 90f9      	LD   R15,Y+
000096 9019      	LD   R1,Y+
000097 9009      	LD   R0,Y+
000098 9518      	RETI
                 ; .FEND
                 ;
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0060 {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0061     ADMUX=adc_input | ADC_VREF_TYPE;
000099 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00009a 81e8      	LD   R30,Y
00009b 64e0      	ORI  R30,0x40
00009c b9e7      	OUT  0x7,R30
                 ; 0000 0062     // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0063     delay_us(10);
                +
00009d e285     +LDI R24 , LOW ( 37 )
                +__DELAY_USB_LOOP :
00009e 958a     +DEC R24
00009f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 37
                 ; 0000 0064     // Start the AD conversion
                 ; 0000 0065     ADCSRA|=(1<<ADSC);
0000a0 9a36      	SBI  0x6,6
                 ; 0000 0066     // Wait for the AD conversion to complete
                 ; 0000 0067     while ((ADCSRA & (1<<ADIF))==0);
                 _0x12:
0000a1 9b34      	SBIS 0x6,4
0000a2 cffe      	RJMP _0x12
                 ; 0000 0068     ADCSRA|=(1<<ADIF);
0000a3 9a34      	SBI  0x6,4
                 ; 0000 0069     return ADCW;
0000a4 b1e4      	IN   R30,0x4
0000a5 b1f5      	IN   R31,0x4+1
0000a6 9621      	ADIW R28,1
0000a7 9508      	RET
                 ; 0000 006A }
                 ; .FEND
                 ;/*
                 ;Doc gia tri dong dien L1, L2 ,L3
                 ;Loai bo cac nhieu co bien do lon.
                 ;Lay trung binh cac gia tri con lai.
                 ;Cap nhat gia tri dong dien.
                 ;*/
                 ;void    Read_Current(void)
                 ; 0000 0072 {
                 _Read_Current:
                 ; .FSTART _Read_Current
                 ; 0000 0073     unsigned int Uint_Tmp;
                 ; 0000 0074     unsigned int Uint_CurrentTmp_Array[NUM_SAMPLE];
                 ; 0000 0075     unsigned char   Uc_loop1_cnt,Uc_loop2_cnt;
                 ; 0000 0076     unsigned int   Ul_Sum;
                 ; 0000 0077     unsigned long Ul_tmp;
                 ; 0000 0078 
                 ; 0000 0079     Ul_tmp = ((unsigned long) Read_ADE7753(1,IRMS)/800);
0000a8 972e      	SBIW R28,14
0000a9 d3f7      	RCALL __SAVELOCR6
                 ;	Uint_Tmp -> R16,R17
                 ;	Uint_CurrentTmp_Array -> Y+10
                 ;	Uc_loop1_cnt -> R19
                 ;	Uc_loop2_cnt -> R18
                 ;	Ul_Sum -> R20,R21
                 ;	Ul_tmp -> Y+6
0000aa d2bc      	RCALL SUBOPT_0x0
0000ab d2be      	RCALL SUBOPT_0x1
                +
0000ac e2e0     +LDI R30 , LOW ( 0x320 )
0000ad e0f3     +LDI R31 , HIGH ( 0x320 )
0000ae e060     +LDI R22 , BYTE3 ( 0x320 )
0000af e070     +LDI R23 , BYTE4 ( 0x320 )
                 	__GETD1N 0x320
0000b0 d2c0      	RCALL SUBOPT_0x2
                 ; 0000 007A     AI10__Current_L1[Uc_Current_Array_Cnt] = (unsigned int) (Ul_tmp);
0000b1 d2c6      	RCALL SUBOPT_0x3
0000b2 d2cb      	RCALL SUBOPT_0x4
                 ; 0000 007B 
                 ; 0000 007C     Ul_tmp = ((unsigned long) Read_ADE7753(2,IRMS)/1105);
0000b3 e0e2      	LDI  R30,LOW(2)
0000b4 93ea      	ST   -Y,R30
0000b5 d2b4      	RCALL SUBOPT_0x1
                +
0000b6 e5e1     +LDI R30 , LOW ( 0x451 )
0000b7 e0f4     +LDI R31 , HIGH ( 0x451 )
0000b8 e060     +LDI R22 , BYTE3 ( 0x451 )
0000b9 e070     +LDI R23 , BYTE4 ( 0x451 )
                 	__GETD1N 0x451
0000ba d2b6      	RCALL SUBOPT_0x2
                 ; 0000 007D     AI10__Current_L2[Uc_Current_Array_Cnt] = (unsigned int) (Ul_tmp);
0000bb d2c9      	RCALL SUBOPT_0x5
0000bc d2c1      	RCALL SUBOPT_0x4
                 ; 0000 007E 
                 ; 0000 007F     Ul_tmp = ((unsigned long) Read_ADE7753(3,IRMS)/577);
0000bd e0e3      	LDI  R30,LOW(3)
0000be 93ea      	ST   -Y,R30
0000bf d2aa      	RCALL SUBOPT_0x1
                +
0000c0 e4e1     +LDI R30 , LOW ( 0x241 )
0000c1 e0f2     +LDI R31 , HIGH ( 0x241 )
0000c2 e060     +LDI R22 , BYTE3 ( 0x241 )
0000c3 e070     +LDI R23 , BYTE4 ( 0x241 )
                 	__GETD1N 0x241
0000c4 d2ac      	RCALL SUBOPT_0x2
                 ; 0000 0080     AI10__Current_L3[Uc_Current_Array_Cnt] = (unsigned int) (Ul_tmp);
0000c5 d2c5      	RCALL SUBOPT_0x6
0000c6 d2b7      	RCALL SUBOPT_0x4
                 ; 0000 0081 
                 ; 0000 0082     AI10_Current_Set = read_adc(0);
0000c7 e0a0      	LDI  R26,LOW(0)
0000c8 dfd0      	RCALL _read_adc
0000c9 014f      	MOVW R8,R30
                 ; 0000 0083     AI10_Current_Set = AI10_Current_Set*(CURRENT_MAX_SET-CURRENT_MIN_SET)*100/1024 + CURRENT_MIN_SET*100;
0000ca e0a7      	LDI  R26,LOW(7)
0000cb e0b0      	LDI  R27,HIGH(7)
0000cc d38d      	RCALL __MULW12U
0000cd e6a4      	LDI  R26,LOW(100)
0000ce e0b0      	LDI  R27,HIGH(100)
0000cf d38a      	RCALL __MULW12U
0000d0 d37f      	RCALL __LSRW2
0000d1 2fef      	MOV  R30,R31
0000d2 e0f0      	LDI  R31,0
0000d3 5ee0      	SUBI R30,LOW(-800)
0000d4 4ffc      	SBCI R31,HIGH(-800)
0000d5 014f      	MOVW R8,R30
                 ; 0000 0084 
                 ; 0000 0085     Uc_Current_Array_Cnt++;
0000d6 9473      	INC  R7
                 ; 0000 0086     if(Uc_Current_Array_Cnt >= NUM_SAMPLE)
0000d7 e0e5      	LDI  R30,LOW(5)
0000d8 167e      	CP   R7,R30
0000d9 f018      	BRLO _0x15
                 ; 0000 0087     {
                 ; 0000 0088         Bit_sample_full = 1;
0000da 9468      	SET
0000db f823      	BLD  R2,3
                 ; 0000 0089         Uc_Current_Array_Cnt = 0;
0000dc 2477      	CLR  R7
                 ; 0000 008A     }
                 ; 0000 008B 
                 ; 0000 008C     if(Bit_sample_full == 0)
                 _0x15:
0000dd fc23      	SBRC R2,3
0000de c00e      	RJMP _0x16
                 ; 0000 008D     {
                 ; 0000 008E         Uint_dataLed1 = 0;
0000df e0e0      	LDI  R30,LOW(0)
0000e0 93e0 0160 	STS  _Uint_dataLed1,R30
0000e2 93e0 0161 	STS  _Uint_dataLed1+1,R30
                 ; 0000 008F         Uint_dataLed2 = 0;
0000e4 93e0 0162 	STS  _Uint_dataLed2,R30
0000e6 93e0 0163 	STS  _Uint_dataLed2+1,R30
                 ; 0000 0090         Uint_dataLed3 = 0;
0000e8 93e0 0164 	STS  _Uint_dataLed3,R30
0000ea 93e0 0165 	STS  _Uint_dataLed3+1,R30
                 ; 0000 0091     }
                 ; 0000 0092     else
0000ec c0a4      	RJMP _0x17
                 _0x16:
                 ; 0000 0093     {
                 ; 0000 0094         /* Xu ly du lieu L1 */
                 ; 0000 0095         /* Chuyen sang bo nho dem*/
                 ; 0000 0096         for(Uc_loop1_cnt = 0; Uc_loop1_cnt<NUM_SAMPLE; Uc_loop1_cnt++)
0000ed e030      	LDI  R19,LOW(0)
                 _0x19:
0000ee 3035      	CPI  R19,5
0000ef f440      	BRSH _0x1A
                 ; 0000 0097         {
                 ; 0000 0098             Uint_CurrentTmp_Array[Uc_loop1_cnt] = AI10__Current_L1[Uc_loop1_cnt];
0000f0 d2a0      	RCALL SUBOPT_0x7
0000f1 d2a6      	RCALL SUBOPT_0x8
0000f2 2fe3      	MOV  R30,R19
0000f3 d284      	RCALL SUBOPT_0x3
0000f4 d2a7      	RCALL SUBOPT_0x9
0000f5 d2a9      	RCALL SUBOPT_0xA
                 ; 0000 0099         }
0000f6 5f3f      	SUBI R19,-1
0000f7 cff6      	RJMP _0x19
                 _0x1A:
                 ; 0000 009A         /* Sắp xếp tu min-> max*/
                 ; 0000 009B         for(Uc_loop1_cnt = 0; Uc_loop1_cnt<NUM_SAMPLE; Uc_loop1_cnt++)
0000f8 e030      	LDI  R19,LOW(0)
                 _0x1C:
0000f9 3035      	CPI  R19,5
0000fa f488      	BRSH _0x1D
                 ; 0000 009C         {
                 ; 0000 009D             for(Uc_loop2_cnt = Uc_loop1_cnt; Uc_loop2_cnt<NUM_SAMPLE; Uc_loop2_cnt++)
0000fb 2f23      	MOV  R18,R19
                 _0x1F:
0000fc 3025      	CPI  R18,5
0000fd f460      	BRSH _0x20
                 ; 0000 009E             {
                 ; 0000 009F                 if(Uint_CurrentTmp_Array[Uc_loop1_cnt] > Uint_CurrentTmp_Array[Uc_loop2_cnt])
0000fe d292      	RCALL SUBOPT_0x7
0000ff d2a4      	RCALL SUBOPT_0xB
000100 f438      	BRSH _0x21
                 ; 0000 00A0                 {
                 ; 0000 00A1                     Uint_Tmp = Uint_CurrentTmp_Array[Uc_loop1_cnt];
000101 d28f      	RCALL SUBOPT_0x7
000102 d2af      	RCALL SUBOPT_0xC
                 ; 0000 00A2                     Uint_CurrentTmp_Array[Uc_loop1_cnt] = Uint_CurrentTmp_Array[Uc_loop2_cnt];
000103 d294      	RCALL SUBOPT_0x8
000104 d2b1      	RCALL SUBOPT_0xD
000105 d2b7      	RCALL SUBOPT_0xE
                 ; 0000 00A3                     Uint_CurrentTmp_Array[Uc_loop2_cnt] = Uint_Tmp;
000106 d2af      	RCALL SUBOPT_0xD
000107 d2b7      	RCALL SUBOPT_0xF
                 ; 0000 00A4                 }
                 ; 0000 00A5             }
                 _0x21:
000108 5f2f      	SUBI R18,-1
000109 cff2      	RJMP _0x1F
                 _0x20:
                 ; 0000 00A6         }
00010a 5f3f      	SUBI R19,-1
00010b cfed      	RJMP _0x1C
                 _0x1D:
                 ; 0000 00A7         /* Loc phan du lieu nhieu thap va cao */
                 ; 0000 00A8         Ul_Sum = 0;
00010c d2b7      	RCALL SUBOPT_0x10
                 ; 0000 00A9         for(Uc_loop1_cnt = NUM_FILTER;Uc_loop1_cnt<(NUM_SAMPLE - NUM_FILTER); Uc_loop1_cnt++)
                 _0x23:
00010d 3034      	CPI  R19,4
00010e f420      	BRSH _0x24
                 ; 0000 00AA         {
                 ; 0000 00AB             Ul_Sum += Uint_CurrentTmp_Array[Uc_loop1_cnt];
00010f d281      	RCALL SUBOPT_0x7
000110 d2b7      	RCALL SUBOPT_0x11
                 ; 0000 00AC         }
000111 5f3f      	SUBI R19,-1
000112 cffa      	RJMP _0x23
                 _0x24:
                 ; 0000 00AD         Ul_Sum = Ul_Sum/(NUM_SAMPLE-2*NUM_FILTER);
000113 d2b9      	RCALL SUBOPT_0x12
                 ; 0000 00AE         /* Xuat du lieu len led */
                 ; 0000 00AF         if(Uc_Timer_cnt == 200) Uint_dataLed1 = Ul_Sum;
000114 f421      	BRNE _0x25
                +
000115 9340 0160+STS _Uint_dataLed1 + ( 0 ) , R20
000117 9350 0161+STS _Uint_dataLed1 + ( 0 ) + 1 , R21
                 	__PUTWMRN _Uint_dataLed1,0,20,21
                 ; 0000 00B0 
                 ; 0000 00B1         if(AI10_Current_Set < Uint_dataLed1)    Bit_Warning_1 =1;
                 _0x25:
000119 91e0 0160 	LDS  R30,_Uint_dataLed1
00011b 91f0 0161 	LDS  R31,_Uint_dataLed1+1
00011d 168e      	CP   R8,R30
00011e 069f      	CPC  R9,R31
00011f f410      	BRSH _0x26
000120 9468      	SET
000121 c001      	RJMP _0x4C
                 ; 0000 00B2         else Bit_Warning_1 = 0;
                 _0x26:
000122 94e8      	CLT
                 _0x4C:
000123 f820      	BLD  R2,0
                 ; 0000 00B3 
                 ; 0000 00B4         /* Xu ly du lieu L2 */
                 ; 0000 00B5         /* Chuyen sang bo nho dem*/
                 ; 0000 00B6         for(Uc_loop1_cnt = 0; Uc_loop1_cnt<NUM_SAMPLE; Uc_loop1_cnt++)
000124 e030      	LDI  R19,LOW(0)
                 _0x29:
000125 3035      	CPI  R19,5
000126 f438      	BRSH _0x2A
                 ; 0000 00B7         {
                 ; 0000 00B8             Uint_CurrentTmp_Array[Uc_loop1_cnt] = AI10__Current_L2[Uc_loop1_cnt];
000127 d269      	RCALL SUBOPT_0x7
000128 d26f      	RCALL SUBOPT_0x8
000129 2fe3      	MOV  R30,R19
00012a d25a      	RCALL SUBOPT_0x5
00012b d291      	RCALL SUBOPT_0xE
                 ; 0000 00B9         }
00012c 5f3f      	SUBI R19,-1
00012d cff7      	RJMP _0x29
                 _0x2A:
                 ; 0000 00BA         /* Sắp xếp tu min-> max*/
                 ; 0000 00BB         for(Uc_loop1_cnt = 0; Uc_loop1_cnt<NUM_SAMPLE; Uc_loop1_cnt++)
00012e e030      	LDI  R19,LOW(0)
                 _0x2C:
00012f 3035      	CPI  R19,5
000130 f488      	BRSH _0x2D
                 ; 0000 00BC         {
                 ; 0000 00BD             for(Uc_loop2_cnt = Uc_loop1_cnt; Uc_loop2_cnt<NUM_SAMPLE; Uc_loop2_cnt++)
000131 2f23      	MOV  R18,R19
                 _0x2F:
000132 3025      	CPI  R18,5
000133 f460      	BRSH _0x30
                 ; 0000 00BE             {
                 ; 0000 00BF                 if(Uint_CurrentTmp_Array[Uc_loop1_cnt] > Uint_CurrentTmp_Array[Uc_loop2_cnt])
000134 d25c      	RCALL SUBOPT_0x7
000135 d26e      	RCALL SUBOPT_0xB
000136 f438      	BRSH _0x31
                 ; 0000 00C0                 {
                 ; 0000 00C1                     Uint_Tmp = Uint_CurrentTmp_Array[Uc_loop1_cnt];
000137 d259      	RCALL SUBOPT_0x7
000138 d279      	RCALL SUBOPT_0xC
                 ; 0000 00C2                     Uint_CurrentTmp_Array[Uc_loop1_cnt] = Uint_CurrentTmp_Array[Uc_loop2_cnt];
000139 d25e      	RCALL SUBOPT_0x8
00013a d27b      	RCALL SUBOPT_0xD
00013b d281      	RCALL SUBOPT_0xE
                 ; 0000 00C3                     Uint_CurrentTmp_Array[Uc_loop2_cnt] = Uint_Tmp;
00013c d279      	RCALL SUBOPT_0xD
00013d d281      	RCALL SUBOPT_0xF
                 ; 0000 00C4                 }
                 ; 0000 00C5             }
                 _0x31:
00013e 5f2f      	SUBI R18,-1
00013f cff2      	RJMP _0x2F
                 _0x30:
                 ; 0000 00C6         }
000140 5f3f      	SUBI R19,-1
000141 cfed      	RJMP _0x2C
                 _0x2D:
                 ; 0000 00C7 
                 ; 0000 00C8         /* Loc phan du lieu nhieu thap va cao */
                 ; 0000 00C9         Ul_Sum = 0;
000142 d281      	RCALL SUBOPT_0x10
                 ; 0000 00CA         for(Uc_loop1_cnt = NUM_FILTER;Uc_loop1_cnt<(NUM_SAMPLE - NUM_FILTER); Uc_loop1_cnt++)
                 _0x33:
000143 3034      	CPI  R19,4
000144 f420      	BRSH _0x34
                 ; 0000 00CB         {
                 ; 0000 00CC             Ul_Sum += Uint_CurrentTmp_Array[Uc_loop1_cnt];
000145 d24b      	RCALL SUBOPT_0x7
000146 d281      	RCALL SUBOPT_0x11
                 ; 0000 00CD         }
000147 5f3f      	SUBI R19,-1
000148 cffa      	RJMP _0x33
                 _0x34:
                 ; 0000 00CE         Ul_Sum = Ul_Sum/(NUM_SAMPLE-2*NUM_FILTER);
000149 d283      	RCALL SUBOPT_0x12
                 ; 0000 00CF         /* Xuat du lieu len led */
                 ; 0000 00D0         if(Uc_Timer_cnt == 200) Uint_dataLed2 = Ul_Sum;
00014a f421      	BRNE _0x35
                +
00014b 9340 0162+STS _Uint_dataLed2 + ( 0 ) , R20
00014d 9350 0163+STS _Uint_dataLed2 + ( 0 ) + 1 , R21
                 	__PUTWMRN _Uint_dataLed2,0,20,21
                 ; 0000 00D1         if(AI10_Current_Set < Uint_dataLed2)    Bit_Warning_2 =1;
                 _0x35:
00014f 91e0 0162 	LDS  R30,_Uint_dataLed2
000151 91f0 0163 	LDS  R31,_Uint_dataLed2+1
000153 168e      	CP   R8,R30
000154 069f      	CPC  R9,R31
000155 f410      	BRSH _0x36
000156 9468      	SET
000157 c001      	RJMP _0x4D
                 ; 0000 00D2         else Bit_Warning_2 = 0;
                 _0x36:
000158 94e8      	CLT
                 _0x4D:
000159 f821      	BLD  R2,1
                 ; 0000 00D3 
                 ; 0000 00D4         /* Xu ly du lieu L3 */
                 ; 0000 00D5         /* Chuyen sang bo nho dem*/
                 ; 0000 00D6         for(Uc_loop1_cnt = 0; Uc_loop1_cnt<NUM_SAMPLE; Uc_loop1_cnt++)
00015a e030      	LDI  R19,LOW(0)
                 _0x39:
00015b 3035      	CPI  R19,5
00015c f438      	BRSH _0x3A
                 ; 0000 00D7         {
                 ; 0000 00D8             Uint_CurrentTmp_Array[Uc_loop1_cnt] = AI10__Current_L3[Uc_loop1_cnt];
00015d d233      	RCALL SUBOPT_0x7
00015e d239      	RCALL SUBOPT_0x8
00015f 2fe3      	MOV  R30,R19
000160 d22a      	RCALL SUBOPT_0x6
000161 d25b      	RCALL SUBOPT_0xE
                 ; 0000 00D9         }
000162 5f3f      	SUBI R19,-1
000163 cff7      	RJMP _0x39
                 _0x3A:
                 ; 0000 00DA         /* Sắp xếp tu min-> max*/
                 ; 0000 00DB         for(Uc_loop1_cnt = 0; Uc_loop1_cnt<NUM_SAMPLE; Uc_loop1_cnt++)
000164 e030      	LDI  R19,LOW(0)
                 _0x3C:
000165 3035      	CPI  R19,5
000166 f488      	BRSH _0x3D
                 ; 0000 00DC         {
                 ; 0000 00DD             for(Uc_loop2_cnt = Uc_loop1_cnt; Uc_loop2_cnt<NUM_SAMPLE; Uc_loop2_cnt++)
000167 2f23      	MOV  R18,R19
                 _0x3F:
000168 3025      	CPI  R18,5
000169 f460      	BRSH _0x40
                 ; 0000 00DE             {
                 ; 0000 00DF                 if(Uint_CurrentTmp_Array[Uc_loop1_cnt] > Uint_CurrentTmp_Array[Uc_loop2_cnt])
00016a d226      	RCALL SUBOPT_0x7
00016b d238      	RCALL SUBOPT_0xB
00016c f438      	BRSH _0x41
                 ; 0000 00E0                 {
                 ; 0000 00E1                     Uint_Tmp = Uint_CurrentTmp_Array[Uc_loop1_cnt];
00016d d223      	RCALL SUBOPT_0x7
00016e d243      	RCALL SUBOPT_0xC
                 ; 0000 00E2                     Uint_CurrentTmp_Array[Uc_loop1_cnt] = Uint_CurrentTmp_Array[Uc_loop2_cnt];
00016f d228      	RCALL SUBOPT_0x8
000170 d245      	RCALL SUBOPT_0xD
000171 d24b      	RCALL SUBOPT_0xE
                 ; 0000 00E3                     Uint_CurrentTmp_Array[Uc_loop2_cnt] = Uint_Tmp;
000172 d243      	RCALL SUBOPT_0xD
000173 d24b      	RCALL SUBOPT_0xF
                 ; 0000 00E4                 }
                 ; 0000 00E5             }
                 _0x41:
000174 5f2f      	SUBI R18,-1
000175 cff2      	RJMP _0x3F
                 _0x40:
                 ; 0000 00E6         }
000176 5f3f      	SUBI R19,-1
000177 cfed      	RJMP _0x3C
                 _0x3D:
                 ; 0000 00E7         /* Loc phan du lieu nhieu thap va cao */
                 ; 0000 00E8         Ul_Sum = 0;
000178 d24b      	RCALL SUBOPT_0x10
                 ; 0000 00E9         for(Uc_loop1_cnt = NUM_FILTER;Uc_loop1_cnt<(NUM_SAMPLE - NUM_FILTER); Uc_loop1_cnt++)
                 _0x43:
000179 3034      	CPI  R19,4
00017a f420      	BRSH _0x44
                 ; 0000 00EA         {
                 ; 0000 00EB             Ul_Sum += Uint_CurrentTmp_Array[Uc_loop1_cnt];
00017b d215      	RCALL SUBOPT_0x7
00017c d24b      	RCALL SUBOPT_0x11
                 ; 0000 00EC         }
00017d 5f3f      	SUBI R19,-1
00017e cffa      	RJMP _0x43
                 _0x44:
                 ; 0000 00ED         Ul_Sum = Ul_Sum/(NUM_SAMPLE-2*NUM_FILTER);
00017f d24d      	RCALL SUBOPT_0x12
                 ; 0000 00EE         /* Xuat du lieu len led */
                 ; 0000 00EF         if(Uc_Timer_cnt == 200)
000180 f429      	BRNE _0x45
                 ; 0000 00F0         {
                 ; 0000 00F1             Uint_dataLed3 = Ul_Sum;
                +
000181 9340 0164+STS _Uint_dataLed3 + ( 0 ) , R20
000183 9350 0165+STS _Uint_dataLed3 + ( 0 ) + 1 , R21
                 	__PUTWMRN _Uint_dataLed3,0,20,21
                 ; 0000 00F2             Uc_Timer_cnt = 0;
000185 24bb      	CLR  R11
                 ; 0000 00F3         }
                 ; 0000 00F4         if(AI10_Current_Set < Uint_dataLed3)    Bit_Warning_3 =1;
                 _0x45:
000186 91e0 0164 	LDS  R30,_Uint_dataLed3
000188 91f0 0165 	LDS  R31,_Uint_dataLed3+1
00018a 168e      	CP   R8,R30
00018b 069f      	CPC  R9,R31
00018c f410      	BRSH _0x46
00018d 9468      	SET
00018e c001      	RJMP _0x4E
                 ; 0000 00F5         else Bit_Warning_3 = 0;
                 _0x46:
00018f 94e8      	CLT
                 _0x4E:
000190 f822      	BLD  R2,2
                 ; 0000 00F6     }
                 _0x17:
                 ; 0000 00F7 }
000191 d316      	RCALL __LOADLOCR6
000192 9664      	ADIW R28,20
000193 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 00FA {
                 _main:
                 ; .FSTART _main
                 ; 0000 00FB // Declare your local variables here
                 ; 0000 00FC // Input/Output Ports initialization
                 ; 0000 00FD // Port B initialization
                 ; 0000 00FE // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=Out Bit2=In Bit1=Out Bit0=In
                 ; 0000 00FF DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (0<<DDB2) | (1<<DDB1) | (0<<DDB0);
000194 e3ea      	LDI  R30,LOW(58)
000195 bbe7      	OUT  0x17,R30
                 ; 0000 0100 // State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=0 Bit2=T Bit1=0 Bit0=T
                 ; 0000 0101 PORTB=(0<<PORTB7) | (0<<PORTB6) | (1<<PORTB5) | (0<<PORTB4) | (1<<PORTB3) | (0<<PORTB2) | (1<<PORTB1) | (0<<PORTB0);
000196 e2ea      	LDI  R30,LOW(42)
000197 bbe8      	OUT  0x18,R30
                 ; 0000 0102 
                 ; 0000 0103 // Port C initialization
                 ; 0000 0104 // Function: Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=In Bit0=In
                 ; 0000 0105 DDRC=(0<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (0<<DDC1) | (0<<DDC0);
000198 e3ec      	LDI  R30,LOW(60)
000199 bbe4      	OUT  0x14,R30
                 ; 0000 0106 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0107 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00019a e0e0      	LDI  R30,LOW(0)
00019b bbe5      	OUT  0x15,R30
                 ; 0000 0108 
                 ; 0000 0109 // Port D initialization
                 ; 0000 010A // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=Out
                 ; 0000 010B DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (1<<DDD4) | (0<<DDD3) | (0<<DDD2) | (1<<DDD1) | (0<<DDD0);
00019c e1e2      	LDI  R30,LOW(18)
00019d bbe1      	OUT  0x11,R30
                 ; 0000 010C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 010D PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00019e e0e0      	LDI  R30,LOW(0)
00019f bbe2      	OUT  0x12,R30
                 ; 0000 010E 
                 ; 0000 010F // Timer/Counter 0 initialization
                 ; 0000 0110 // Clock source: System Clock
                 ; 0000 0111 // Clock value: Timer 0 Stopped
                 ; 0000 0112 TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
0001a0 bfe3      	OUT  0x33,R30
                 ; 0000 0113 TCNT0=0x94;
0001a1 e9e4      	LDI  R30,LOW(148)
0001a2 bfe2      	OUT  0x32,R30
                 ; 0000 0114 
                 ; 0000 0115 // Timer/Counter 1 initialization
                 ; 0000 0116 // Clock source: System Clock
                 ; 0000 0117 // Clock value: 11059.200 kHz
                 ; 0000 0118 // Mode: Normal top=0xFFFF
                 ; 0000 0119 // OC1A output: Disconnected
                 ; 0000 011A // OC1B output: Disconnected
                 ; 0000 011B // Noise Canceler: Off
                 ; 0000 011C // Input Capture on Falling Edge
                 ; 0000 011D // Timer Period: 2 ms
                 ; 0000 011E // Timer1 Overflow Interrupt: On
                 ; 0000 011F // Input Capture Interrupt: Off
                 ; 0000 0120 // Compare A Match Interrupt: Off
                 ; 0000 0121 // Compare B Match Interrupt: Off
                 ; 0000 0122 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0001a3 e0e0      	LDI  R30,LOW(0)
0001a4 bdef      	OUT  0x2F,R30
                 ; 0000 0123 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
0001a5 e0e1      	LDI  R30,LOW(1)
0001a6 bdee      	OUT  0x2E,R30
                 ; 0000 0124 TCNT1H=0xA9;
0001a7 eae9      	LDI  R30,LOW(169)
0001a8 bded      	OUT  0x2D,R30
                 ; 0000 0125 TCNT1L=0x9A;
0001a9 e9ea      	LDI  R30,LOW(154)
0001aa bdec      	OUT  0x2C,R30
                 ; 0000 0126 ICR1H=0x00;
0001ab e0e0      	LDI  R30,LOW(0)
0001ac bde7      	OUT  0x27,R30
                 ; 0000 0127 ICR1L=0x00;
0001ad bde6      	OUT  0x26,R30
                 ; 0000 0128 OCR1AH=0x00;
0001ae bdeb      	OUT  0x2B,R30
                 ; 0000 0129 OCR1AL=0x00;
0001af bdea      	OUT  0x2A,R30
                 ; 0000 012A OCR1BH=0x00;
0001b0 bde9      	OUT  0x29,R30
                 ; 0000 012B OCR1BL=0x00;
0001b1 bde8      	OUT  0x28,R30
                 ; 0000 012C 
                 ; 0000 012D // Timer/Counter 2 initialization
                 ; 0000 012E // Clock source: System Clock
                 ; 0000 012F // Clock value: Timer2 Stopped
                 ; 0000 0130 // Mode: Normal top=0xFF
                 ; 0000 0131 // OC2 output: Disconnected
                 ; 0000 0132 ASSR=0<<AS2;
0001b2 bde2      	OUT  0x22,R30
                 ; 0000 0133 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0001b3 bde5      	OUT  0x25,R30
                 ; 0000 0134 TCNT2=0x00;
0001b4 bde4      	OUT  0x24,R30
                 ; 0000 0135 OCR2=0x00;
0001b5 bde3      	OUT  0x23,R30
                 ; 0000 0136 
                 ; 0000 0137 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0138 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<TOIE0);
0001b6 e0e4      	LDI  R30,LOW(4)
0001b7 bfe9      	OUT  0x39,R30
                 ; 0000 0139 
                 ; 0000 013A // External Interrupt(s) initialization
                 ; 0000 013B // INT0: Off
                 ; 0000 013C // INT1: Off
                 ; 0000 013D MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0001b8 e0e0      	LDI  R30,LOW(0)
0001b9 bfe5      	OUT  0x35,R30
                 ; 0000 013E 
                 ; 0000 013F // USART initialization
                 ; 0000 0140 // USART disabled
                 ; 0000 0141 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0001ba b9ea      	OUT  0xA,R30
                 ; 0000 0142 
                 ; 0000 0143 // Analog Comparator initialization
                 ; 0000 0144 // Analog Comparator: Off
                 ; 0000 0145 // The Analog Comparator's positive input is
                 ; 0000 0146 // connected to the AIN0 pin
                 ; 0000 0147 // The Analog Comparator's negative input is
                 ; 0000 0148 // connected to the AIN1 pin
                 ; 0000 0149 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0001bb e8e0      	LDI  R30,LOW(128)
0001bc b9e8      	OUT  0x8,R30
                 ; 0000 014A 
                 ; 0000 014B // ADC initialization
                 ; 0000 014C // ADC Clock frequency: 345.600 kHz
                 ; 0000 014D // ADC Voltage Reference: AREF pin
                 ; 0000 014E ADMUX=ADC_VREF_TYPE;
0001bd e4e0      	LDI  R30,LOW(64)
0001be b9e7      	OUT  0x7,R30
                 ; 0000 014F ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
0001bf e8e5      	LDI  R30,LOW(133)
0001c0 b9e6      	OUT  0x6,R30
                 ; 0000 0150 SFIOR=(0<<ACME);
0001c1 e0e0      	LDI  R30,LOW(0)
0001c2 bfe0      	OUT  0x30,R30
                 ; 0000 0151 
                 ; 0000 0152 // SPI initialization
                 ; 0000 0153 // SPI disabled
                 ; 0000 0154 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0001c3 b9ed      	OUT  0xD,R30
                 ; 0000 0155 
                 ; 0000 0156 // TWI initialization
                 ; 0000 0157 // TWI disabled
                 ; 0000 0158 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0001c4 bfe6      	OUT  0x36,R30
                 ; 0000 0159 
                 ; 0000 015A // Global enable interrupts
                 ; 0000 015B #asm("sei")
0001c5 9478      	sei
                 ; 0000 015C Uint_dataLed1 = 8888;
0001c6 ebe8      	LDI  R30,LOW(8888)
0001c7 e2f2      	LDI  R31,HIGH(8888)
0001c8 93e0 0160 	STS  _Uint_dataLed1,R30
0001ca 93f0 0161 	STS  _Uint_dataLed1+1,R31
                 ; 0000 015D Uint_dataLed2 = 8888;
0001cc 93e0 0162 	STS  _Uint_dataLed2,R30
0001ce 93f0 0163 	STS  _Uint_dataLed2+1,R31
                 ; 0000 015E Uint_dataLed3 = 8888;
0001d0 93e0 0164 	STS  _Uint_dataLed3,R30
0001d2 93f0 0165 	STS  _Uint_dataLed3+1,R31
                 ; 0000 015F ADE_7753_init();
0001d4 d0c0      	RCALL _ADE_7753_init
                 ; 0000 0160 Bit_Warning_1 =1;
0001d5 9468      	SET
0001d6 f820      	BLD  R2,0
                 ; 0000 0161 delay_ms(100);
0001d7 e6a4      	LDI  R26,LOW(100)
0001d8 e0b0      	LDI  R27,0
0001d9 d25b      	RCALL _delay_ms
                 ; 0000 0162 Bit_Warning_1 = 0;
0001da 94e8      	CLT
0001db f820      	BLD  R2,0
                 ; 0000 0163 while (1)
                 _0x48:
                 ; 0000 0164     {
                 ; 0000 0165         Read_Current();
0001dc decb      	RCALL _Read_Current
                 ; 0000 0166     }
0001dd cffe      	RJMP _0x48
                 ; 0000 0167 }
                 _0x4B:
0001de cfff      	RJMP _0x4B
                 ; .FEND
                 ;#include "ADE7753.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "delay.h"
                 ;
                 ;
                 ;void    Send_cmd_ADE7753(unsigned char data)
                 ; 0001 0006 {
                 
                 	.CSEG
                 _Send_cmd_ADE7753:
                 ; .FSTART _Send_cmd_ADE7753
                 ; 0001 0007     unsigned char cnt;
                 ; 0001 0008     unsigned char   tmp = data;
                 ; 0001 0009     for(cnt = 0;cnt < 8; cnt++)
0001df 93aa      	ST   -Y,R26
0001e0 d2c4      	RCALL __SAVELOCR2
                 ;	data -> Y+2
                 ;	cnt -> R17
                 ;	tmp -> R16
0001e1 810a      	LDD  R16,Y+2
0001e2 e010      	LDI  R17,LOW(0)
                 _0x20004:
0001e3 3018      	CPI  R17,8
0001e4 f458      	BRSH _0x20005
                 ; 0001 000A     {
                 ; 0001 000B         if((tmp & 0x80) == 0x80)   DOUT_MOSI_SPI_7753_MCU = 1;
0001e5 2fe0      	MOV  R30,R16
0001e6 78e0      	ANDI R30,LOW(0x80)
0001e7 38e0      	CPI  R30,LOW(0x80)
0001e8 f411      	BRNE _0x20006
0001e9 9a91      	SBI  0x12,1
                 ; 0001 000C         else DOUT_MOSI_SPI_7753_MCU = 0;
0001ea c001      	RJMP _0x20009
                 _0x20006:
0001eb 9891      	CBI  0x12,1
                 ; 0001 000D 
                 ; 0001 000E         tmp <<= 1;
                 _0x20009:
0001ec d1e8      	RCALL SUBOPT_0x13
                 ; 0001 000F         DOUT_CLK_SPI_7753_MCU = 1;
                 ; 0001 0010         delay_us(40);
                 ; 0001 0011         DOUT_CLK_SPI_7753_MCU = 0;
0001ed d1ed      	RCALL SUBOPT_0x14
                 ; 0001 0012         delay_us(40);
                 ; 0001 0013     }
0001ee 5f1f      	SUBI R17,-1
0001ef cff3      	RJMP _0x20004
                 _0x20005:
                 ; 0001 0014 }
0001f0 d2bb      	RCALL __LOADLOCR2
0001f1 9623      	ADIW R28,3
0001f2 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char    Read_data_ADE7753(void)
                 ; 0001 0017 {
                 _Read_data_ADE7753:
                 ; .FSTART _Read_data_ADE7753
                 ; 0001 0018     unsigned char cnt;
                 ; 0001 0019     unsigned char data;
                 ; 0001 001A     data = 0;
0001f3 d2b1      	RCALL __SAVELOCR2
                 ;	cnt -> R17
                 ;	data -> R16
0001f4 e000      	LDI  R16,LOW(0)
                 ; 0001 001B     for(cnt = 0;cnt < 8; cnt++)
0001f5 e010      	LDI  R17,LOW(0)
                 _0x20011:
0001f6 3018      	CPI  R17,8
0001f7 f430      	BRSH _0x20012
                 ; 0001 001C     {
                 ; 0001 001D         data <<= 1;
0001f8 d1dc      	RCALL SUBOPT_0x13
                 ; 0001 001E         DOUT_CLK_SPI_7753_MCU = 1;
                 ; 0001 001F         delay_us(40);
                 ; 0001 0020         if(DIN_MISO_SPI_7753_MCU == 1)   data += 1;
0001f9 9980      	SBIC 0x10,0
0001fa 5f0f      	SUBI R16,-LOW(1)
                 ; 0001 0021         DOUT_CLK_SPI_7753_MCU = 0;
0001fb d1df      	RCALL SUBOPT_0x14
                 ; 0001 0022         delay_us(40);
                 ; 0001 0023 
                 ; 0001 0024     }
0001fc 5f1f      	SUBI R17,-1
0001fd cff8      	RJMP _0x20011
                 _0x20012:
                 ; 0001 0025     return data;
0001fe 2fe0      	MOV  R30,R16
0001ff c0bd      	RJMP _0x2000001
                 ; 0001 0026 }
                 ; .FEND
                 ;
                 ;void    Write_ADE7753(unsigned char IC_CS,unsigned char addr,unsigned char num_data,unsigned char data_1,unsigned char d ...
                 ; 0001 0029 {
                 _Write_ADE7753:
                 ; .FSTART _Write_ADE7753
                 ; 0001 002A     unsigned char data[4];
                 ; 0001 002B     unsigned char   i;
                 ; 0001 002C     data[0] = data_1;
000200 93aa      	ST   -Y,R26
000201 9724      	SBIW R28,4
000202 931a      	ST   -Y,R17
                 ;	IC_CS -> Y+10
                 ;	addr -> Y+9
                 ;	num_data -> Y+8
                 ;	data_1 -> Y+7
                 ;	data_2 -> Y+6
                 ;	data_3 -> Y+5
                 ;	data -> Y+1
                 ;	i -> R17
000203 81ef      	LDD  R30,Y+7
000204 83e9      	STD  Y+1,R30
                 ; 0001 002D     data[1] = data_2;
000205 81ee      	LDD  R30,Y+6
000206 83ea      	STD  Y+2,R30
                 ; 0001 002E     data[2] = data_3;
000207 81ed      	LDD  R30,Y+5
000208 83eb      	STD  Y+3,R30
                 ; 0001 002F 
                 ; 0001 0030     switch (IC_CS)
000209 85ea      	LDD  R30,Y+10
00020a d1d5      	RCALL SUBOPT_0x15
                 ; 0001 0031     {
                 ; 0001 0032         case 1:
00020b f419      	BRNE _0x2001B
                 ; 0001 0033         {
                 ; 0001 0034             PHASE_1_ON;
00020c 9aac      	SBI  0x15,4
                 ; 0001 0035             PHASE_2_OFF;
00020d d1d7      	RCALL SUBOPT_0x16
                 ; 0001 0036             PHASE_3_OFF;
                 ; 0001 0037             break;
00020e c00f      	RJMP _0x2001A
                 ; 0001 0038         }
                 ; 0001 0039         case 2:
                 _0x2001B:
00020f 30e2      	CPI  R30,LOW(0x2)
000210 e0a0      	LDI  R26,HIGH(0x2)
000211 07fa      	CPC  R31,R26
000212 f421      	BRNE _0x20022
                 ; 0001 003A         {
                 ; 0001 003B             PHASE_1_OFF;
000213 98ac      	CBI  0x15,4
                 ; 0001 003C             PHASE_2_ON;
000214 9aad      	SBI  0x15,5
                 ; 0001 003D             PHASE_3_OFF;
000215 98ab      	CBI  0x15,3
                 ; 0001 003E             break;
000216 c007      	RJMP _0x2001A
                 ; 0001 003F         }
                 ; 0001 0040         case 3:
                 _0x20022:
000217 30e3      	CPI  R30,LOW(0x3)
000218 e0a0      	LDI  R26,HIGH(0x3)
000219 07fa      	CPC  R31,R26
00021a f419      	BRNE _0x2001A
                 ; 0001 0041         {
                 ; 0001 0042             PHASE_1_OFF;
00021b 98ac      	CBI  0x15,4
                 ; 0001 0043             PHASE_2_OFF;
00021c 98ad      	CBI  0x15,5
                 ; 0001 0044             PHASE_3_ON;
00021d 9aab      	SBI  0x15,3
                 ; 0001 0045             break;
                 ; 0001 0046         }
                 ; 0001 0047     }
                 _0x2001A:
                 ; 0001 0048     addr |= 0x80;
00021e 85e9      	LDD  R30,Y+9
00021f 68e0      	ORI  R30,0x80
000220 87e9      	STD  Y+9,R30
                 ; 0001 0049     Send_cmd_ADE7753(addr);
000221 85a9      	LDD  R26,Y+9
000222 dfbc      	RCALL _Send_cmd_ADE7753
                 ; 0001 004A     delay_us(20);
                +
000223 e48a     +LDI R24 , LOW ( 74 )
                +__DELAY_USB_LOOP :
000224 958a     +DEC R24
000225 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 74
                 ; 0001 004B     for(i=0;i<num_data;i++)    Send_cmd_ADE7753(data[i]);
000226 e010      	LDI  R17,LOW(0)
                 _0x20031:
000227 85e8      	LDD  R30,Y+8
000228 171e      	CP   R17,R30
000229 f440      	BRSH _0x20032
00022a d1bd      	RCALL SUBOPT_0x17
00022b 01de      	MOVW R26,R28
00022c 9611      	ADIW R26,1
00022d d16e      	RCALL SUBOPT_0x9
00022e 91ac      	LD   R26,X
00022f dfaf      	RCALL _Send_cmd_ADE7753
000230 5f1f      	SUBI R17,-1
000231 cff5      	RJMP _0x20031
                 _0x20032:
                 ; 0001 004C PORTC.4 = 0;
000232 98ac      	CBI  0x15,4
                 ; 0001 004D     PHASE_2_OFF;
000233 d1b1      	RCALL SUBOPT_0x16
                 ; 0001 004E     PHASE_3_OFF;
                 ; 0001 004F }
000234 8118      	LDD  R17,Y+0
000235 962b      	ADIW R28,11
000236 9508      	RET
                 ; .FEND
                 ;unsigned long    Read_ADE7753(unsigned char IC_CS,unsigned char addr,unsigned char num_data)
                 ; 0001 0051 {
                 _Read_ADE7753:
                 ; .FSTART _Read_ADE7753
                 ; 0001 0052     unsigned char   i;
                 ; 0001 0053     unsigned char   data[4];
                 ; 0001 0054     unsigned long int res;
                 ; 0001 0055     for(i=0;i<4;i++)    data[i] = 0;
000237 93aa      	ST   -Y,R26
000238 9728      	SBIW R28,8
000239 931a      	ST   -Y,R17
                 ;	IC_CS -> Y+11
                 ;	addr -> Y+10
                 ;	num_data -> Y+9
                 ;	i -> R17
                 ;	data -> Y+5
                 ;	res -> Y+1
00023a e010      	LDI  R17,LOW(0)
                 _0x2003A:
00023b 3014      	CPI  R17,4
00023c f440      	BRSH _0x2003B
00023d d1aa      	RCALL SUBOPT_0x17
00023e 01de      	MOVW R26,R28
00023f 9615      	ADIW R26,5
000240 d15b      	RCALL SUBOPT_0x9
000241 e0e0      	LDI  R30,LOW(0)
000242 93ec      	ST   X,R30
000243 5f1f      	SUBI R17,-1
000244 cff6      	RJMP _0x2003A
                 _0x2003B:
                 ; 0001 0056 switch (IC_CS)
000245 85eb      	LDD  R30,Y+11
000246 d199      	RCALL SUBOPT_0x15
                 ; 0001 0057     {
                 ; 0001 0058         case 1:
000247 f419      	BRNE _0x2003F
                 ; 0001 0059         {
                 ; 0001 005A             PHASE_1_ON;
000248 9aac      	SBI  0x15,4
                 ; 0001 005B             PHASE_2_OFF;
000249 d19b      	RCALL SUBOPT_0x16
                 ; 0001 005C             PHASE_3_OFF;
                 ; 0001 005D             break;
00024a c00f      	RJMP _0x2003E
                 ; 0001 005E         }
                 ; 0001 005F         case 2:
                 _0x2003F:
00024b 30e2      	CPI  R30,LOW(0x2)
00024c e0a0      	LDI  R26,HIGH(0x2)
00024d 07fa      	CPC  R31,R26
00024e f421      	BRNE _0x20046
                 ; 0001 0060         {
                 ; 0001 0061             PHASE_1_OFF;
00024f 98ac      	CBI  0x15,4
                 ; 0001 0062             PHASE_2_ON;
000250 9aad      	SBI  0x15,5
                 ; 0001 0063             PHASE_3_OFF;
000251 98ab      	CBI  0x15,3
                 ; 0001 0064             break;
000252 c007      	RJMP _0x2003E
                 ; 0001 0065         }
                 ; 0001 0066         case 3:
                 _0x20046:
000253 30e3      	CPI  R30,LOW(0x3)
000254 e0a0      	LDI  R26,HIGH(0x3)
000255 07fa      	CPC  R31,R26
000256 f419      	BRNE _0x2003E
                 ; 0001 0067         {
                 ; 0001 0068             PHASE_1_OFF;
000257 98ac      	CBI  0x15,4
                 ; 0001 0069             PHASE_2_OFF;
000258 98ad      	CBI  0x15,5
                 ; 0001 006A             PHASE_3_ON;
000259 9aab      	SBI  0x15,3
                 ; 0001 006B             break;
                 ; 0001 006C         }
                 ; 0001 006D     }
                 _0x2003E:
                 ; 0001 006E     delay_ms(10);
00025a e0aa      	LDI  R26,LOW(10)
00025b e0b0      	LDI  R27,0
00025c d1d8      	RCALL _delay_ms
                 ; 0001 006F     addr &= 0x3F;
00025d 85ea      	LDD  R30,Y+10
00025e 73ef      	ANDI R30,LOW(0x3F)
00025f 87ea      	STD  Y+10,R30
                 ; 0001 0070     Send_cmd_ADE7753(addr);
000260 85aa      	LDD  R26,Y+10
000261 df7d      	RCALL _Send_cmd_ADE7753
                 ; 0001 0071     for(i=0;i<num_data;i++) data[i] = Read_data_ADE7753();
000262 e010      	LDI  R17,LOW(0)
                 _0x20055:
000263 85e9      	LDD  R30,Y+9
000264 171e      	CP   R17,R30
000265 f468      	BRSH _0x20056
000266 d181      	RCALL SUBOPT_0x17
000267 01de      	MOVW R26,R28
000268 9615      	ADIW R26,5
000269 0fea      	ADD  R30,R26
00026a 1ffb      	ADC  R31,R27
00026b 93ff      	PUSH R31
00026c 93ef      	PUSH R30
00026d df85      	RCALL _Read_data_ADE7753
00026e 91af      	POP  R26
00026f 91bf      	POP  R27
000270 93ec      	ST   X,R30
000271 5f1f      	SUBI R17,-1
000272 cff0      	RJMP _0x20055
                 _0x20056:
                 ; 0001 0072 PORTC.4 = 0;
000273 98ac      	CBI  0x15,4
                 ; 0001 0073     PHASE_2_OFF;
000274 d170      	RCALL SUBOPT_0x16
                 ; 0001 0074     PHASE_3_OFF;
                 ; 0001 0075     res = 0;
000275 e0e0      	LDI  R30,LOW(0)
                +
000276 83e9     +STD Y + 1 , R30
000277 83ea     +STD Y + 1 + 1 , R30
000278 83eb     +STD Y + 1 + 2 , R30
000279 83ec     +STD Y + 1 + 3 , R30
                 	__CLRD1S 1
                 ; 0001 0076     for(i=0;i<num_data;i++)
00027a e010      	LDI  R17,LOW(0)
                 _0x2005E:
00027b 85e9      	LDD  R30,Y+9
00027c 171e      	CP   R17,R30
00027d f480      	BRSH _0x2005F
                 ; 0001 0077     {
                 ; 0001 0078         res <<= 8;
00027e d16c      	RCALL SUBOPT_0x18
00027f e0e8      	LDI  R30,LOW(8)
000280 d1c3      	RCALL __LSLD12
000281 d16e      	RCALL SUBOPT_0x19
                 ; 0001 0079         res += data[i];
000282 d165      	RCALL SUBOPT_0x17
000283 01de      	MOVW R26,R28
000284 9615      	ADIW R26,5
000285 d116      	RCALL SUBOPT_0x9
000286 91ec      	LD   R30,X
000287 e0f0      	LDI  R31,0
000288 d162      	RCALL SUBOPT_0x18
000289 d1cb      	RCALL __CWD1
00028a d1b4      	RCALL __ADDD12
00028b d164      	RCALL SUBOPT_0x19
                 ; 0001 007A     }
00028c 5f1f      	SUBI R17,-1
00028d cfed      	RJMP _0x2005E
                 _0x2005F:
                 ; 0001 007B     return (res);
                +
00028e 81e9     +LDD R30 , Y + 1
00028f 81fa     +LDD R31 , Y + 1 + 1
000290 816b     +LDD R22 , Y + 1 + 2
000291 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
000292 8118      	LDD  R17,Y+0
000293 962c      	ADIW R28,12
000294 9508      	RET
                 ; 0001 007C }
                 ; .FEND
                 ;
                 ;
                 ;void    ADE_7753_init(void)
                 ; 0001 0080 {
                 _ADE_7753_init:
                 ; .FSTART _ADE_7753_init
                 ; 0001 0081     unsigned int   reg = 0;
                 ; 0001 0082     Write_ADE7753(1,MODE,0x00,0x00,0x00);
000295 d20f      	RCALL __SAVELOCR2
                 ;	reg -> R16,R17
                +
000296 e000     +LDI R16 , LOW ( 0 )
000297 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000298 d0ce      	RCALL SUBOPT_0x0
000299 d15b      	RCALL SUBOPT_0x1A
00029a d15f      	RCALL SUBOPT_0x1B
00029b d15e      	RCALL SUBOPT_0x1B
00029c d160      	RCALL SUBOPT_0x1C
                 ; 0001 0083     delay_ms(500);
                 ; 0001 0084     reg = 0;
                +
00029d e000     +LDI R16 , LOW ( 0 )
00029e e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0001 0085     reg |= (1<<SWRST);
00029f 6400      	ORI  R16,LOW(64)
                 ; 0001 0086     Write_ADE7753(1,MODE,(reg>>8)&0xFF,reg & 0xff,0x00);
0002a0 d0c6      	RCALL SUBOPT_0x0
0002a1 d153      	RCALL SUBOPT_0x1A
0002a2 931a      	ST   -Y,R17
0002a3 930a      	ST   -Y,R16
0002a4 d158      	RCALL SUBOPT_0x1C
                 ; 0001 0087     delay_ms(500);
                 ; 0001 0088     reg = Read_ADE7753(1,MODE);
0002a5 d0c1      	RCALL SUBOPT_0x0
0002a6 d15b      	RCALL SUBOPT_0x1D
                 ; 0001 0089     delay_ms(500);
0002a7 d160      	RCALL SUBOPT_0x1E
                 ; 0001 008A     reg = Read_ADE7753(1,MODE);
0002a8 d159      	RCALL SUBOPT_0x1D
                 ; 0001 008B     reg |= (1<<DISHPF) | (1<<WAVSEL0) | (1<<WAVSEL1);
                +
0002a9 6001     +ORI R16 , LOW ( 24577 )
0002aa 6610     +ORI R17 , HIGH ( 24577 )
                 	__ORWRN 16,17,24577
                 ; 0001 008C     // Write_ADE7753(1,MODE,(reg>>8)&0xFF,reg & 0xff,0x00);
                 ; 0001 008D     delay_ms(500);
0002ab d15c      	RCALL SUBOPT_0x1E
                 ; 0001 008E     Write_ADE7753(1,SAGLVL,0X2a,0X00,0X00);
0002ac e1ef      	LDI  R30,LOW(31)
0002ad 93ea      	ST   -Y,R30
0002ae d0b8      	RCALL SUBOPT_0x0
0002af e2ea      	LDI  R30,LOW(42)
0002b0 93ea      	ST   -Y,R30
0002b1 d148      	RCALL SUBOPT_0x1B
0002b2 e0a0      	LDI  R26,LOW(0)
0002b3 df4c      	RCALL _Write_ADE7753
                 ; 0001 008F     Write_ADE7753(1,SAGCYC,0XFF,0X00,0X00);
0002b4 d0b2      	RCALL SUBOPT_0x0
0002b5 e1ee      	LDI  R30,LOW(30)
0002b6 93ea      	ST   -Y,R30
0002b7 d0af      	RCALL SUBOPT_0x0
0002b8 efef      	LDI  R30,LOW(255)
0002b9 93ea      	ST   -Y,R30
0002ba d13f      	RCALL SUBOPT_0x1B
0002bb e0a0      	LDI  R26,LOW(0)
0002bc df43      	RCALL _Write_ADE7753
                 ; 0001 0090 }
                 _0x2000001:
0002bd 9109      	LD   R16,Y+
0002be 9119      	LD   R17,Y+
0002bf 9508      	RET
                 ; .FEND
                 ;#include "led.h"
                 ;#include "mega8.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "delay.h"
                 ;
                 ;unsigned char   BCDLED[11]={0xF9,0x81,0xBA,0xAB,0xC3,0x6B,0x7B,0xA1,0xFB,0xEB,0};
                 
                 	.DSEG
                 ;unsigned int    LED_SELECT[12] = {0x0001,0x0002,0x0004,0x0008,0x0040,0x0020,0x0010,0x0080,0x4000,0x2000,0x1000,0x8000};
                 ;
                 ;
                 ;unsigned char   Uc_Select_led=1;
                 ;
                 ;/* Cac gia tri hien thi tren cac led */
                 ;unsigned int   Uint_dataLed1 = 0;
                 ;unsigned int   Uint_dataLed2 = 0;
                 ;unsigned int   Uint_dataLed3 = 0;
                 ;
                 ;
                 ;void    LED(void)
                 ; 0002 0012 {
                 
                 	.CSEG
                 _LED:
                 ; .FSTART _LED
                 ; 0002 0013     unsigned char data;
                 ; 0002 0014     if(Uc_Select_led > NUM_7SEG) Uc_Select_led=1;
0002c0 931a      	ST   -Y,R17
                 ;	data -> R17
0002c1 e0ec      	LDI  R30,LOW(12)
0002c2 15ea      	CP   R30,R10
0002c3 f410      	BRSH _0x40005
0002c4 e0e1      	LDI  R30,LOW(1)
0002c5 2eae      	MOV  R10,R30
                 ; 0002 0015 
                 ; 0002 0016     if(Uc_Select_led == 1)    data = Uint_dataLed1/1000;
                 _0x40005:
0002c6 e0e1      	LDI  R30,LOW(1)
0002c7 15ea      	CP   R30,R10
0002c8 f419      	BRNE _0x40006
0002c9 d142      	RCALL SUBOPT_0x1F
0002ca d146      	RCALL SUBOPT_0x20
0002cb c041      	RJMP _0x4004C
                 ; 0002 0017     else if(Uc_Select_led == 2)    data = Uint_dataLed1/100%10;
                 _0x40006:
0002cc e0e2      	LDI  R30,LOW(2)
0002cd 15ea      	CP   R30,R10
0002ce f419      	BRNE _0x40008
0002cf d13c      	RCALL SUBOPT_0x1F
0002d0 d144      	RCALL SUBOPT_0x21
0002d1 c038      	RJMP _0x4004D
                 ; 0002 0018     else if(Uc_Select_led == 3)    data = Uint_dataLed1/10%10;
                 _0x40008:
0002d2 e0e3      	LDI  R30,LOW(3)
0002d3 15ea      	CP   R30,R10
0002d4 f419      	BRNE _0x4000A
0002d5 d136      	RCALL SUBOPT_0x1F
0002d6 d143      	RCALL SUBOPT_0x22
0002d7 c032      	RJMP _0x4004D
                 ; 0002 0019     else if(Uc_Select_led == 4)    data = Uint_dataLed1%10;
                 _0x4000A:
0002d8 e0e4      	LDI  R30,LOW(4)
0002d9 15ea      	CP   R30,R10
0002da f411      	BRNE _0x4000C
0002db d130      	RCALL SUBOPT_0x1F
0002dc c02d      	RJMP _0x4004D
                 ; 0002 001A     else if(Uc_Select_led == 5)    data = Uint_dataLed2/1000;
                 _0x4000C:
0002dd e0e5      	LDI  R30,LOW(5)
0002de 15ea      	CP   R30,R10
0002df f419      	BRNE _0x4000E
0002e0 d13e      	RCALL SUBOPT_0x23
0002e1 d12f      	RCALL SUBOPT_0x20
0002e2 c02a      	RJMP _0x4004C
                 ; 0002 001B     else if(Uc_Select_led == 6)    data = Uint_dataLed2/100%10;
                 _0x4000E:
0002e3 e0e6      	LDI  R30,LOW(6)
0002e4 15ea      	CP   R30,R10
0002e5 f419      	BRNE _0x40010
0002e6 d138      	RCALL SUBOPT_0x23
0002e7 d12d      	RCALL SUBOPT_0x21
0002e8 c021      	RJMP _0x4004D
                 ; 0002 001C     else if(Uc_Select_led == 7)    data = Uint_dataLed2/10%10;
                 _0x40010:
0002e9 e0e7      	LDI  R30,LOW(7)
0002ea 15ea      	CP   R30,R10
0002eb f419      	BRNE _0x40012
0002ec d132      	RCALL SUBOPT_0x23
0002ed d12c      	RCALL SUBOPT_0x22
0002ee c01b      	RJMP _0x4004D
                 ; 0002 001D     else if(Uc_Select_led == 8)    data = Uint_dataLed2%10;
                 _0x40012:
0002ef e0e8      	LDI  R30,LOW(8)
0002f0 15ea      	CP   R30,R10
0002f1 f411      	BRNE _0x40014
0002f2 d12c      	RCALL SUBOPT_0x23
0002f3 c016      	RJMP _0x4004D
                 ; 0002 001E     else if(Uc_Select_led == 9)    data = Uint_dataLed3/1000;
                 _0x40014:
0002f4 e0e9      	LDI  R30,LOW(9)
0002f5 15ea      	CP   R30,R10
0002f6 f419      	BRNE _0x40016
0002f7 d12c      	RCALL SUBOPT_0x24
0002f8 d118      	RCALL SUBOPT_0x20
0002f9 c013      	RJMP _0x4004C
                 ; 0002 001F     else if(Uc_Select_led == 10)    data = Uint_dataLed3/100%10;
                 _0x40016:
0002fa e0ea      	LDI  R30,LOW(10)
0002fb 15ea      	CP   R30,R10
0002fc f419      	BRNE _0x40018
0002fd d126      	RCALL SUBOPT_0x24
0002fe d116      	RCALL SUBOPT_0x21
0002ff c00a      	RJMP _0x4004D
                 ; 0002 0020     else if(Uc_Select_led == 11)    data = Uint_dataLed3/10%10;
                 _0x40018:
000300 e0eb      	LDI  R30,LOW(11)
000301 15ea      	CP   R30,R10
000302 f419      	BRNE _0x4001A
000303 d120      	RCALL SUBOPT_0x24
000304 d115      	RCALL SUBOPT_0x22
000305 c004      	RJMP _0x4004D
                 ; 0002 0021     else if(Uc_Select_led == 12)    data = Uint_dataLed3%10;
                 _0x4001A:
000306 e0ec      	LDI  R30,LOW(12)
000307 15ea      	CP   R30,R10
000308 f429      	BRNE _0x4001C
000309 d11a      	RCALL SUBOPT_0x24
                 _0x4004D:
00030a e0ea      	LDI  R30,LOW(10)
00030b e0f0      	LDI  R31,HIGH(10)
00030c d18d      	RCALL __MODW21U
                 _0x4004C:
00030d 2f1e      	MOV  R17,R30
                 ; 0002 0022 
                 ; 0002 0023     SCAN_LED(Uc_Select_led,data);
                 _0x4001C:
00030e 92aa      	ST   -Y,R10
00030f 2fa1      	MOV  R26,R17
000310 d02e      	RCALL _SCAN_LED
                 ; 0002 0024     Uc_Select_led++;
000311 94a3      	INC  R10
                 ; 0002 0025 }
000312 9119      	LD   R17,Y+
000313 9508      	RET
                 ; .FEND
                 ;
                 ;/*
                 ;Gui data ra led
                 ;Gui lan luot data_first, data_second, data_third
                 ;Khi gui het du lieu se tien hanh xuat du lieu
                 ;*/
                 ;void    SEND_DATA_LED(unsigned char  data_first,unsigned char  data_second,unsigned char  data_third)
                 ; 0002 002D {
                 _SEND_DATA_LED:
                 ; .FSTART _SEND_DATA_LED
                 ; 0002 002E     unsigned char   i;
                 ; 0002 002F     unsigned char   data;
                 ; 0002 0030     data = data_first;
000314 93aa      	ST   -Y,R26
000315 d18f      	RCALL __SAVELOCR2
                 ;	data_first -> Y+4
                 ;	data_second -> Y+3
                 ;	data_third -> Y+2
                 ;	i -> R17
                 ;	data -> R16
000316 810c      	LDD  R16,Y+4
                 ; 0002 0031     for(i=0;i<8;i++)
000317 e010      	LDI  R17,LOW(0)
                 _0x4001E:
000318 3018      	CPI  R17,8
000319 f440      	BRSH _0x4001F
                 ; 0002 0032     {
                 ; 0002 0033         if((data & 0x80))    DO_595_MOSI = 1;
00031a ff07      	SBRS R16,7
00031b c002      	RJMP _0x40020
00031c 9ac3      	SBI  0x18,3
                 ; 0002 0034         else    DO_595_MOSI = 0;
00031d c001      	RJMP _0x40023
                 _0x40020:
00031e 98c3      	CBI  0x18,3
                 ; 0002 0035         data <<= 1;
                 _0x40023:
00031f d109      	RCALL SUBOPT_0x25
                 ; 0002 0036         DO_595_SCK = 1;
                 ; 0002 0037         //delay_us(3);
                 ; 0002 0038         DO_595_SCK = 0;
                 ; 0002 0039         //delay_us(1);
                 ; 0002 003A     }
000320 5f1f      	SUBI R17,-1
000321 cff6      	RJMP _0x4001E
                 _0x4001F:
                 ; 0002 003B     data = data_second;
000322 810b      	LDD  R16,Y+3
                 ; 0002 003C     for(i=0;i<8;i++)
000323 e010      	LDI  R17,LOW(0)
                 _0x4002B:
000324 3018      	CPI  R17,8
000325 f440      	BRSH _0x4002C
                 ; 0002 003D     {
                 ; 0002 003E         if((data & 0x80))    DO_595_MOSI = 1;
000326 ff07      	SBRS R16,7
000327 c002      	RJMP _0x4002D
000328 9ac3      	SBI  0x18,3
                 ; 0002 003F         else    DO_595_MOSI = 0;
000329 c001      	RJMP _0x40030
                 _0x4002D:
00032a 98c3      	CBI  0x18,3
                 ; 0002 0040         data <<= 1;
                 _0x40030:
00032b d0fd      	RCALL SUBOPT_0x25
                 ; 0002 0041         DO_595_SCK = 1;
                 ; 0002 0042         //delay_us(3);
                 ; 0002 0043         DO_595_SCK = 0;
                 ; 0002 0044         //delay_us(1);
                 ; 0002 0045     }
00032c 5f1f      	SUBI R17,-1
00032d cff6      	RJMP _0x4002B
                 _0x4002C:
                 ; 0002 0046     data = data_third;
00032e 810a      	LDD  R16,Y+2
                 ; 0002 0047     for(i=0;i<8;i++)
00032f e010      	LDI  R17,LOW(0)
                 _0x40038:
000330 3018      	CPI  R17,8
000331 f440      	BRSH _0x40039
                 ; 0002 0048     {
                 ; 0002 0049         if((data & 0x80))    DO_595_MOSI = 1;
000332 ff07      	SBRS R16,7
000333 c002      	RJMP _0x4003A
000334 9ac3      	SBI  0x18,3
                 ; 0002 004A         else    DO_595_MOSI = 0;
000335 c001      	RJMP _0x4003D
                 _0x4003A:
000336 98c3      	CBI  0x18,3
                 ; 0002 004B         data <<= 1;
                 _0x4003D:
000337 d0f1      	RCALL SUBOPT_0x25
                 ; 0002 004C         DO_595_SCK = 1;
                 ; 0002 004D         //delay_us(3);
                 ; 0002 004E         DO_595_SCK = 0;
                 ; 0002 004F         //delay_us(1);
                 ; 0002 0050     }
000338 5f1f      	SUBI R17,-1
000339 cff6      	RJMP _0x40038
                 _0x40039:
                 ; 0002 0051     CTRL_595_ON;
00033a 9ac1      	SBI  0x18,1
                 ; 0002 0052     CTRL_595_OFF;
00033b 98c1      	CBI  0x18,1
                 ; 0002 0053 }
00033c d16f      	RCALL __LOADLOCR2
00033d 9625      	ADIW R28,5
00033e 9508      	RET
                 ; .FEND
                 ;
                 ;/*
                 ;Ham quet led
                 ;num_led: Thu tu led
                 ;data: Du lieu hien thi tren led.
                 ;*/
                 ;void    SCAN_LED(unsigned char num_led,unsigned char    data)
                 ; 0002 005B {
                 _SCAN_LED:
                 ; .FSTART _SCAN_LED
                 ; 0002 005C     unsigned char   byte1,byte2,byte3;
                 ; 0002 005D     byte1 = 0;
00033f 93aa      	ST   -Y,R26
000340 d162      	RCALL __SAVELOCR4
                 ;	num_led -> Y+5
                 ;	data -> Y+4
                 ;	byte1 -> R17
                 ;	byte2 -> R16
                 ;	byte3 -> R19
000341 e010      	LDI  R17,LOW(0)
                 ; 0002 005E     byte2 = 0;
000342 e000      	LDI  R16,LOW(0)
                 ; 0002 005F     byte3 = 0;
000343 e030      	LDI  R19,LOW(0)
                 ; 0002 0060 
                 ; 0002 0061     byte2 = (LED_SELECT[num_led-1] >> 8) & 0xff;
000344 d0e8      	RCALL SUBOPT_0x26
000345 d157      	RCALL __GETW1P
000346 2fef      	MOV  R30,R31
000347 e0f0      	LDI  R31,0
000348 2f0e      	MOV  R16,R30
                 ; 0002 0062     byte3 = LED_SELECT[num_led-1] & 0xff;
000349 d0e3      	RCALL SUBOPT_0x26
00034a 91ec      	LD   R30,X
00034b 2f3e      	MOV  R19,R30
                 ; 0002 0063     if(num_led == 2 || num_led == 6 || num_led == 10)   byte1 = 0x04;
00034c 81ad      	LDD  R26,Y+5
00034d 30a2      	CPI  R26,LOW(0x2)
00034e f021      	BREQ _0x40049
00034f 30a6      	CPI  R26,LOW(0x6)
000350 f011      	BREQ _0x40049
000351 30aa      	CPI  R26,LOW(0xA)
000352 f409      	BRNE _0x40048
                 _0x40049:
000353 e014      	LDI  R17,LOW(4)
                 ; 0002 0064     byte1 |= BCDLED[data];
                 _0x40048:
000354 81ec      	LDD  R30,Y+4
000355 e0f0      	LDI  R31,0
000356 57ec      	SUBI R30,LOW(-_BCDLED)
000357 4ffe      	SBCI R31,HIGH(-_BCDLED)
000358 81e0      	LD   R30,Z
000359 2b1e      	OR   R17,R30
                 ; 0002 0065     if(data == 10)
00035a 81ac      	LDD  R26,Y+4
00035b 30aa      	CPI  R26,LOW(0xA)
00035c f419      	BRNE _0x4004B
                 ; 0002 0066     {
                 ; 0002 0067         byte3 = 0;
00035d e030      	LDI  R19,LOW(0)
                 ; 0002 0068         byte2 = 0;
00035e e000      	LDI  R16,LOW(0)
                 ; 0002 0069         byte1 = 0;
00035f e010      	LDI  R17,LOW(0)
                 ; 0002 006A     }
                 ; 0002 006B     SEND_DATA_LED(byte1,byte2,byte3);
                 _0x4004B:
000360 931a      	ST   -Y,R17
000361 930a      	ST   -Y,R16
000362 2fa3      	MOV  R26,R19
000363 dfb0      	RCALL _SEND_DATA_LED
                 ; 0002 006C }
000364 d145      	RCALL __LOADLOCR4
000365 9626      	ADIW R28,6
000366 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _Uint_dataLed1:
000160           	.BYTE 0x2
                 _Uint_dataLed2:
000162           	.BYTE 0x2
                 _Uint_dataLed3:
000164           	.BYTE 0x2
                 _AI10__Current_L1:
000166           	.BYTE 0xA
                 _AI10__Current_L2:
000170           	.BYTE 0xA
                 _AI10__Current_L3:
00017a           	.BYTE 0xA
                 _BCDLED:
000184           	.BYTE 0xB
                 _LED_SELECT:
00018f           	.BYTE 0x18
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x0:
000367 e0e1      	LDI  R30,LOW(1)
000368 93ea      	ST   -Y,R30
000369 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x1:
00036a e1e6      	LDI  R30,LOW(22)
00036b 93ea      	ST   -Y,R30
00036c e0a3      	LDI  R26,LOW(3)
00036d dec9      	RCALL _Read_ADE7753
00036e 01df      	MOVW R26,R30
00036f 01cb      	MOVW R24,R22
000370 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x2:
000371 d103      	RCALL __DIVD21U
                +
000372 83ee     +STD Y + 6 , R30
000373 83ff     +STD Y + 6 + 1 , R31
000374 8768     +STD Y + 6 + 2 , R22
000375 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
000376 2de7      	MOV  R30,R7
000377 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
000378 e6a6      	LDI  R26,LOW(_AI10__Current_L1)
000379 e0b1      	LDI  R27,HIGH(_AI10__Current_L1)
00037a e0f0      	LDI  R31,0
00037b 0fee      	LSL  R30
00037c 1fff      	ROL  R31
00037d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x4:
00037e 0fea      	ADD  R30,R26
00037f 1ffb      	ADC  R31,R27
000380 81ae      	LDD  R26,Y+6
000381 81bf      	LDD  R27,Y+6+1
000382 83a0      	STD  Z+0,R26
000383 83b1      	STD  Z+1,R27
000384 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
000385 e7a0      	LDI  R26,LOW(_AI10__Current_L2)
000386 e0b1      	LDI  R27,HIGH(_AI10__Current_L2)
000387 e0f0      	LDI  R31,0
000388 0fee      	LSL  R30
000389 1fff      	ROL  R31
00038a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
00038b e7aa      	LDI  R26,LOW(_AI10__Current_L3)
00038c e0b1      	LDI  R27,HIGH(_AI10__Current_L3)
00038d e0f0      	LDI  R31,0
00038e 0fee      	LSL  R30
00038f 1fff      	ROL  R31
000390 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 15 TIMES, CODE SIZE REDUCTION:68 WORDS
                 SUBOPT_0x7:
000391 2fe3      	MOV  R30,R19
000392 e0f0      	LDI  R31,0
000393 01de      	MOVW R26,R28
000394 961a      	ADIW R26,10
000395 0fee      	LSL  R30
000396 1fff      	ROL  R31
000397 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x8:
000398 0fea      	ADD  R30,R26
000399 1ffb      	ADC  R31,R27
00039a 010f      	MOVW R0,R30
00039b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 23 TIMES, CODE SIZE REDUCTION:20 WORDS
                 SUBOPT_0x9:
00039c 0fae      	ADD  R26,R30
00039d 1fbf      	ADC  R27,R31
00039e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xA:
00039f d0fd      	RCALL __GETW1P
0003a0 01d0      	MOVW R26,R0
0003a1 93ed      	ST   X+,R30
0003a2 93fc      	ST   X,R31
0003a3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0xB:
0003a4 dff7      	RCALL SUBOPT_0x9
0003a5 900d      	LD   R0,X+
0003a6 901c      	LD   R1,X
0003a7 2fe2      	MOV  R30,R18
0003a8 e0f0      	LDI  R31,0
0003a9 01de      	MOVW R26,R28
0003aa 961a      	ADIW R26,10
0003ab 0fee      	LSL  R30
0003ac 1fff      	ROL  R31
0003ad dfee      	RCALL SUBOPT_0x9
0003ae d0ee      	RCALL __GETW1P
0003af 15e0      	CP   R30,R0
0003b0 05f1      	CPC  R31,R1
0003b1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xC:
0003b2 dfe9      	RCALL SUBOPT_0x9
0003b3 910d      	LD   R16,X+
0003b4 911c      	LD   R17,X
0003b5 cfdb      	RJMP SUBOPT_0x7
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0xD:
0003b6 2fe2      	MOV  R30,R18
0003b7 e0f0      	LDI  R31,0
0003b8 01de      	MOVW R26,R28
0003b9 961a      	ADIW R26,10
0003ba 0fee      	LSL  R30
0003bb 1fff      	ROL  R31
0003bc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xE:
0003bd dfde      	RCALL SUBOPT_0x9
0003be cfe0      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xF:
0003bf 0fea      	ADD  R30,R26
0003c0 1ffb      	ADC  R31,R27
0003c1 8300      	ST   Z,R16
0003c2 8311      	STD  Z+1,R17
0003c3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x10:
                +
0003c4 e040     +LDI R20 , LOW ( 0 )
0003c5 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
0003c6 e031      	LDI  R19,LOW(1)
0003c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x11:
0003c8 dfd3      	RCALL SUBOPT_0x9
0003c9 d0d3      	RCALL __GETW1P
                +
0003ca 0f4e     +ADD R20 , R30
0003cb 1f5f     +ADC R21 , R31
                 	__ADDWRR 20,21,30,31
0003cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x12:
0003cd 01da      	MOVW R26,R20
0003ce e0e3      	LDI  R30,LOW(3)
0003cf e0f0      	LDI  R31,HIGH(3)
0003d0 d091      	RCALL __DIVW21U
0003d1 01af      	MOVW R20,R30
0003d2 ece8      	LDI  R30,LOW(200)
0003d3 15eb      	CP   R30,R11
0003d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x13:
0003d5 0f00      	LSL  R16
0003d6 9a94      	SBI  0x12,4
                +
0003d7 e983     +LDI R24 , LOW ( 147 )
                +__DELAY_USB_LOOP :
0003d8 958a     +DEC R24
0003d9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 147
0003da 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
0003db 9894      	CBI  0x12,4
                +
0003dc e983     +LDI R24 , LOW ( 147 )
                +__DELAY_USB_LOOP :
0003dd 958a     +DEC R24
0003de f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 147
0003df 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
0003e0 e0f0      	LDI  R31,0
0003e1 30e1      	CPI  R30,LOW(0x1)
0003e2 e0a0      	LDI  R26,HIGH(0x1)
0003e3 07fa      	CPC  R31,R26
0003e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
0003e5 98ad      	CBI  0x15,5
0003e6 98ab      	CBI  0x15,3
0003e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
0003e8 2fe1      	MOV  R30,R17
0003e9 e0f0      	LDI  R31,0
0003ea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
                +
0003eb 81a9     +LDD R26 , Y + 1
0003ec 81ba     +LDD R27 , Y + 1 + 1
0003ed 818b     +LDD R24 , Y + 1 + 2
0003ee 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
0003ef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
                +
0003f0 83e9     +STD Y + 1 , R30
0003f1 83fa     +STD Y + 1 + 1 , R31
0003f2 836b     +STD Y + 1 + 2 , R22
0003f3 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
0003f4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
0003f5 e0e9      	LDI  R30,LOW(9)
0003f6 93ea      	ST   -Y,R30
0003f7 e0e2      	LDI  R30,LOW(2)
0003f8 93ea      	ST   -Y,R30
0003f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
0003fa e0e0      	LDI  R30,LOW(0)
0003fb 93ea      	ST   -Y,R30
0003fc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1C:
0003fd e0a0      	LDI  R26,LOW(0)
0003fe de01      	RCALL _Write_ADE7753
0003ff efa4      	LDI  R26,LOW(500)
000400 e0b1      	LDI  R27,HIGH(500)
000401 c033      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1D:
000402 e0e9      	LDI  R30,LOW(9)
000403 93ea      	ST   -Y,R30
000404 e0a2      	LDI  R26,LOW(2)
000405 de31      	RCALL _Read_ADE7753
000406 018f      	MOVW R16,R30
000407 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
000408 efa4      	LDI  R26,LOW(500)
000409 e0b1      	LDI  R27,HIGH(500)
00040a d02a      	RCALL _delay_ms
00040b cf5b      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1F:
00040c 91a0 0160 	LDS  R26,_Uint_dataLed1
00040e 91b0 0161 	LDS  R27,_Uint_dataLed1+1
000410 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x20:
000411 eee8      	LDI  R30,LOW(1000)
000412 e0f3      	LDI  R31,HIGH(1000)
000413 d04e      	RCALL __DIVW21U
000414 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x21:
000415 e6e4      	LDI  R30,LOW(100)
000416 e0f0      	LDI  R31,HIGH(100)
000417 d04a      	RCALL __DIVW21U
000418 01df      	MOVW R26,R30
000419 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x22:
00041a e0ea      	LDI  R30,LOW(10)
00041b e0f0      	LDI  R31,HIGH(10)
00041c d045      	RCALL __DIVW21U
00041d 01df      	MOVW R26,R30
00041e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x23:
00041f 91a0 0162 	LDS  R26,_Uint_dataLed2
000421 91b0 0163 	LDS  R27,_Uint_dataLed2+1
000423 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x24:
000424 91a0 0164 	LDS  R26,_Uint_dataLed3
000426 91b0 0165 	LDS  R27,_Uint_dataLed3+1
000428 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x25:
000429 0f00      	LSL  R16
00042a 9ac5      	SBI  0x18,5
00042b 98c5      	CBI  0x18,5
00042c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x26:
00042d 81ed      	LDD  R30,Y+5
00042e e0f0      	LDI  R31,0
00042f 9731      	SBIW R30,1
000430 e8af      	LDI  R26,LOW(_LED_SELECT)
000431 e0b1      	LDI  R27,HIGH(_LED_SELECT)
000432 0fee      	LSL  R30
000433 1fff      	ROL  R31
000434 cf67      	RJMP SUBOPT_0x9
                 
                 
                 	.CSEG
                 _delay_ms:
000435 9610      	adiw r26,0
000436 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000437 ec8d     +LDI R24 , LOW ( 0xACD )
000438 e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
000439 9701     +SBIW R24 , 1
00043a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
00043b 95a8      	wdr
00043c 9711      	sbiw r26,1
00043d f7c9      	brne __delay_ms0
                 __delay_ms1:
00043e 9508      	ret
                 
                 __ADDD12:
00043f 0fea      	ADD  R30,R26
000440 1ffb      	ADC  R31,R27
000441 1f68      	ADC  R22,R24
000442 1f79      	ADC  R23,R25
000443 9508      	RET
                 
                 __LSLD12:
000444 23ee      	TST  R30
000445 2e0e      	MOV  R0,R30
000446 01fd      	MOVW R30,R26
000447 01bc      	MOVW R22,R24
000448 f031      	BREQ __LSLD12R
                 __LSLD12L:
000449 0fee      	LSL  R30
00044a 1fff      	ROL  R31
00044b 1f66      	ROL  R22
00044c 1f77      	ROL  R23
00044d 940a      	DEC  R0
00044e f7d1      	BRNE __LSLD12L
                 __LSLD12R:
00044f 9508      	RET
                 
                 __LSRW2:
000450 95f6      	LSR  R31
000451 95e7      	ROR  R30
000452 95f6      	LSR  R31
000453 95e7      	ROR  R30
000454 9508      	RET
                 
                 __CWD1:
000455 2f6f      	MOV  R22,R31
000456 0f66      	ADD  R22,R22
000457 0b66      	SBC  R22,R22
000458 2f76      	MOV  R23,R22
000459 9508      	RET
                 
                 __MULW12U:
00045a 9ffa      	MUL  R31,R26
00045b 2df0      	MOV  R31,R0
00045c 9feb      	MUL  R30,R27
00045d 0df0      	ADD  R31,R0
00045e 9fea      	MUL  R30,R26
00045f 2de0      	MOV  R30,R0
000460 0df1      	ADD  R31,R1
000461 9508      	RET
                 
                 __DIVW21U:
000462 2400      	CLR  R0
000463 2411      	CLR  R1
000464 e190      	LDI  R25,16
                 __DIVW21U1:
000465 0faa      	LSL  R26
000466 1fbb      	ROL  R27
000467 1c00      	ROL  R0
000468 1c11      	ROL  R1
000469 1a0e      	SUB  R0,R30
00046a 0a1f      	SBC  R1,R31
00046b f418      	BRCC __DIVW21U2
00046c 0e0e      	ADD  R0,R30
00046d 1e1f      	ADC  R1,R31
00046e c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00046f 60a1      	SBR  R26,1
                 __DIVW21U3:
000470 959a      	DEC  R25
000471 f799      	BRNE __DIVW21U1
000472 01fd      	MOVW R30,R26
000473 01d0      	MOVW R26,R0
000474 9508      	RET
                 
                 __DIVD21U:
000475 933f      	PUSH R19
000476 934f      	PUSH R20
000477 935f      	PUSH R21
000478 2400      	CLR  R0
000479 2411      	CLR  R1
00047a 2744      	CLR  R20
00047b 2755      	CLR  R21
00047c e230      	LDI  R19,32
                 __DIVD21U1:
00047d 0faa      	LSL  R26
00047e 1fbb      	ROL  R27
00047f 1f88      	ROL  R24
000480 1f99      	ROL  R25
000481 1c00      	ROL  R0
000482 1c11      	ROL  R1
000483 1f44      	ROL  R20
000484 1f55      	ROL  R21
000485 1a0e      	SUB  R0,R30
000486 0a1f      	SBC  R1,R31
000487 0b46      	SBC  R20,R22
000488 0b57      	SBC  R21,R23
000489 f428      	BRCC __DIVD21U2
00048a 0e0e      	ADD  R0,R30
00048b 1e1f      	ADC  R1,R31
00048c 1f46      	ADC  R20,R22
00048d 1f57      	ADC  R21,R23
00048e c001      	RJMP __DIVD21U3
                 __DIVD21U2:
00048f 60a1      	SBR  R26,1
                 __DIVD21U3:
000490 953a      	DEC  R19
000491 f759      	BRNE __DIVD21U1
000492 01fd      	MOVW R30,R26
000493 01bc      	MOVW R22,R24
000494 01d0      	MOVW R26,R0
000495 01ca      	MOVW R24,R20
000496 915f      	POP  R21
000497 914f      	POP  R20
000498 913f      	POP  R19
000499 9508      	RET
                 
                 __MODW21U:
00049a dfc7      	RCALL __DIVW21U
00049b 01fd      	MOVW R30,R26
00049c 9508      	RET
                 
                 __GETW1P:
00049d 91ed      	LD   R30,X+
00049e 91fc      	LD   R31,X
00049f 9711      	SBIW R26,1
0004a0 9508      	RET
                 
                 __SAVELOCR6:
0004a1 935a      	ST   -Y,R21
                 __SAVELOCR5:
0004a2 934a      	ST   -Y,R20
                 __SAVELOCR4:
0004a3 933a      	ST   -Y,R19
                 __SAVELOCR3:
0004a4 932a      	ST   -Y,R18
                 __SAVELOCR2:
0004a5 931a      	ST   -Y,R17
0004a6 930a      	ST   -Y,R16
0004a7 9508      	RET
                 
                 __LOADLOCR6:
0004a8 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0004a9 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0004aa 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0004ab 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0004ac 8119      	LDD  R17,Y+1
0004ad 8108      	LD   R16,Y
0004ae 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8L register use summary:
r0 :  25 r1 :  14 r2 :  10 r3 :   0 r4 :   0 r5 :   0 r6 :   4 r7 :   4 
r8 :   5 r9 :   3 r10:  16 r11:   4 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  28 r17:  50 r18:  13 r19:  42 r20:  16 r21:  13 r22:  23 r23:  13 
r24:  26 r25:  10 r26:  95 r27:  30 r28:  18 r29:   1 r30: 269 r31:  79 
x  :  16 y  : 115 z  :  12 
Registers used: 29 out of 35 (82.9%)

ATmega8L instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  13 add   :  12 
adiw  :  15 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   6 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :   5 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  36 brpl  :   0 brsh  :  31 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :  21 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  11 
cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   0 cp    :  25 
cpc   :   9 cpi   :  28 cpse  :   0 dec   :   8 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   3 
inc   :   4 ld    :  27 ldd   :  37 ldi   : 173 lds   :  12 lpm   :   7 
lsl   :  12 lsr   :   2 mov   :  26 movw  :  30 mul   :   3 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   1 ori   :   5 out   :  41 
pop   :   5 push  :   5 rcall : 180 ret   :  55 reti  :   1 rjmp  :  86 
rol   :  20 ror   :   2 sbc   :   5 sbci  :   2 sbi   :  16 sbic  :   1 
sbis  :   1 sbiw  :  10 sbr   :   2 sbrc  :   3 sbrs  :   4 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   5 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  52 std   :  20 
sts   :  18 sub   :   2 subi  :  24 swap  :   0 tst   :   1 wdr   :   1 

Instructions used: 59 out of 114 (51.8%)

ATmega8L memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00095e   2330     68   2398    8192  29.3%
[.dseg] 0x000060 0x0001a7      0     71     71    1024   6.9%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 6 warnings
