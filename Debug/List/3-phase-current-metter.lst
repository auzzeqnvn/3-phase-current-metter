
AVRASM ver. 2.1.30  D:\My Data\TanPhat\3 phase current metter\Debug\List\3-phase-current-metter.asm Tue Nov 13 00:09:28 2018

D:\My Data\TanPhat\3 phase current metter\Debug\List\3-phase-current-metter.asm(1086): warning: Register r6 already defined by the .DEF directive
D:\My Data\TanPhat\3 phase current metter\Debug\List\3-phase-current-metter.asm(1087): warning: Register r5 already defined by the .DEF directive
D:\My Data\TanPhat\3 phase current metter\Debug\List\3-phase-current-metter.asm(1088): warning: Register r7 already defined by the .DEF directive
D:\My Data\TanPhat\3 phase current metter\Debug\List\3-phase-current-metter.asm(1089): warning: Register r8 already defined by the .DEF directive
D:\My Data\TanPhat\3 phase current metter\Debug\List\3-phase-current-metter.asm(1090): warning: Register r9 already defined by the .DEF directive
D:\My Data\TanPhat\3 phase current metter\Debug\List\3-phase-current-metter.asm(1091): warning: Register r10 already defined by the .DEF directive
D:\My Data\TanPhat\3 phase current metter\Debug\List\3-phase-current-metter.asm(1092): warning: Register r11 already defined by the .DEF directive
D:\My Data\TanPhat\3 phase current metter\Debug\List\3-phase-current-metter.asm(1093): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8L
                 ;Program type           : Application
                 ;Clock frequency        : 11.059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8L
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _cnt=R6
                 	.DEF _data=R5
                 	.DEF _data1=R7
                 	.DEF _data1_msb=R8
                 	.DEF _data2=R9
                 	.DEF _data2_msb=R10
                 	.DEF _data3=R11
                 	.DEF _data3_msb=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c01a      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 c03e      	RJMP _timer1_ovf_isr
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000013 0100
000014 0000      	.DB  0x0,0x1,0x0,0x0
000015 0000
000016 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 
                 __GLOBAL_INI_TBL:
000017 0008      	.DW  0x08
000018 0005      	.DW  0x05
000019 0026      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
00001a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00001b 94f8      	CLI
00001c 27ee      	CLR  R30
00001d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00001e e0f1      	LDI  R31,1
00001f bffb      	OUT  GICR,R31
000020 bfeb      	OUT  GICR,R30
000021 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000022 e08d      	LDI  R24,(14-2)+1
000023 e0a2      	LDI  R26,2
000024 27bb      	CLR  R27
                 __CLEAR_REG:
000025 93ed      	ST   X+,R30
000026 958a      	DEC  R24
000027 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000028 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000029 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00002a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00002b 93ed      	ST   X+,R30
00002c 9701      	SBIW R24,1
00002d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00002e e2ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00002f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000030 9185      	LPM  R24,Z+
000031 9195      	LPM  R25,Z+
000032 9700      	SBIW R24,0
000033 f061      	BREQ __GLOBAL_INI_END
000034 91a5      	LPM  R26,Z+
000035 91b5      	LPM  R27,Z+
000036 9005      	LPM  R0,Z+
000037 9015      	LPM  R1,Z+
000038 01bf      	MOVW R22,R30
000039 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00003a 9005      	LPM  R0,Z+
00003b 920d      	ST   X+,R0
00003c 9701      	SBIW R24,1
00003d f7e1      	BRNE __GLOBAL_INI_LOOP
00003e 01fb      	MOVW R30,R22
00003f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000040 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000041 bfed      	OUT  SPL,R30
000042 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000043 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000044 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000045 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000046 c1ba      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : 3 Phase current metter
                 ;Version : 1.0
                 ;Date    : 11/10/2018
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;Do va hien thi cuong do dong dien
                 ;Su dung IC ADE7753
                 ;
                 ;
                 ;Chip type               : ATmega8L
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 11.059200 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;// Declare your global variables here
                 ;#define DO_595_LATCH  PORTB.1
                 ;#define DO_595_MOSI    PORTB.3
                 ;#define DO_595_SCK    PORTB.5
                 ;
                 ;#define CTRL_595_ON     DO_595_LATCH = 1
                 ;#define CTRL_595_OFF    DO_595_LATCH = 0
                 ;
                 ;#define BUZZER  PORTC.2
                 ;
                 ;#define BUZZER_ON   BUZZER = 1
                 ;#define BUZZER_OFF  BUZZER = 0
                 ;
                 ;#define CS_PHASE1_MCU   PORTC.4
                 ;#define CS_PHASE2_MCU   PORTC.5
                 ;#define CS_PHASE3_MCU   PORTC.3
                 ;
                 ;#define PHASE_1_ON  CS_PHASE1_MCU = 1
                 ;#define PHASE_1_OFF CS_PHASE1_MCU = 0
                 ;#define PHASE_2_ON  CS_PHASE2_MCU = 1
                 ;#define PHASE_2_OFF CS_PHASE2_MCU = 0
                 ;#define PHASE_3_ON  CS_PHASE3_MCU = 1
                 ;#define PHASE_3_OFF CS_PHASE3_MCU = 0
                 ;
                 ;#define DOUT_MOSI_SPI_7753_MCU   PORTD.1
                 ;#define DIN_MISO_SPI_7753_MCU    PIND.0
                 ;#define DOUT_CLK_SPI_7753_MCU   PORTD.4
                 ;
                 ;//Dia chi cac thanh ghi SPI_ADE7753
                 ;#define WAVEFORM        0x01,3
                 ;#define AENERGY         0x02,3
                 ;#define RAENERGY        0x03,3
                 ;#define LAENERGY		0x04,3
                 ;#define VAENERGY		0x05,3
                 ;#define RVAENERGY		0x06,3
                 ;#define LVAENERGY		0x07,3
                 ;#define LVARENERGY		0x08,3
                 ;#define MODE			0x09,2
                 ;#define IRQEN			0x0A,2
                 ;#define STATUS			0x0B,2
                 ;#define RSTSTATUS		0x0C,2
                 ;#define CH1OS			0x0D,1
                 ;#define CH2OS			0x0E,1
                 ;#define GAIN			0x0F,1
                 ;#define PHCAL			0x10,1
                 ;#define APOS			0x11,2
                 ;#define WGAIN			0x12,2
                 ;#define WDIV			0x13,1
                 ;#define CFNUM			0x14,2
                 ;#define CFDEN			0x15,2
                 ;#define IRMS			0x16,3
                 ;#define VRMS			0x17,3
                 ;#define IRMSOS			0x18,2
                 ;#define VRMSOS			0x19,2
                 ;#define VAGAIN			0x1A,2
                 ;#define VADIV			0x1B,1
                 ;#define LINECYC			0x1C,2
                 ;#define ZXTOUT			0x1D,2
                 ;#define SAGCYC			0x1E,1
                 ;#define SAGLVL			0x1F,1
                 ;#define IPKLVL			0x20,1
                 ;#define VPKLVL			0x21,1
                 ;#define IPEAK			0x22,3
                 ;#define RSTIPEAK		0x23,3
                 ;#define VPEAK			0x24,3
                 ;#define RSTVPEAK		0x25,3
                 ;#define TEMP			0x26,1
                 ;#define PERIOD			0x27,2
                 ;#define TMODE			0x3D,1
                 ;#define CHKSUM			0x3E,1
                 ;#define DIEREV			0x3F,1
                 ;
                 ;void    SEND_DATA_LED(unsigned char  data_first,unsigned char  data_second,unsigned char  data_third);
                 ;void    SCAN_LED(unsigned char num_led,unsigned char    data);
                 ;
                 ;unsigned char   cnt=1;
                 ;unsigned char   data = 0;
                 ;unsigned int   data1 = 0;
                 ;unsigned int   data2 = 0;
                 ;unsigned int   data3 = 0;
                 ;
                 ;unsigned long int   CURRENT = 0;
                 ;
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0073 {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
000047 920a      	ST   -Y,R0
000048 921a      	ST   -Y,R1
000049 92fa      	ST   -Y,R15
00004a 936a      	ST   -Y,R22
00004b 937a      	ST   -Y,R23
00004c 938a      	ST   -Y,R24
00004d 939a      	ST   -Y,R25
00004e 93aa      	ST   -Y,R26
00004f 93ba      	ST   -Y,R27
000050 93ea      	ST   -Y,R30
000051 93fa      	ST   -Y,R31
000052 b7ef      	IN   R30,SREG
000053 93ea      	ST   -Y,R30
                 ; 0000 0074 // Reinitialize Timer1 value
                 ; 0000 0075     TCNT1H=0xAA00 >> 8;
000054 eaea      	LDI  R30,LOW(170)
000055 bded      	OUT  0x2D,R30
                 ; 0000 0076     TCNT1L=0xAA00 & 0xff;
000056 e0e0      	LDI  R30,LOW(0)
000057 bdec      	OUT  0x2C,R30
                 ; 0000 0077 // Place your code here
                 ; 0000 0078     if(cnt > 12) cnt=1;
000058 e0ec      	LDI  R30,LOW(12)
000059 15e6      	CP   R30,R6
00005a f410      	BRSH _0x3
00005b e0e1      	LDI  R30,LOW(1)
00005c 2e6e      	MOV  R6,R30
                 ; 0000 0079     if(cnt == 1)    data = data1/1000;
                 _0x3:
00005d e0e1      	LDI  R30,LOW(1)
00005e 15e6      	CP   R30,R6
00005f f419      	BRNE _0x4
000060 d1fc      	RCALL SUBOPT_0x0
000061 d1fe      	RCALL SUBOPT_0x1
000062 c041      	RJMP _0xC5
                 ; 0000 007A     else if(cnt == 2)    data = data1/100%10;
                 _0x4:
000063 e0e2      	LDI  R30,LOW(2)
000064 15e6      	CP   R30,R6
000065 f419      	BRNE _0x6
000066 d1f6      	RCALL SUBOPT_0x0
000067 d1fc      	RCALL SUBOPT_0x2
000068 c038      	RJMP _0xC6
                 ; 0000 007B     else if(cnt == 3)    data = data1/10%10;
                 _0x6:
000069 e0e3      	LDI  R30,LOW(3)
00006a 15e6      	CP   R30,R6
00006b f419      	BRNE _0x8
00006c d1f0      	RCALL SUBOPT_0x0
00006d d1fb      	RCALL SUBOPT_0x3
00006e c032      	RJMP _0xC6
                 ; 0000 007C     else if(cnt == 4)    data = data1%10;
                 _0x8:
00006f e0e4      	LDI  R30,LOW(4)
000070 15e6      	CP   R30,R6
000071 f411      	BRNE _0xA
000072 d1ea      	RCALL SUBOPT_0x0
000073 c02d      	RJMP _0xC6
                 ; 0000 007D     else if(cnt == 5)    data = data2/1000;
                 _0xA:
000074 e0e5      	LDI  R30,LOW(5)
000075 15e6      	CP   R30,R6
000076 f419      	BRNE _0xC
000077 d1f6      	RCALL SUBOPT_0x4
000078 d1e7      	RCALL SUBOPT_0x1
000079 c02a      	RJMP _0xC5
                 ; 0000 007E     else if(cnt == 6)    data = data2/100%10;
                 _0xC:
00007a e0e6      	LDI  R30,LOW(6)
00007b 15e6      	CP   R30,R6
00007c f419      	BRNE _0xE
00007d d1f0      	RCALL SUBOPT_0x4
00007e d1e5      	RCALL SUBOPT_0x2
00007f c021      	RJMP _0xC6
                 ; 0000 007F     else if(cnt == 7)    data = data2/10%10;
                 _0xE:
000080 e0e7      	LDI  R30,LOW(7)
000081 15e6      	CP   R30,R6
000082 f419      	BRNE _0x10
000083 d1ea      	RCALL SUBOPT_0x4
000084 d1e4      	RCALL SUBOPT_0x3
000085 c01b      	RJMP _0xC6
                 ; 0000 0080     else if(cnt == 8)    data = data2%10;
                 _0x10:
000086 e0e8      	LDI  R30,LOW(8)
000087 15e6      	CP   R30,R6
000088 f411      	BRNE _0x12
000089 d1e4      	RCALL SUBOPT_0x4
00008a c016      	RJMP _0xC6
                 ; 0000 0081     else if(cnt == 9)    data = data3/1000;
                 _0x12:
00008b e0e9      	LDI  R30,LOW(9)
00008c 15e6      	CP   R30,R6
00008d f419      	BRNE _0x14
00008e d1e2      	RCALL SUBOPT_0x5
00008f d1d0      	RCALL SUBOPT_0x1
000090 c013      	RJMP _0xC5
                 ; 0000 0082     else if(cnt == 10)    data = data3/100%10;
                 _0x14:
000091 e0ea      	LDI  R30,LOW(10)
000092 15e6      	CP   R30,R6
000093 f419      	BRNE _0x16
000094 d1dc      	RCALL SUBOPT_0x5
000095 d1ce      	RCALL SUBOPT_0x2
000096 c00a      	RJMP _0xC6
                 ; 0000 0083     else if(cnt == 11)    data = data3/10%10;
                 _0x16:
000097 e0eb      	LDI  R30,LOW(11)
000098 15e6      	CP   R30,R6
000099 f419      	BRNE _0x18
00009a d1d6      	RCALL SUBOPT_0x5
00009b d1cd      	RCALL SUBOPT_0x3
00009c c004      	RJMP _0xC6
                 ; 0000 0084     else if(cnt == 12)    data = data3%10;
                 _0x18:
00009d e0ec      	LDI  R30,LOW(12)
00009e 15e6      	CP   R30,R6
00009f f429      	BRNE _0x1A
0000a0 d1d0      	RCALL SUBOPT_0x5
                 _0xC6:
0000a1 e0ea      	LDI  R30,LOW(10)
0000a2 e0f0      	LDI  R31,HIGH(10)
0000a3 d268      	RCALL __MODW21U
                 _0xC5:
0000a4 2e5e      	MOV  R5,R30
                 ; 0000 0085     SCAN_LED(cnt++,data);
                 _0x1A:
0000a5 2de6      	MOV  R30,R6
0000a6 9463      	INC  R6
0000a7 93ea      	ST   -Y,R30
0000a8 2da5      	MOV  R26,R5
0000a9 d04c      	RCALL _SCAN_LED
                 ; 0000 0086     data3++;
0000aa e0e1      	LDI  R30,LOW(1)
0000ab e0f0      	LDI  R31,HIGH(1)
                +
0000ac 0ebe     +ADD R11 , R30
0000ad 1ecf     +ADC R12 , R31
                 	__ADDWRR 11,12,30,31
                 ; 0000 0087 }
0000ae 91e9      	LD   R30,Y+
0000af bfef      	OUT  SREG,R30
0000b0 91f9      	LD   R31,Y+
0000b1 91e9      	LD   R30,Y+
0000b2 91b9      	LD   R27,Y+
0000b3 91a9      	LD   R26,Y+
0000b4 9199      	LD   R25,Y+
0000b5 9189      	LD   R24,Y+
0000b6 9179      	LD   R23,Y+
0000b7 9169      	LD   R22,Y+
0000b8 90f9      	LD   R15,Y+
0000b9 9019      	LD   R1,Y+
0000ba 9009      	LD   R0,Y+
0000bb 9518      	RETI
                 ; .FEND
                 ;
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 008E {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 008F     ADMUX=adc_input | ADC_VREF_TYPE;
0000bc 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
0000bd 81e8      	LD   R30,Y
0000be 64e0      	ORI  R30,0x40
0000bf b9e7      	OUT  0x7,R30
                 ; 0000 0090     // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0091     delay_us(10);
                +
0000c0 e285     +LDI R24 , LOW ( 37 )
                +__DELAY_USB_LOOP :
0000c1 958a     +DEC R24
0000c2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 37
                 ; 0000 0092     // Start the AD conversion
                 ; 0000 0093     ADCSRA|=(1<<ADSC);
0000c3 9a36      	SBI  0x6,6
                 ; 0000 0094     // Wait for the AD conversion to complete
                 ; 0000 0095     while ((ADCSRA & (1<<ADIF))==0);
                 _0x1B:
0000c4 9b34      	SBIS 0x6,4
0000c5 cffe      	RJMP _0x1B
                 ; 0000 0096     ADCSRA|=(1<<ADIF);
0000c6 9a34      	SBI  0x6,4
                 ; 0000 0097     return ADCW;
0000c7 b1e4      	IN   R30,0x4
0000c8 b1f5      	IN   R31,0x4+1
0000c9 9621      	ADIW R28,1
0000ca 9508      	RET
                 ; 0000 0098 }
                 ; .FEND
                 ;
                 ;void    SEND_DATA_LED(unsigned char  data_first,unsigned char  data_second,unsigned char  data_third)
                 ; 0000 009B {
                 _SEND_DATA_LED:
                 ; .FSTART _SEND_DATA_LED
                 ; 0000 009C     unsigned char   i;
                 ; 0000 009D     unsigned char   data;
                 ; 0000 009E     data = data_first;
0000cb 93aa      	ST   -Y,R26
0000cc d244      	RCALL __SAVELOCR2
                 ;	data_first -> Y+4
                 ;	data_second -> Y+3
                 ;	data_third -> Y+2
                 ;	i -> R17
                 ;	data -> R16
0000cd 810c      	LDD  R16,Y+4
                 ; 0000 009F     for(i=0;i<8;i++)
0000ce e010      	LDI  R17,LOW(0)
                 _0x1F:
0000cf 3018      	CPI  R17,8
0000d0 f440      	BRSH _0x20
                 ; 0000 00A0     {
                 ; 0000 00A1         if((data & 0x80) == 0x80)    DO_595_MOSI = 1;
0000d1 d1a2      	RCALL SUBOPT_0x6
0000d2 f411      	BRNE _0x21
0000d3 9ac3      	SBI  0x18,3
                 ; 0000 00A2         else    DO_595_MOSI = 0;
0000d4 c001      	RJMP _0x24
                 _0x21:
0000d5 98c3      	CBI  0x18,3
                 ; 0000 00A3         data <<= 1;
                 _0x24:
0000d6 d1a1      	RCALL SUBOPT_0x7
                 ; 0000 00A4         DO_595_SCK = 0;
                 ; 0000 00A5         DO_595_SCK = 1;
                 ; 0000 00A6     }
0000d7 5f1f      	SUBI R17,-1
0000d8 cff6      	RJMP _0x1F
                 _0x20:
                 ; 0000 00A7     data = data_second;
0000d9 810b      	LDD  R16,Y+3
                 ; 0000 00A8     for(i=0;i<8;i++)
0000da e010      	LDI  R17,LOW(0)
                 _0x2C:
0000db 3018      	CPI  R17,8
0000dc f440      	BRSH _0x2D
                 ; 0000 00A9     {
                 ; 0000 00AA         if((data & 0x80) == 0x80)    DO_595_MOSI = 1;
0000dd d196      	RCALL SUBOPT_0x6
0000de f411      	BRNE _0x2E
0000df 9ac3      	SBI  0x18,3
                 ; 0000 00AB         else    DO_595_MOSI = 0;
0000e0 c001      	RJMP _0x31
                 _0x2E:
0000e1 98c3      	CBI  0x18,3
                 ; 0000 00AC         data <<= 1;
                 _0x31:
0000e2 d195      	RCALL SUBOPT_0x7
                 ; 0000 00AD         DO_595_SCK = 0;
                 ; 0000 00AE         DO_595_SCK = 1;
                 ; 0000 00AF     }
0000e3 5f1f      	SUBI R17,-1
0000e4 cff6      	RJMP _0x2C
                 _0x2D:
                 ; 0000 00B0     data = data_third;
0000e5 810a      	LDD  R16,Y+2
                 ; 0000 00B1     for(i=0;i<8;i++)
0000e6 e010      	LDI  R17,LOW(0)
                 _0x39:
0000e7 3018      	CPI  R17,8
0000e8 f440      	BRSH _0x3A
                 ; 0000 00B2     {
                 ; 0000 00B3         if((data & 0x80) == 0x80)    DO_595_MOSI = 1;
0000e9 d18a      	RCALL SUBOPT_0x6
0000ea f411      	BRNE _0x3B
0000eb 9ac3      	SBI  0x18,3
                 ; 0000 00B4         else    DO_595_MOSI = 0;
0000ec c001      	RJMP _0x3E
                 _0x3B:
0000ed 98c3      	CBI  0x18,3
                 ; 0000 00B5         data <<= 1;
                 _0x3E:
0000ee d189      	RCALL SUBOPT_0x7
                 ; 0000 00B6         DO_595_SCK = 0;
                 ; 0000 00B7         DO_595_SCK = 1;
                 ; 0000 00B8     }
0000ef 5f1f      	SUBI R17,-1
0000f0 cff6      	RJMP _0x39
                 _0x3A:
                 ; 0000 00B9     CTRL_595_ON;
0000f1 9ac1      	SBI  0x18,1
                 ; 0000 00BA     CTRL_595_OFF;
0000f2 98c1      	CBI  0x18,1
                 ; 0000 00BB }
0000f3 d222      	RCALL __LOADLOCR2
0000f4 9625      	ADIW R28,5
0000f5 9508      	RET
                 ; .FEND
                 ;
                 ;void    SCAN_LED(unsigned char num_led,unsigned char    data)
                 ; 0000 00BE {
                 _SCAN_LED:
                 ; .FSTART _SCAN_LED
                 ; 0000 00BF     unsigned char   byte1,byte2,byte3;
                 ; 0000 00C0     byte1 = 0;
0000f6 93aa      	ST   -Y,R26
0000f7 d217      	RCALL __SAVELOCR4
                 ;	num_led -> Y+5
                 ;	data -> Y+4
                 ;	byte1 -> R17
                 ;	byte2 -> R16
                 ;	byte3 -> R19
0000f8 e010      	LDI  R17,LOW(0)
                 ; 0000 00C1     byte2 = 0;
0000f9 e000      	LDI  R16,LOW(0)
                 ; 0000 00C2     byte3 = 0;
0000fa e030      	LDI  R19,LOW(0)
                 ; 0000 00C3     switch(num_led)
0000fb 81ed      	LDD  R30,Y+5
0000fc d17f      	RCALL SUBOPT_0x8
                 ; 0000 00C4     {
                 ; 0000 00C5         case    1:
0000fd f419      	BRNE _0x4C
                 ; 0000 00C6         {
                 ; 0000 00C7             byte3 = 0x01;
0000fe e031      	LDI  R19,LOW(1)
                 ; 0000 00C8             byte2 = 0x00;
0000ff e000      	LDI  R16,LOW(0)
                 ; 0000 00C9             break;
000100 c04b      	RJMP _0x4B
                 ; 0000 00CA         }
                 ; 0000 00CB         case    2:
                 _0x4C:
000101 d17f      	RCALL SUBOPT_0x9
000102 f421      	BRNE _0x4D
                 ; 0000 00CC         {
                 ; 0000 00CD             byte3 = 0x02;
000103 e032      	LDI  R19,LOW(2)
                 ; 0000 00CE             byte2 = 0x00;
000104 e000      	LDI  R16,LOW(0)
                 ; 0000 00CF             byte1 = 0x04;
000105 e014      	LDI  R17,LOW(4)
                 ; 0000 00D0             break;
000106 c045      	RJMP _0x4B
                 ; 0000 00D1         }
                 ; 0000 00D2         case    3:
                 _0x4D:
000107 d17d      	RCALL SUBOPT_0xA
000108 f419      	BRNE _0x4E
                 ; 0000 00D3         {
                 ; 0000 00D4             byte3 = 0x04;
000109 e034      	LDI  R19,LOW(4)
                 ; 0000 00D5             byte2 = 0x00;
00010a e000      	LDI  R16,LOW(0)
                 ; 0000 00D6             break;
00010b c040      	RJMP _0x4B
                 ; 0000 00D7         }
                 ; 0000 00D8         case    4:
                 _0x4E:
00010c 30e4      	CPI  R30,LOW(0x4)
00010d e0a0      	LDI  R26,HIGH(0x4)
00010e 07fa      	CPC  R31,R26
00010f f419      	BRNE _0x4F
                 ; 0000 00D9         {
                 ; 0000 00DA             byte3 = 0x08;
000110 e038      	LDI  R19,LOW(8)
                 ; 0000 00DB             byte2 = 0x00;
000111 e000      	LDI  R16,LOW(0)
                 ; 0000 00DC             break;
000112 c039      	RJMP _0x4B
                 ; 0000 00DD         }
                 ; 0000 00DE         case    5:
                 _0x4F:
000113 30e5      	CPI  R30,LOW(0x5)
000114 e0a0      	LDI  R26,HIGH(0x5)
000115 07fa      	CPC  R31,R26
000116 f419      	BRNE _0x50
                 ; 0000 00DF         {
                 ; 0000 00E0             byte3 = 0x40;
000117 e430      	LDI  R19,LOW(64)
                 ; 0000 00E1             byte2 = 0x00;
000118 e000      	LDI  R16,LOW(0)
                 ; 0000 00E2             break;
000119 c032      	RJMP _0x4B
                 ; 0000 00E3         }
                 ; 0000 00E4         case    6:
                 _0x50:
00011a 30e6      	CPI  R30,LOW(0x6)
00011b e0a0      	LDI  R26,HIGH(0x6)
00011c 07fa      	CPC  R31,R26
00011d f421      	BRNE _0x51
                 ; 0000 00E5         {
                 ; 0000 00E6             byte3 = 0x20;
00011e e230      	LDI  R19,LOW(32)
                 ; 0000 00E7             byte2 = 0x00;
00011f e000      	LDI  R16,LOW(0)
                 ; 0000 00E8             byte1 = 0x04;
000120 e014      	LDI  R17,LOW(4)
                 ; 0000 00E9             break;
000121 c02a      	RJMP _0x4B
                 ; 0000 00EA         }
                 ; 0000 00EB         case    7:
                 _0x51:
000122 30e7      	CPI  R30,LOW(0x7)
000123 e0a0      	LDI  R26,HIGH(0x7)
000124 07fa      	CPC  R31,R26
000125 f419      	BRNE _0x52
                 ; 0000 00EC         {
                 ; 0000 00ED             byte3 = 0x10;
000126 e130      	LDI  R19,LOW(16)
                 ; 0000 00EE             byte2 = 0x00;
000127 e000      	LDI  R16,LOW(0)
                 ; 0000 00EF             break;
000128 c023      	RJMP _0x4B
                 ; 0000 00F0         }
                 ; 0000 00F1         case    8:
                 _0x52:
000129 30e8      	CPI  R30,LOW(0x8)
00012a e0a0      	LDI  R26,HIGH(0x8)
00012b 07fa      	CPC  R31,R26
00012c f419      	BRNE _0x53
                 ; 0000 00F2         {
                 ; 0000 00F3             byte3 = 0x80;
00012d e830      	LDI  R19,LOW(128)
                 ; 0000 00F4             byte2 = 0x00;
00012e e000      	LDI  R16,LOW(0)
                 ; 0000 00F5             break;
00012f c01c      	RJMP _0x4B
                 ; 0000 00F6         }
                 ; 0000 00F7         case    9:
                 _0x53:
000130 30e9      	CPI  R30,LOW(0x9)
000131 e0a0      	LDI  R26,HIGH(0x9)
000132 07fa      	CPC  R31,R26
000133 f419      	BRNE _0x54
                 ; 0000 00F8         {
                 ; 0000 00F9             byte3 = 0x00;
000134 e030      	LDI  R19,LOW(0)
                 ; 0000 00FA             byte2 = 0x40;
000135 e400      	LDI  R16,LOW(64)
                 ; 0000 00FB             break;
000136 c015      	RJMP _0x4B
                 ; 0000 00FC         }
                 ; 0000 00FD         case    10:
                 _0x54:
000137 30ea      	CPI  R30,LOW(0xA)
000138 e0a0      	LDI  R26,HIGH(0xA)
000139 07fa      	CPC  R31,R26
00013a f421      	BRNE _0x55
                 ; 0000 00FE         {
                 ; 0000 00FF             byte3 = 0x00;
00013b e030      	LDI  R19,LOW(0)
                 ; 0000 0100             byte2 = 0x20;
00013c e200      	LDI  R16,LOW(32)
                 ; 0000 0101             byte1 = 0x04;
00013d e014      	LDI  R17,LOW(4)
                 ; 0000 0102             break;
00013e c00d      	RJMP _0x4B
                 ; 0000 0103         }
                 ; 0000 0104         case    11:
                 _0x55:
00013f 30eb      	CPI  R30,LOW(0xB)
000140 e0a0      	LDI  R26,HIGH(0xB)
000141 07fa      	CPC  R31,R26
000142 f419      	BRNE _0x56
                 ; 0000 0105         {
                 ; 0000 0106             byte3 = 0x00;
000143 e030      	LDI  R19,LOW(0)
                 ; 0000 0107             byte2 = 0x10;
000144 e100      	LDI  R16,LOW(16)
                 ; 0000 0108             break;
000145 c006      	RJMP _0x4B
                 ; 0000 0109         }
                 ; 0000 010A         case    12:
                 _0x56:
000146 30ec      	CPI  R30,LOW(0xC)
000147 e0a0      	LDI  R26,HIGH(0xC)
000148 07fa      	CPC  R31,R26
000149 f411      	BRNE _0x4B
                 ; 0000 010B         {
                 ; 0000 010C             byte3 = 0x00;
00014a e030      	LDI  R19,LOW(0)
                 ; 0000 010D             byte2 = 0x80;
00014b e800      	LDI  R16,LOW(128)
                 ; 0000 010E             break;
                 ; 0000 010F         }
                 ; 0000 0110     }
                 _0x4B:
                 ; 0000 0111     switch(data)
00014c 81ec      	LDD  R30,Y+4
00014d e0f0      	LDI  R31,0
                 ; 0000 0112     {
                 ; 0000 0113         case    0:
00014e 9730      	SBIW R30,0
00014f f411      	BRNE _0x5B
                 ; 0000 0114         {
                 ; 0000 0115             byte1 |= 0xF9;
000150 6f19      	ORI  R17,LOW(249)
                 ; 0000 0116             break;
000151 c031      	RJMP _0x5A
                 ; 0000 0117         }
                 ; 0000 0118         case    1:
                 _0x5B:
000152 30e1      	CPI  R30,LOW(0x1)
000153 e0a0      	LDI  R26,HIGH(0x1)
000154 07fa      	CPC  R31,R26
000155 f411      	BRNE _0x5C
                 ; 0000 0119         {
                 ; 0000 011A             byte1 |= 0x81;
000156 6811      	ORI  R17,LOW(129)
                 ; 0000 011B             break;
000157 c02b      	RJMP _0x5A
                 ; 0000 011C         }
                 ; 0000 011D         case    2:
                 _0x5C:
000158 d128      	RCALL SUBOPT_0x9
000159 f411      	BRNE _0x5D
                 ; 0000 011E         {
                 ; 0000 011F             byte1 |= 0xBA;
00015a 6b1a      	ORI  R17,LOW(186)
                 ; 0000 0120             break;
00015b c027      	RJMP _0x5A
                 ; 0000 0121         }
                 ; 0000 0122         case    3:
                 _0x5D:
00015c d128      	RCALL SUBOPT_0xA
00015d f411      	BRNE _0x5E
                 ; 0000 0123         {
                 ; 0000 0124             byte1 |= 0xAB;
00015e 6a1b      	ORI  R17,LOW(171)
                 ; 0000 0125             break;
00015f c023      	RJMP _0x5A
                 ; 0000 0126         }
                 ; 0000 0127         case    4:
                 _0x5E:
000160 30e4      	CPI  R30,LOW(0x4)
000161 e0a0      	LDI  R26,HIGH(0x4)
000162 07fa      	CPC  R31,R26
000163 f411      	BRNE _0x5F
                 ; 0000 0128         {
                 ; 0000 0129             byte1 |= 0xC3;
000164 6c13      	ORI  R17,LOW(195)
                 ; 0000 012A             break;
000165 c01d      	RJMP _0x5A
                 ; 0000 012B         }
                 ; 0000 012C         case    5:
                 _0x5F:
000166 30e5      	CPI  R30,LOW(0x5)
000167 e0a0      	LDI  R26,HIGH(0x5)
000168 07fa      	CPC  R31,R26
000169 f411      	BRNE _0x60
                 ; 0000 012D         {
                 ; 0000 012E             byte1 |= 0x6B;
00016a 661b      	ORI  R17,LOW(107)
                 ; 0000 012F             break;
00016b c017      	RJMP _0x5A
                 ; 0000 0130         }
                 ; 0000 0131         case    6:
                 _0x60:
00016c 30e6      	CPI  R30,LOW(0x6)
00016d e0a0      	LDI  R26,HIGH(0x6)
00016e 07fa      	CPC  R31,R26
00016f f411      	BRNE _0x61
                 ; 0000 0132         {
                 ; 0000 0133             byte1 |= 0x7B;
000170 671b      	ORI  R17,LOW(123)
                 ; 0000 0134             break;
000171 c011      	RJMP _0x5A
                 ; 0000 0135         }
                 ; 0000 0136         case    7:
                 _0x61:
000172 30e7      	CPI  R30,LOW(0x7)
000173 e0a0      	LDI  R26,HIGH(0x7)
000174 07fa      	CPC  R31,R26
000175 f411      	BRNE _0x62
                 ; 0000 0137         {
                 ; 0000 0138             byte1 = 0xA1;
000176 ea11      	LDI  R17,LOW(161)
                 ; 0000 0139             break;
000177 c00b      	RJMP _0x5A
                 ; 0000 013A         }
                 ; 0000 013B         case    8:
                 _0x62:
000178 30e8      	CPI  R30,LOW(0x8)
000179 e0a0      	LDI  R26,HIGH(0x8)
00017a 07fa      	CPC  R31,R26
00017b f411      	BRNE _0x63
                 ; 0000 013C         {
                 ; 0000 013D             byte1 |= 0xFB;
00017c 6f1b      	ORI  R17,LOW(251)
                 ; 0000 013E             break;
00017d c005      	RJMP _0x5A
                 ; 0000 013F         }
                 ; 0000 0140         case    9:
                 _0x63:
00017e 30e9      	CPI  R30,LOW(0x9)
00017f e0a0      	LDI  R26,HIGH(0x9)
000180 07fa      	CPC  R31,R26
000181 f409      	BRNE _0x5A
                 ; 0000 0141         {
                 ; 0000 0142             byte1 |= 0xEB;
000182 6e1b      	ORI  R17,LOW(235)
                 ; 0000 0143             break;
                 ; 0000 0144         }
                 ; 0000 0145     }
                 _0x5A:
                 ; 0000 0146     SEND_DATA_LED(byte1,byte2,byte3);
000183 931a      	ST   -Y,R17
000184 930a      	ST   -Y,R16
000185 2fa3      	MOV  R26,R19
000186 df44      	RCALL _SEND_DATA_LED
                 ; 0000 0147 }
000187 d18c      	RCALL __LOADLOCR4
000188 9626      	ADIW R28,6
000189 9508      	RET
                 ; .FEND
                 ;
                 ;void    SPI_7753_SEND(unsigned char data)
                 ; 0000 014A {
                 _SPI_7753_SEND:
                 ; .FSTART _SPI_7753_SEND
                 ; 0000 014B     unsigned char cnt;
                 ; 0000 014C     unsigned char   tmp = data;
                 ; 0000 014D     for(cnt = 0;cnt < 8; cnt++)
00018a 93aa      	ST   -Y,R26
00018b d185      	RCALL __SAVELOCR2
                 ;	data -> Y+2
                 ;	cnt -> R17
                 ;	tmp -> R16
00018c 810a      	LDD  R16,Y+2
00018d e010      	LDI  R17,LOW(0)
                 _0x66:
00018e 3018      	CPI  R17,8
00018f f448      	BRSH _0x67
                 ; 0000 014E     {
                 ; 0000 014F         if((tmp & 0x80) == 0x80)   DOUT_MOSI_SPI_7753_MCU = 1;
000190 d0e3      	RCALL SUBOPT_0x6
000191 f409      	BRNE _0x68
000192 9a91      	SBI  0x12,1
                 ; 0000 0150         DOUT_MOSI_SPI_7753_MCU = 0;
                 _0x68:
000193 9891      	CBI  0x12,1
                 ; 0000 0151         tmp <<= 1;
000194 0f00      	LSL  R16
                 ; 0000 0152         // DOUT_CLK_SPI_7753_MCU = 0;
                 ; 0000 0153         DOUT_CLK_SPI_7753_MCU = 1;
000195 9a94      	SBI  0x12,4
                 ; 0000 0154         DOUT_CLK_SPI_7753_MCU = 0;
000196 9894      	CBI  0x12,4
                 ; 0000 0155     }
000197 5f1f      	SUBI R17,-1
000198 cff5      	RJMP _0x66
                 _0x67:
                 ; 0000 0156 }
000199 d17c      	RCALL __LOADLOCR2
00019a 9623      	ADIW R28,3
00019b 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char    SPI_7753_RECEIVE(void)
                 ; 0000 0159 {
                 _SPI_7753_RECEIVE:
                 ; .FSTART _SPI_7753_RECEIVE
                 ; 0000 015A     unsigned char cnt;
                 ; 0000 015B     unsigned char data;
                 ; 0000 015C     data = 0;
00019c d174      	RCALL __SAVELOCR2
                 ;	cnt -> R17
                 ;	data -> R16
00019d e000      	LDI  R16,LOW(0)
                 ; 0000 015D     for(cnt = 0;cnt < 8; cnt++)
00019e e010      	LDI  R17,LOW(0)
                 _0x72:
00019f 3018      	CPI  R17,8
0001a0 f438      	BRSH _0x73
                 ; 0000 015E     {
                 ; 0000 015F         // DOUT_CLK_SPI_7753_MCU = 0;
                 ; 0000 0160         DOUT_CLK_SPI_7753_MCU = 1;
0001a1 9a94      	SBI  0x12,4
                 ; 0000 0161         if(DIN_MISO_SPI_7753_MCU == 1)   data += 1;
0001a2 9980      	SBIC 0x10,0
0001a3 5f0f      	SUBI R16,-LOW(1)
                 ; 0000 0162         data <<= 1;
0001a4 0f00      	LSL  R16
                 ; 0000 0163         DOUT_CLK_SPI_7753_MCU = 0;
0001a5 9894      	CBI  0x12,4
                 ; 0000 0164         // DOUT_CLK_SPI_7753_MCU = 0;
                 ; 0000 0165         // DOUT_CLK_SPI_7753_MCU = 1;
                 ; 0000 0166     }
0001a6 5f1f      	SUBI R17,-1
0001a7 cff7      	RJMP _0x72
                 _0x73:
                 ; 0000 0167     return data;
0001a8 2fe0      	MOV  R30,R16
0001a9 9109      	LD   R16,Y+
0001aa 9119      	LD   R17,Y+
0001ab 9508      	RET
                 ; 0000 0168 }
                 ; .FEND
                 ;
                 ;void    ADE7753_WRITE(unsigned char IC_CS,unsigned char addr,unsigned char num_data,unsigned char data_1,unsigned char d ...
                 ; 0000 016B {
                 ; 0000 016C     unsigned char data[4];
                 ; 0000 016D     unsigned char   i;
                 ; 0000 016E     data[0] = data_1;
                 ;	IC_CS -> Y+10
                 ;	addr -> Y+9
                 ;	num_data -> Y+8
                 ;	data_1 -> Y+7
                 ;	data_2 -> Y+6
                 ;	data_3 -> Y+5
                 ;	data -> Y+1
                 ;	i -> R17
                 ; 0000 016F     data[1] = data_2;
                 ; 0000 0170     data[2] = data_3;
                 ; 0000 0171 
                 ; 0000 0172     switch (IC_CS)
                 ; 0000 0173     {
                 ; 0000 0174         case 1:
                 ; 0000 0175         {
                 ; 0000 0176             PHASE_1_ON;
                 ; 0000 0177             PHASE_2_OFF;
                 ; 0000 0178             PHASE_3_OFF;
                 ; 0000 0179             break;
                 ; 0000 017A         }
                 ; 0000 017B         case 2:
                 ; 0000 017C         {
                 ; 0000 017D             PHASE_1_OFF;
                 ; 0000 017E             PHASE_2_ON;
                 ; 0000 017F             PHASE_3_OFF;
                 ; 0000 0180             break;
                 ; 0000 0181         }
                 ; 0000 0182         case 3:
                 ; 0000 0183         {
                 ; 0000 0184             PHASE_1_OFF;
                 ; 0000 0185             PHASE_2_OFF;
                 ; 0000 0186             PHASE_3_ON;
                 ; 0000 0187             break;
                 ; 0000 0188         }
                 ; 0000 0189     }
                 ; 0000 018A     //addr |= 0x80;
                 ; 0000 018B     SPI_7753_SEND(addr);
                 ; 0000 018C     delay_us(20);
                 ; 0000 018D     for(i=0;i<num_data;i++)    SPI_7753_SEND(data[i]);
                 ; 0000 018E PORTC.4 = 0;
                 ; 0000 018F     PHASE_2_OFF;
                 ; 0000 0190     PHASE_3_OFF;
                 ; 0000 0191 }
                 ;unsigned long int    ADE7753_READ(unsigned char IC_CS,unsigned char addr,unsigned char num_data)
                 ; 0000 0193 {
                 _ADE7753_READ:
                 ; .FSTART _ADE7753_READ
                 ; 0000 0194     unsigned char   i;
                 ; 0000 0195     unsigned char   data[4];
                 ; 0000 0196     unsigned long int res;
                 ; 0000 0197     for(i=0;i<4;i++)    data[i] = 0;
0001ac 93aa      	ST   -Y,R26
0001ad 9728      	SBIW R28,8
0001ae 931a      	ST   -Y,R17
                 ;	IC_CS -> Y+11
                 ;	addr -> Y+10
                 ;	num_data -> Y+9
                 ;	i -> R17
                 ;	data -> Y+5
                 ;	res -> Y+1
0001af e010      	LDI  R17,LOW(0)
                 _0x9B:
0001b0 3014      	CPI  R17,4
0001b1 f438      	BRSH _0x9C
0001b2 d0d6      	RCALL SUBOPT_0xB
0001b3 0fae      	ADD  R26,R30
0001b4 1fbf      	ADC  R27,R31
0001b5 e0e0      	LDI  R30,LOW(0)
0001b6 93ec      	ST   X,R30
0001b7 5f1f      	SUBI R17,-1
0001b8 cff7      	RJMP _0x9B
                 _0x9C:
                 ; 0000 0198 switch (IC_CS)
0001b9 85eb      	LDD  R30,Y+11
0001ba d0c1      	RCALL SUBOPT_0x8
                 ; 0000 0199     {
                 ; 0000 019A         case 1:
0001bb f421      	BRNE _0xA0
                 ; 0000 019B         {
                 ; 0000 019C             PHASE_1_ON;
0001bc 9aac      	SBI  0x15,4
                 ; 0000 019D             PHASE_2_OFF;
0001bd 98ad      	CBI  0x15,5
                 ; 0000 019E             PHASE_3_OFF;
0001be 98ab      	CBI  0x15,3
                 ; 0000 019F             break;
0001bf c00b      	RJMP _0x9F
                 ; 0000 01A0         }
                 ; 0000 01A1         case 2:
                 _0xA0:
0001c0 d0c0      	RCALL SUBOPT_0x9
0001c1 f421      	BRNE _0xA7
                 ; 0000 01A2         {
                 ; 0000 01A3             PHASE_1_OFF;
0001c2 98ac      	CBI  0x15,4
                 ; 0000 01A4             PHASE_2_ON;
0001c3 9aad      	SBI  0x15,5
                 ; 0000 01A5             PHASE_3_OFF;
0001c4 98ab      	CBI  0x15,3
                 ; 0000 01A6             break;
0001c5 c005      	RJMP _0x9F
                 ; 0000 01A7         }
                 ; 0000 01A8         case 3:
                 _0xA7:
0001c6 d0be      	RCALL SUBOPT_0xA
0001c7 f419      	BRNE _0x9F
                 ; 0000 01A9         {
                 ; 0000 01AA             PHASE_1_OFF;
0001c8 98ac      	CBI  0x15,4
                 ; 0000 01AB             PHASE_2_OFF;
0001c9 98ad      	CBI  0x15,5
                 ; 0000 01AC             PHASE_3_ON;
0001ca 9aab      	SBI  0x15,3
                 ; 0000 01AD             break;
                 ; 0000 01AE         }
                 ; 0000 01AF     }
                 _0x9F:
                 ; 0000 01B0     addr &= 0x3F;
0001cb 85ea      	LDD  R30,Y+10
0001cc 73ef      	ANDI R30,LOW(0x3F)
0001cd 87ea      	STD  Y+10,R30
                 ; 0000 01B1     SPI_7753_SEND(addr);
0001ce 85aa      	LDD  R26,Y+10
0001cf dfba      	RCALL _SPI_7753_SEND
                 ; 0000 01B2     for(i=0;i<num_data;i++) data[i] = SPI_7753_RECEIVE();
0001d0 e010      	LDI  R17,LOW(0)
                 _0xB6:
0001d1 85e9      	LDD  R30,Y+9
0001d2 171e      	CP   R17,R30
0001d3 f458      	BRSH _0xB7
0001d4 d0b4      	RCALL SUBOPT_0xB
0001d5 0fea      	ADD  R30,R26
0001d6 1ffb      	ADC  R31,R27
0001d7 93ff      	PUSH R31
0001d8 93ef      	PUSH R30
0001d9 dfc2      	RCALL _SPI_7753_RECEIVE
0001da 91af      	POP  R26
0001db 91bf      	POP  R27
0001dc 93ec      	ST   X,R30
0001dd 5f1f      	SUBI R17,-1
0001de cff2      	RJMP _0xB6
                 _0xB7:
                 ; 0000 01B3 PORTC.4 = 0;
0001df 98ac      	CBI  0x15,4
                 ; 0000 01B4     PHASE_2_OFF;
0001e0 98ad      	CBI  0x15,5
                 ; 0000 01B5     PHASE_3_OFF;
0001e1 98ab      	CBI  0x15,3
                 ; 0000 01B6     res = 0;
0001e2 e0e0      	LDI  R30,LOW(0)
                +
0001e3 83e9     +STD Y + 1 , R30
0001e4 83ea     +STD Y + 1 + 1 , R30
0001e5 83eb     +STD Y + 1 + 2 , R30
0001e6 83ec     +STD Y + 1 + 3 , R30
                 	__CLRD1S 1
                 ; 0000 01B7     for(i=0;i<num_data;i++)
0001e7 e010      	LDI  R17,LOW(0)
                 _0xBF:
0001e8 85e9      	LDD  R30,Y+9
0001e9 171e      	CP   R17,R30
0001ea f478      	BRSH _0xC0
                 ; 0000 01B8     {
                 ; 0000 01B9         res <<= 8;
0001eb d0a2      	RCALL SUBOPT_0xC
0001ec e0e8      	LDI  R30,LOW(8)
0001ed d0af      	RCALL __LSLD12
0001ee d0a4      	RCALL SUBOPT_0xD
                 ; 0000 01BA         res += data[i];
0001ef d099      	RCALL SUBOPT_0xB
0001f0 0fae      	ADD  R26,R30
0001f1 1fbf      	ADC  R27,R31
0001f2 91ec      	LD   R30,X
0001f3 e0f0      	LDI  R31,0
0001f4 d099      	RCALL SUBOPT_0xC
0001f5 d0b3      	RCALL __CWD1
0001f6 d0a1      	RCALL __ADDD12
0001f7 d09b      	RCALL SUBOPT_0xD
                 ; 0000 01BB     }
0001f8 5f1f      	SUBI R17,-1
0001f9 cfee      	RJMP _0xBF
                 _0xC0:
                 ; 0000 01BC     return (res);
                +
0001fa 81e9     +LDD R30 , Y + 1
0001fb 81fa     +LDD R31 , Y + 1 + 1
0001fc 816b     +LDD R22 , Y + 1 + 2
0001fd 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
0001fe 8118      	LDD  R17,Y+0
0001ff 962c      	ADIW R28,12
000200 9508      	RET
                 ; 0000 01BD }
                 ; .FEND
                 ;
                 ;void    ADE7753_INIT(void)
                 ; 0000 01C0 {
                 ; 0000 01C1     ADE7753_WRITE(1,MODE,0x00,0x00,0x00);
                 ; 0000 01C2     ADE7753_WRITE(1,SAGLVL,0X2a,0X00,0X00);
                 ; 0000 01C3     ADE7753_WRITE(1,SAGCYC,0X04,0X00,0X00);
                 ; 0000 01C4 }
                 ;
                 ;void main(void)
                 ; 0000 01C7 {
                 _main:
                 ; .FSTART _main
                 ; 0000 01C8 // Declare your local variables here
                 ; 0000 01C9 // Input/Output Ports initialization
                 ; 0000 01CA // Port B initialization
                 ; 0000 01CB // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=Out Bit2=In Bit1=Out Bit0=In
                 ; 0000 01CC DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (0<<DDB2) | (1<<DDB1) | (0<<DDB0);
000201 e3ea      	LDI  R30,LOW(58)
000202 bbe7      	OUT  0x17,R30
                 ; 0000 01CD // State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=0 Bit2=T Bit1=0 Bit0=T
                 ; 0000 01CE PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000203 e0e0      	LDI  R30,LOW(0)
000204 bbe8      	OUT  0x18,R30
                 ; 0000 01CF 
                 ; 0000 01D0 // Port C initialization
                 ; 0000 01D1 // Function: Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=In Bit0=In
                 ; 0000 01D2 DDRC=(0<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (0<<DDC1) | (0<<DDC0);
000205 e3ec      	LDI  R30,LOW(60)
000206 bbe4      	OUT  0x14,R30
                 ; 0000 01D3 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 01D4 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000207 e0e0      	LDI  R30,LOW(0)
000208 bbe5      	OUT  0x15,R30
                 ; 0000 01D5 
                 ; 0000 01D6 // Port D initialization
                 ; 0000 01D7 // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=Out
                 ; 0000 01D8 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (1<<DDD4) | (0<<DDD3) | (0<<DDD2) | (1<<DDD1) | (0<<DDD0);
000209 e1e2      	LDI  R30,LOW(18)
00020a bbe1      	OUT  0x11,R30
                 ; 0000 01D9 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 01DA PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00020b e0e0      	LDI  R30,LOW(0)
00020c bbe2      	OUT  0x12,R30
                 ; 0000 01DB 
                 ; 0000 01DC // Timer/Counter 0 initialization
                 ; 0000 01DD // Clock source: System Clock
                 ; 0000 01DE // Clock value: Timer 0 Stopped
                 ; 0000 01DF TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
00020d bfe3      	OUT  0x33,R30
                 ; 0000 01E0 TCNT0=0x94;
00020e e9e4      	LDI  R30,LOW(148)
00020f bfe2      	OUT  0x32,R30
                 ; 0000 01E1 
                 ; 0000 01E2 // Timer/Counter 1 initialization
                 ; 0000 01E3 // Clock source: System Clock
                 ; 0000 01E4 // Clock value: 11059.200 kHz
                 ; 0000 01E5 // Mode: Normal top=0xFFFF
                 ; 0000 01E6 // OC1A output: Disconnected
                 ; 0000 01E7 // OC1B output: Disconnected
                 ; 0000 01E8 // Noise Canceler: Off
                 ; 0000 01E9 // Input Capture on Falling Edge
                 ; 0000 01EA // Timer Period: 2 ms
                 ; 0000 01EB // Timer1 Overflow Interrupt: On
                 ; 0000 01EC // Input Capture Interrupt: Off
                 ; 0000 01ED // Compare A Match Interrupt: Off
                 ; 0000 01EE // Compare B Match Interrupt: Off
                 ; 0000 01EF TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000210 e0e0      	LDI  R30,LOW(0)
000211 bdef      	OUT  0x2F,R30
                 ; 0000 01F0 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
000212 e0e1      	LDI  R30,LOW(1)
000213 bdee      	OUT  0x2E,R30
                 ; 0000 01F1 TCNT1H=0xA9;
000214 eae9      	LDI  R30,LOW(169)
000215 bded      	OUT  0x2D,R30
                 ; 0000 01F2 TCNT1L=0x9A;
000216 e9ea      	LDI  R30,LOW(154)
000217 bdec      	OUT  0x2C,R30
                 ; 0000 01F3 ICR1H=0x00;
000218 e0e0      	LDI  R30,LOW(0)
000219 bde7      	OUT  0x27,R30
                 ; 0000 01F4 ICR1L=0x00;
00021a bde6      	OUT  0x26,R30
                 ; 0000 01F5 OCR1AH=0x00;
00021b bdeb      	OUT  0x2B,R30
                 ; 0000 01F6 OCR1AL=0x00;
00021c bdea      	OUT  0x2A,R30
                 ; 0000 01F7 OCR1BH=0x00;
00021d bde9      	OUT  0x29,R30
                 ; 0000 01F8 OCR1BL=0x00;
00021e bde8      	OUT  0x28,R30
                 ; 0000 01F9 
                 ; 0000 01FA // Timer/Counter 2 initialization
                 ; 0000 01FB // Clock source: System Clock
                 ; 0000 01FC // Clock value: Timer2 Stopped
                 ; 0000 01FD // Mode: Normal top=0xFF
                 ; 0000 01FE // OC2 output: Disconnected
                 ; 0000 01FF ASSR=0<<AS2;
00021f bde2      	OUT  0x22,R30
                 ; 0000 0200 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000220 bde5      	OUT  0x25,R30
                 ; 0000 0201 TCNT2=0x00;
000221 bde4      	OUT  0x24,R30
                 ; 0000 0202 OCR2=0x00;
000222 bde3      	OUT  0x23,R30
                 ; 0000 0203 
                 ; 0000 0204 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0205 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<TOIE0);
000223 e0e4      	LDI  R30,LOW(4)
000224 bfe9      	OUT  0x39,R30
                 ; 0000 0206 
                 ; 0000 0207 // External Interrupt(s) initialization
                 ; 0000 0208 // INT0: Off
                 ; 0000 0209 // INT1: Off
                 ; 0000 020A MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000225 e0e0      	LDI  R30,LOW(0)
000226 bfe5      	OUT  0x35,R30
                 ; 0000 020B 
                 ; 0000 020C // USART initialization
                 ; 0000 020D // USART disabled
                 ; 0000 020E UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000227 b9ea      	OUT  0xA,R30
                 ; 0000 020F 
                 ; 0000 0210 // Analog Comparator initialization
                 ; 0000 0211 // Analog Comparator: Off
                 ; 0000 0212 // The Analog Comparator's positive input is
                 ; 0000 0213 // connected to the AIN0 pin
                 ; 0000 0214 // The Analog Comparator's negative input is
                 ; 0000 0215 // connected to the AIN1 pin
                 ; 0000 0216 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000228 e8e0      	LDI  R30,LOW(128)
000229 b9e8      	OUT  0x8,R30
                 ; 0000 0217 
                 ; 0000 0218 // ADC initialization
                 ; 0000 0219 // ADC Clock frequency: 345.600 kHz
                 ; 0000 021A // ADC Voltage Reference: AREF pin
                 ; 0000 021B ADMUX=ADC_VREF_TYPE;
00022a e4e0      	LDI  R30,LOW(64)
00022b b9e7      	OUT  0x7,R30
                 ; 0000 021C ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
00022c e8e5      	LDI  R30,LOW(133)
00022d b9e6      	OUT  0x6,R30
                 ; 0000 021D SFIOR=(0<<ACME);
00022e e0e0      	LDI  R30,LOW(0)
00022f bfe0      	OUT  0x30,R30
                 ; 0000 021E 
                 ; 0000 021F // SPI initialization
                 ; 0000 0220 // SPI disabled
                 ; 0000 0221 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000230 b9ed      	OUT  0xD,R30
                 ; 0000 0222 
                 ; 0000 0223 // TWI initialization
                 ; 0000 0224 // TWI disabled
                 ; 0000 0225 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000231 bfe6      	OUT  0x36,R30
                 ; 0000 0226 
                 ; 0000 0227 // Global enable interrupts
                 ; 0000 0228 #asm("sei")
000232 9478      	sei
                 ; 0000 0229 //ADE7753_INIT();
                 ; 0000 022A //PHASE_1_ON;
                 ; 0000 022B while (1)
                 _0xC1:
                 ; 0000 022C       {
                 ; 0000 022D           CURRENT = ADE7753_READ(1,IRMS);
000233 e0e1      	LDI  R30,LOW(1)
000234 93ea      	ST   -Y,R30
000235 e1e6      	LDI  R30,LOW(22)
000236 93ea      	ST   -Y,R30
000237 e0a3      	LDI  R26,LOW(3)
000238 df73      	RCALL _ADE7753_READ
000239 93e0 0160 	STS  _CURRENT,R30
00023b 93f0 0161 	STS  _CURRENT+1,R31
00023d 9360 0162 	STS  _CURRENT+2,R22
00023f 9370 0163 	STS  _CURRENT+3,R23
                 ; 0000 022E           data1 = (unsigned int) (((unsigned long)read_adc(0)*500)/1023);
000241 e0a0      	LDI  R26,LOW(0)
000242 de79      	RCALL _read_adc
000243 2766      	CLR  R22
000244 2777      	CLR  R23
                +
000245 efa4     +LDI R26 , LOW ( 0x1F4 )
000246 e0b1     +LDI R27 , HIGH ( 0x1F4 )
000247 e080     +LDI R24 , BYTE3 ( 0x1F4 )
000248 e090     +LDI R25 , BYTE4 ( 0x1F4 )
                 	__GETD2N 0x1F4
000249 d064      	RCALL __MULD12U
00024a 01df      	MOVW R26,R30
00024b 01cb      	MOVW R24,R22
                +
00024c efef     +LDI R30 , LOW ( 0x3FF )
00024d e0f3     +LDI R31 , HIGH ( 0x3FF )
00024e e060     +LDI R22 , BYTE3 ( 0x3FF )
00024f e070     +LDI R23 , BYTE4 ( 0x3FF )
                 	__GETD1N 0x3FF
000250 d096      	RCALL __DIVD21U
                +
000251 2e7e     +MOV R7 , R30
000252 2e8f     +MOV R8 , R31
                 	__PUTW1R 7,8
                 ; 0000 022F           data2 = (unsigned int)CURRENT*100;
000253 91a0 0160 	LDS  R26,_CURRENT
000255 91b0 0161 	LDS  R27,_CURRENT+1
000257 e6e4      	LDI  R30,LOW(100)
000258 d075      	RCALL __MULB1W2U
                +
000259 2e9e     +MOV R9 , R30
00025a 2eaf     +MOV R10 , R31
                 	__PUTW1R 9,10
                 ; 0000 0230           //data3++;
                 ; 0000 0231       }
00025b cfd7      	RJMP _0xC1
                 ; 0000 0232 }
                 _0xC4:
00025c cfff      	RJMP _0xC4
                 ; .FEND
                 
                 	.DSEG
                 _CURRENT:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
                +
00025d 2da7     +MOV R26 , R7
00025e 2db8     +MOV R27 , R8
                 	__GETW2R 7,8
00025f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
000260 eee8      	LDI  R30,LOW(1000)
000261 e0f3      	LDI  R31,HIGH(1000)
000262 d071      	RCALL __DIVW21U
000263 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
000264 e6e4      	LDI  R30,LOW(100)
000265 e0f0      	LDI  R31,HIGH(100)
000266 d06d      	RCALL __DIVW21U
000267 01df      	MOVW R26,R30
000268 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
000269 e0ea      	LDI  R30,LOW(10)
00026a e0f0      	LDI  R31,HIGH(10)
00026b d068      	RCALL __DIVW21U
00026c 01df      	MOVW R26,R30
00026d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
                +
00026e 2da9     +MOV R26 , R9
00026f 2dba     +MOV R27 , R10
                 	__GETW2R 9,10
000270 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
                +
000271 2dab     +MOV R26 , R11
000272 2dbc     +MOV R27 , R12
                 	__GETW2R 11,12
000273 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
000274 2fe0      	MOV  R30,R16
000275 78e0      	ANDI R30,LOW(0x80)
000276 38e0      	CPI  R30,LOW(0x80)
000277 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
000278 0f00      	LSL  R16
000279 98c5      	CBI  0x18,5
00027a 9ac5      	SBI  0x18,5
00027b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
00027c e0f0      	LDI  R31,0
00027d 30e1      	CPI  R30,LOW(0x1)
00027e e0a0      	LDI  R26,HIGH(0x1)
00027f 07fa      	CPC  R31,R26
000280 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
000281 30e2      	CPI  R30,LOW(0x2)
000282 e0a0      	LDI  R26,HIGH(0x2)
000283 07fa      	CPC  R31,R26
000284 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xA:
000285 30e3      	CPI  R30,LOW(0x3)
000286 e0a0      	LDI  R26,HIGH(0x3)
000287 07fa      	CPC  R31,R26
000288 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xB:
000289 2fe1      	MOV  R30,R17
00028a e0f0      	LDI  R31,0
00028b 01de      	MOVW R26,R28
00028c 9615      	ADIW R26,5
00028d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
                +
00028e 81a9     +LDD R26 , Y + 1
00028f 81ba     +LDD R27 , Y + 1 + 1
000290 818b     +LDD R24 , Y + 1 + 2
000291 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
000292 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
                +
000293 83e9     +STD Y + 1 , R30
000294 83fa     +STD Y + 1 + 1 , R31
000295 836b     +STD Y + 1 + 2 , R22
000296 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
000297 9508      	RET
                 
                 
                 	.CSEG
                 __ADDD12:
000298 0fea      	ADD  R30,R26
000299 1ffb      	ADC  R31,R27
00029a 1f68      	ADC  R22,R24
00029b 1f79      	ADC  R23,R25
00029c 9508      	RET
                 
                 __LSLD12:
00029d 23ee      	TST  R30
00029e 2e0e      	MOV  R0,R30
00029f 01fd      	MOVW R30,R26
0002a0 01bc      	MOVW R22,R24
0002a1 f031      	BREQ __LSLD12R
                 __LSLD12L:
0002a2 0fee      	LSL  R30
0002a3 1fff      	ROL  R31
0002a4 1f66      	ROL  R22
0002a5 1f77      	ROL  R23
0002a6 940a      	DEC  R0
0002a7 f7d1      	BRNE __LSLD12L
                 __LSLD12R:
0002a8 9508      	RET
                 
                 __CWD1:
0002a9 2f6f      	MOV  R22,R31
0002aa 0f66      	ADD  R22,R22
0002ab 0b66      	SBC  R22,R22
0002ac 2f76      	MOV  R23,R22
0002ad 9508      	RET
                 
                 __MULD12U:
0002ae 9f7a      	MUL  R23,R26
0002af 2d70      	MOV  R23,R0
0002b0 9f6b      	MUL  R22,R27
0002b1 0d70      	ADD  R23,R0
0002b2 9ff8      	MUL  R31,R24
0002b3 0d70      	ADD  R23,R0
0002b4 9fe9      	MUL  R30,R25
0002b5 0d70      	ADD  R23,R0
0002b6 9f6a      	MUL  R22,R26
0002b7 2d60      	MOV  R22,R0
0002b8 0d71      	ADD  R23,R1
0002b9 9ffb      	MUL  R31,R27
0002ba 0d60      	ADD  R22,R0
0002bb 1d71      	ADC  R23,R1
0002bc 9fe8      	MUL  R30,R24
0002bd 0d60      	ADD  R22,R0
0002be 1d71      	ADC  R23,R1
0002bf 2788      	CLR  R24
0002c0 9ffa      	MUL  R31,R26
0002c1 2df0      	MOV  R31,R0
0002c2 0d61      	ADD  R22,R1
0002c3 1f78      	ADC  R23,R24
0002c4 9feb      	MUL  R30,R27
0002c5 0df0      	ADD  R31,R0
0002c6 1d61      	ADC  R22,R1
0002c7 1f78      	ADC  R23,R24
0002c8 9fea      	MUL  R30,R26
0002c9 2de0      	MOV  R30,R0
0002ca 0df1      	ADD  R31,R1
0002cb 1f68      	ADC  R22,R24
0002cc 1f78      	ADC  R23,R24
0002cd 9508      	RET
                 
                 __MULB1W2U:
0002ce 2f6e      	MOV  R22,R30
0002cf 9f6a      	MUL  R22,R26
0002d0 01f0      	MOVW R30,R0
0002d1 9f6b      	MUL  R22,R27
0002d2 0df0      	ADD  R31,R0
0002d3 9508      	RET
                 
                 __DIVW21U:
0002d4 2400      	CLR  R0
0002d5 2411      	CLR  R1
0002d6 e190      	LDI  R25,16
                 __DIVW21U1:
0002d7 0faa      	LSL  R26
0002d8 1fbb      	ROL  R27
0002d9 1c00      	ROL  R0
0002da 1c11      	ROL  R1
0002db 1a0e      	SUB  R0,R30
0002dc 0a1f      	SBC  R1,R31
0002dd f418      	BRCC __DIVW21U2
0002de 0e0e      	ADD  R0,R30
0002df 1e1f      	ADC  R1,R31
0002e0 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0002e1 60a1      	SBR  R26,1
                 __DIVW21U3:
0002e2 959a      	DEC  R25
0002e3 f799      	BRNE __DIVW21U1
0002e4 01fd      	MOVW R30,R26
0002e5 01d0      	MOVW R26,R0
0002e6 9508      	RET
                 
                 __DIVD21U:
0002e7 933f      	PUSH R19
0002e8 934f      	PUSH R20
0002e9 935f      	PUSH R21
0002ea 2400      	CLR  R0
0002eb 2411      	CLR  R1
0002ec 2744      	CLR  R20
0002ed 2755      	CLR  R21
0002ee e230      	LDI  R19,32
                 __DIVD21U1:
0002ef 0faa      	LSL  R26
0002f0 1fbb      	ROL  R27
0002f1 1f88      	ROL  R24
0002f2 1f99      	ROL  R25
0002f3 1c00      	ROL  R0
0002f4 1c11      	ROL  R1
0002f5 1f44      	ROL  R20
0002f6 1f55      	ROL  R21
0002f7 1a0e      	SUB  R0,R30
0002f8 0a1f      	SBC  R1,R31
0002f9 0b46      	SBC  R20,R22
0002fa 0b57      	SBC  R21,R23
0002fb f428      	BRCC __DIVD21U2
0002fc 0e0e      	ADD  R0,R30
0002fd 1e1f      	ADC  R1,R31
0002fe 1f46      	ADC  R20,R22
0002ff 1f57      	ADC  R21,R23
000300 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000301 60a1      	SBR  R26,1
                 __DIVD21U3:
000302 953a      	DEC  R19
000303 f759      	BRNE __DIVD21U1
000304 01fd      	MOVW R30,R26
000305 01bc      	MOVW R22,R24
000306 01d0      	MOVW R26,R0
000307 01ca      	MOVW R24,R20
000308 915f      	POP  R21
000309 914f      	POP  R20
00030a 913f      	POP  R19
00030b 9508      	RET
                 
                 __MODW21U:
00030c dfc7      	RCALL __DIVW21U
00030d 01fd      	MOVW R30,R26
00030e 9508      	RET
                 
                 __SAVELOCR4:
00030f 933a      	ST   -Y,R19
                 __SAVELOCR3:
000310 932a      	ST   -Y,R18
                 __SAVELOCR2:
000311 931a      	ST   -Y,R17
000312 930a      	ST   -Y,R16
000313 9508      	RET
                 
                 __LOADLOCR4:
000314 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000315 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000316 8119      	LDD  R17,Y+1
000317 8108      	LD   R16,Y
000318 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8L register use summary:
r0 :  30 r1 :  17 r2 :   0 r3 :   0 r4 :   0 r5 :   2 r6 :  16 r7 :   2 
r8 :   2 r9 :   2 r10:   2 r11:   2 r12:   2 r13:   0 r14:   0 r15:   2 
r16:  28 r17:  45 r18:   2 r19:  20 r20:   7 r21:   6 r22:  33 r23:  23 
r24:  26 r25:  11 r26:  84 r27:  21 r28:   8 r29:   1 r30: 196 r31:  59 
x  :   6 y  :  75 z  :   7 
Registers used: 30 out of 35 (85.7%)

ATmega8L instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  18 add   :  18 
adiw  :   6 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  48 brpl  :   0 brsh  :   9 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :  17 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  11 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  15 
cpc   :  19 cpi   :  26 cpse  :   0 dec   :   5 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   3 
inc   :   1 ld    :  17 ldd   :  23 ldi   : 138 lds   :   2 lpm   :   7 
lsl   :   6 lsr   :   0 mov   :  26 movw  :  18 mul   :  12 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :  10 out   :  41 
pop   :   5 push  :   5 rcall :  67 ret   :  30 reti  :   1 rjmp  :  70 
rol   :  13 ror   :   0 sbc   :   5 sbci  :   0 sbi   :  13 sbic  :   1 
sbis  :   1 sbiw  :   5 sbr   :   2 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  32 std   :   9 
sts   :   4 sub   :   2 subi  :   9 swap  :   0 tst   :   1 wdr   :   0 

Instructions used: 48 out of 114 (42.1%)

ATmega8L memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000632   1570     16   1586    8192  19.4%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 8 warnings
