
AVRASM ver. 2.1.30  D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-current-metter\Debug\List\3-phase-current-metter.asm Tue Nov 27 21:06:39 2018

D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1086): warning: Register r7 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1087): warning: Register r8 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1088): warning: Register r9 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1089): warning: Register r10 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1090): warning: Register r11 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1091): warning: Register r12 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1092): warning: Register r13 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1093): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8L
                 ;Program type           : Application
                 ;Clock frequency        : 11,059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8L
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Uc_Select_led=R7
                 	.DEF _Uint_dataLed1=R8
                 	.DEF _Uint_dataLed1_msb=R9
                 	.DEF _Uint_dataLed2=R10
                 	.DEF _Uint_dataLed2_msb=R11
                 	.DEF _Uint_dataLed3=R12
                 	.DEF _Uint_dataLed3_msb=R13
                 	.DEF _Uc_Current_Array_Cnt=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c035      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 c059      	RJMP _timer1_ovf_isr
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000013 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000014 0100
000015 0000      	.DB  0x0,0x1,0x0,0x0
000016 0000
000017 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
000018 81f9
000019 abba
00001a 6bc3
00001b a17b      	.DB  0xF9,0x81,0xBA,0xAB,0xC3,0x6B,0x7B,0xA1
00001c ebfb      	.DB  0xFB,0xEB
                 _0x4:
00001d 0001
00001e 0002
00001f 0004
000020 0008      	.DB  0x1,0x0,0x2,0x0,0x4,0x0,0x8,0x0
000021 0040
000022 0020
000023 0010
000024 0080      	.DB  0x40,0x0,0x20,0x0,0x10,0x0,0x80,0x0
000025 4000
000026 2000
000027 1000
000028 8000      	.DB  0x0,0x40,0x0,0x20,0x0,0x10,0x0,0x80
                 
                 __GLOBAL_INI_TBL:
000029 0001      	.DW  0x01
00002a 0002      	.DW  0x02
00002b 0026      	.DW  __REG_BIT_VARS*2
                 
00002c 0008      	.DW  0x08
00002d 0006      	.DW  0x06
00002e 0028      	.DW  __REG_VARS*2
                 
00002f 000a      	.DW  0x0A
000030 0182      	.DW  _BCDLED
000031 0030      	.DW  _0x3*2
                 
000032 0018      	.DW  0x18
000033 018d      	.DW  _LED
000034 003a      	.DW  _0x4*2
                 
                 _0xFFFFFFFF:
000035 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000036 94f8      	CLI
000037 27ee      	CLR  R30
000038 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000039 e0f1      	LDI  R31,1
00003a bffb      	OUT  GICR,R31
00003b bfeb      	OUT  GICR,R30
00003c bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003d e08d      	LDI  R24,(14-2)+1
00003e e0a2      	LDI  R26,2
00003f 27bb      	CLR  R27
                 __CLEAR_REG:
000040 93ed      	ST   X+,R30
000041 958a      	DEC  R24
000042 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000043 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000044 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000045 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000046 93ed      	ST   X+,R30
000047 9701      	SBIW R24,1
000048 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000049 e5e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004b 9185      	LPM  R24,Z+
00004c 9195      	LPM  R25,Z+
00004d 9700      	SBIW R24,0
00004e f061      	BREQ __GLOBAL_INI_END
00004f 91a5      	LPM  R26,Z+
000050 91b5      	LPM  R27,Z+
000051 9005      	LPM  R0,Z+
000052 9015      	LPM  R1,Z+
000053 01bf      	MOVW R22,R30
000054 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000055 9005      	LPM  R0,Z+
000056 920d      	ST   X+,R0
000057 9701      	SBIW R24,1
000058 f7e1      	BRNE __GLOBAL_INI_LOOP
000059 01fb      	MOVW R30,R22
00005a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005b e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005c bfed      	OUT  SPL,R30
00005d e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00005e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00005f e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000060 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000061 c1d2      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : 3 Phase current metter
                 ;Version : 1.0
                 ;Date    : 11/10/2018
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;Do va hien thi cuong do dong dien
                 ;Su dung IC ADE7753
                 ;
                 ;
                 ;Chip type               : ATmega8L
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 11.059200 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <ADE7753.h>
                 ;
                 ;// Declare your global variables here
                 ;#define DO_595_LATCH  PORTB.1
                 ;#define DO_595_MOSI    PORTB.3
                 ;#define DO_595_SCK    PORTB.5
                 ;
                 ;#define CTRL_595_ON     DO_595_LATCH = 1
                 ;#define CTRL_595_OFF    DO_595_LATCH = 0
                 ;
                 ;#define BUZZER  PORTC.2
                 ;
                 ;#define BUZZER_ON   BUZZER = 1
                 ;#define BUZZER_OFF  BUZZER = 0
                 ;
                 ;#define CURRENT_MAX_SET 15
                 ;#define CURRENT_MIN_SET 8
                 ;
                 ;/* He so dieu chinh dien ap doc duoc cua tung pha */
                 ;#define PHASE_1_SCALE   100
                 ;#define PHASE_2_SCALE   124
                 ;#define PHASE_3_SCALE   116
                 ;
                 ;/* So luong mau lay de tinh toan */
                 ;#define NUM_SAMPLE  5
                 ;/* So luong noise loai bo */
                 ;#define NUM_FILTER  1
                 ;
                 ;bit Bit_Warning_1 = 0;
                 ;bit Bit_Warning_2 = 0;
                 ;bit Bit_Warning_3 = 0;
                 ;
                 ;
                 ;void    SEND_DATA_LED(unsigned char  data_first,unsigned char  data_second,unsigned char  data_third);
                 ;void    SCAN_LED(unsigned char num_led,unsigned char    data);
                 ;
                 ;unsigned char   Uc_Select_led=1;
                 ;
                 ;/* Cac gia tri hien thi tren cac led */
                 ;unsigned int   Uint_dataLed1 = 0;
                 ;unsigned int   Uint_dataLed2 = 0;
                 ;unsigned int   Uint_dataLed3 = 0;
                 ;
                 ;/* Co bao da lay du luong mau de tinh toan */
                 ;bit Bit_sample_full =0;
                 ;
                 ;/* mang luu gia tri dong dien */
                 ;unsigned int AI10__Current_L1[NUM_SAMPLE];
                 ;unsigned int AI10__Current_L2[NUM_SAMPLE];
                 ;unsigned int AI10__Current_L3[NUM_SAMPLE];
                 ;unsigned char   Uc_Current_Array_Cnt = 0;
                 ;
                 ;unsigned int    AI10_Current_Set;
                 ;
                 ;unsigned char   Uc_Buzzer_cnt = 0;
                 ;
                 ;unsigned char   Uc_Timer_cnt = 0;
                 ;
                 ;unsigned char   BCDLED[11]={0xF9,0x81,0xBA,0xAB,0xC3,0x6B,0x7B,0xA1,0xFB,0xEB,0};
                 
                 	.DSEG
                 ;unsigned int    LED[12] = {0x0001,0x0002,0x0004,0x0008,0x0040,0x0020,0x0010,0x0080,0x4000,0x2000,0x1000,0x8000};
                 ;
                 ;
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 005D {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
000062 920a      	ST   -Y,R0
000063 921a      	ST   -Y,R1
000064 92fa      	ST   -Y,R15
000065 936a      	ST   -Y,R22
000066 937a      	ST   -Y,R23
000067 938a      	ST   -Y,R24
000068 939a      	ST   -Y,R25
000069 93aa      	ST   -Y,R26
00006a 93ba      	ST   -Y,R27
00006b 93ea      	ST   -Y,R30
00006c 93fa      	ST   -Y,R31
00006d b7ef      	IN   R30,SREG
00006e 93ea      	ST   -Y,R30
                 ; 0000 005E     unsigned char   data = 0;
                 ; 0000 005F // Reinitialize Timer1 value
                 ; 0000 0060     TCNT1H=0xAA00 >> 8;
00006f 931a      	ST   -Y,R17
                 ;	data -> R17
000070 e010      	LDI  R17,0
000071 eaea      	LDI  R30,LOW(170)
000072 bded      	OUT  0x2D,R30
                 ; 0000 0061     TCNT1L=0xAA00 & 0xff;
000073 e0e0      	LDI  R30,LOW(0)
000074 bdec      	OUT  0x2C,R30
                 ; 0000 0062 // Place your code here
                 ; 0000 0063     Uc_Timer_cnt++;
000075 91e0 0181 	LDS  R30,_Uc_Timer_cnt
000077 5fef      	SUBI R30,-LOW(1)
000078 93e0 0181 	STS  _Uc_Timer_cnt,R30
                 ; 0000 0064     if(Uc_Timer_cnt > 200)  Uc_Timer_cnt = 0;
00007a 91a0 0181 	LDS  R26,_Uc_Timer_cnt
00007c 3ca9      	CPI  R26,LOW(0xC9)
00007d f018      	BRLO _0x5
00007e e0e0      	LDI  R30,LOW(0)
00007f 93e0 0181 	STS  _Uc_Timer_cnt,R30
                 ; 0000 0065 
                 ; 0000 0066     if(Uc_Select_led > 12) Uc_Select_led=1;
                 _0x5:
000081 e0ec      	LDI  R30,LOW(12)
000082 15e7      	CP   R30,R7
000083 f410      	BRSH _0x6
000084 e0e1      	LDI  R30,LOW(1)
000085 2e7e      	MOV  R7,R30
                 ; 0000 0067     if(Uc_Select_led == 1)    data = Uint_dataLed1/1000;
                 _0x6:
000086 e0e1      	LDI  R30,LOW(1)
000087 15e7      	CP   R30,R7
000088 f419      	BRNE _0x7
000089 01d4      	MOVW R26,R8
00008a d2d5      	RCALL SUBOPT_0x0
00008b c041      	RJMP _0x98
                 ; 0000 0068     else if(Uc_Select_led == 2)    data = Uint_dataLed1/100%10;
                 _0x7:
00008c e0e2      	LDI  R30,LOW(2)
00008d 15e7      	CP   R30,R7
00008e f419      	BRNE _0x9
00008f 01d4      	MOVW R26,R8
000090 d2d3      	RCALL SUBOPT_0x1
000091 c038      	RJMP _0x99
                 ; 0000 0069     else if(Uc_Select_led == 3)    data = Uint_dataLed1/10%10;
                 _0x9:
000092 e0e3      	LDI  R30,LOW(3)
000093 15e7      	CP   R30,R7
000094 f419      	BRNE _0xB
000095 01d4      	MOVW R26,R8
000096 d2d2      	RCALL SUBOPT_0x2
000097 c032      	RJMP _0x99
                 ; 0000 006A     else if(Uc_Select_led == 4)    data = Uint_dataLed1%10;
                 _0xB:
000098 e0e4      	LDI  R30,LOW(4)
000099 15e7      	CP   R30,R7
00009a f411      	BRNE _0xD
00009b 01d4      	MOVW R26,R8
00009c c02d      	RJMP _0x99
                 ; 0000 006B     else if(Uc_Select_led == 5)    data = Uint_dataLed2/1000;
                 _0xD:
00009d e0e5      	LDI  R30,LOW(5)
00009e 15e7      	CP   R30,R7
00009f f419      	BRNE _0xF
0000a0 01d5      	MOVW R26,R10
0000a1 d2be      	RCALL SUBOPT_0x0
0000a2 c02a      	RJMP _0x98
                 ; 0000 006C     else if(Uc_Select_led == 6)    data = Uint_dataLed2/100%10;
                 _0xF:
0000a3 e0e6      	LDI  R30,LOW(6)
0000a4 15e7      	CP   R30,R7
0000a5 f419      	BRNE _0x11
0000a6 01d5      	MOVW R26,R10
0000a7 d2bc      	RCALL SUBOPT_0x1
0000a8 c021      	RJMP _0x99
                 ; 0000 006D     else if(Uc_Select_led == 7)    data = Uint_dataLed2/10%10;
                 _0x11:
0000a9 e0e7      	LDI  R30,LOW(7)
0000aa 15e7      	CP   R30,R7
0000ab f419      	BRNE _0x13
0000ac 01d5      	MOVW R26,R10
0000ad d2bb      	RCALL SUBOPT_0x2
0000ae c01b      	RJMP _0x99
                 ; 0000 006E     else if(Uc_Select_led == 8)    data = Uint_dataLed2%10;
                 _0x13:
0000af e0e8      	LDI  R30,LOW(8)
0000b0 15e7      	CP   R30,R7
0000b1 f411      	BRNE _0x15
0000b2 01d5      	MOVW R26,R10
0000b3 c016      	RJMP _0x99
                 ; 0000 006F     else if(Uc_Select_led == 9)    data = Uint_dataLed3/1000;
                 _0x15:
0000b4 e0e9      	LDI  R30,LOW(9)
0000b5 15e7      	CP   R30,R7
0000b6 f419      	BRNE _0x17
0000b7 01d6      	MOVW R26,R12
0000b8 d2a7      	RCALL SUBOPT_0x0
0000b9 c013      	RJMP _0x98
                 ; 0000 0070     else if(Uc_Select_led == 10)    data = Uint_dataLed3/100%10;
                 _0x17:
0000ba e0ea      	LDI  R30,LOW(10)
0000bb 15e7      	CP   R30,R7
0000bc f419      	BRNE _0x19
0000bd 01d6      	MOVW R26,R12
0000be d2a5      	RCALL SUBOPT_0x1
0000bf c00a      	RJMP _0x99
                 ; 0000 0071     else if(Uc_Select_led == 11)    data = Uint_dataLed3/10%10;
                 _0x19:
0000c0 e0eb      	LDI  R30,LOW(11)
0000c1 15e7      	CP   R30,R7
0000c2 f419      	BRNE _0x1B
0000c3 01d6      	MOVW R26,R12
0000c4 d2a4      	RCALL SUBOPT_0x2
0000c5 c004      	RJMP _0x99
                 ; 0000 0072     else if(Uc_Select_led == 12)    data = Uint_dataLed3%10;
                 _0x1B:
0000c6 e0ec      	LDI  R30,LOW(12)
0000c7 15e7      	CP   R30,R7
0000c8 f429      	BRNE _0x1D
0000c9 01d6      	MOVW R26,R12
                 _0x99:
0000ca e0ea      	LDI  R30,LOW(10)
0000cb e0f0      	LDI  R31,HIGH(10)
0000cc d3cb      	RCALL __MODW21U
                 _0x98:
0000cd 2f1e      	MOV  R17,R30
                 ; 0000 0073 
                 ; 0000 0074     // if(Bit_Warning_1 || Bit_Warning_2 || Bit_Warning_3)
                 ; 0000 0075     // {
                 ; 0000 0076     //     if(Bit_Warning_1)
                 ; 0000 0077     //     {
                 ; 0000 0078     //         if((Uc_Select_led == 1 || Uc_Select_led == 2 || Uc_Select_led == 3 || Uc_Select_led == 4) && Uc_Timer_cnt ...
                 ; 0000 0079     //         else SCAN_LED(Uc_Select_led,data);
                 ; 0000 007A     //     }
                 ; 0000 007B 
                 ; 0000 007C     //     if(Bit_Warning_2)
                 ; 0000 007D     //     {
                 ; 0000 007E     //         if((Uc_Select_led == 5 || Uc_Select_led == 6 || Uc_Select_led == 7 || Uc_Select_led == 8) && Uc_Timer_cnt ...
                 ; 0000 007F     //         else SCAN_LED(Uc_Select_led,data);
                 ; 0000 0080     //     }
                 ; 0000 0081 
                 ; 0000 0082     //     if(Bit_Warning_3)
                 ; 0000 0083     //     {
                 ; 0000 0084     //         if((Uc_Select_led == 9 || Uc_Select_led == 10 || Uc_Select_led == 11 || Uc_Select_led == 12) && Uc_Timer_ ...
                 ; 0000 0085     //         else SCAN_LED(Uc_Select_led,data);
                 ; 0000 0086     //     }
                 ; 0000 0087     // }
                 ; 0000 0088     // else
                 ; 0000 0089     SCAN_LED(Uc_Select_led,data);
                 _0x1D:
0000ce 927a      	ST   -Y,R7
0000cf 2fa1      	MOV  R26,R17
0000d0 d06c      	RCALL _SCAN_LED
                 ; 0000 008A     Uc_Select_led++;
0000d1 9473      	INC  R7
                 ; 0000 008B 
                 ; 0000 008C     if(Bit_Warning_1 || Bit_Warning_2 || Bit_Warning_3)
0000d2 fc20      	SBRC R2,0
0000d3 c004      	RJMP _0x1F
0000d4 fc21      	SBRC R2,1
0000d5 c002      	RJMP _0x1F
0000d6 fe22      	SBRS R2,2
0000d7 c015      	RJMP _0x1E
                 _0x1F:
                 ; 0000 008D     {
                 ; 0000 008E         Uc_Buzzer_cnt++;
0000d8 91e0 0180 	LDS  R30,_Uc_Buzzer_cnt
0000da 5fef      	SUBI R30,-LOW(1)
0000db 93e0 0180 	STS  _Uc_Buzzer_cnt,R30
                 ; 0000 008F         if(Uc_Buzzer_cnt < 100) BUZZER_ON;
0000dd 91a0 0180 	LDS  R26,_Uc_Buzzer_cnt
0000df 36a4      	CPI  R26,LOW(0x64)
0000e0 f410      	BRSH _0x21
0000e1 9aaa      	SBI  0x15,2
                 ; 0000 0090         else    if(Uc_Buzzer_cnt < 200) BUZZER_OFF;
0000e2 c009      	RJMP _0x24
                 _0x21:
0000e3 91a0 0180 	LDS  R26,_Uc_Buzzer_cnt
0000e5 3ca8      	CPI  R26,LOW(0xC8)
0000e6 f410      	BRSH _0x25
0000e7 98aa      	CBI  0x15,2
                 ; 0000 0091         else Uc_Buzzer_cnt = 0;
0000e8 c003      	RJMP _0x28
                 _0x25:
0000e9 e0e0      	LDI  R30,LOW(0)
0000ea 93e0 0180 	STS  _Uc_Buzzer_cnt,R30
                 ; 0000 0092     }
                 _0x28:
                 _0x24:
                 ; 0000 0093     else    BUZZER_OFF;
0000ec c001      	RJMP _0x29
                 _0x1E:
0000ed 98aa      	CBI  0x15,2
                 ; 0000 0094 }
                 _0x29:
0000ee 9119      	LD   R17,Y+
0000ef 91e9      	LD   R30,Y+
0000f0 bfef      	OUT  SREG,R30
0000f1 91f9      	LD   R31,Y+
0000f2 91e9      	LD   R30,Y+
0000f3 91b9      	LD   R27,Y+
0000f4 91a9      	LD   R26,Y+
0000f5 9199      	LD   R25,Y+
0000f6 9189      	LD   R24,Y+
0000f7 9179      	LD   R23,Y+
0000f8 9169      	LD   R22,Y+
0000f9 90f9      	LD   R15,Y+
0000fa 9019      	LD   R1,Y+
0000fb 9009      	LD   R0,Y+
0000fc 9518      	RETI
                 ; .FEND
                 ;
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 009B {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 009C     ADMUX=adc_input | ADC_VREF_TYPE;
0000fd 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
0000fe 81e8      	LD   R30,Y
0000ff 64e0      	ORI  R30,0x40
000100 b9e7      	OUT  0x7,R30
                 ; 0000 009D     // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 009E     delay_us(10);
                +
000101 e285     +LDI R24 , LOW ( 37 )
                +__DELAY_USB_LOOP :
000102 958a     +DEC R24
000103 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 37
                 ; 0000 009F     // Start the AD conversion
                 ; 0000 00A0     ADCSRA|=(1<<ADSC);
000104 9a36      	SBI  0x6,6
                 ; 0000 00A1     // Wait for the AD conversion to complete
                 ; 0000 00A2     while ((ADCSRA & (1<<ADIF))==0);
                 _0x2C:
000105 9b34      	SBIS 0x6,4
000106 cffe      	RJMP _0x2C
                 ; 0000 00A3     ADCSRA|=(1<<ADIF);
000107 9a34      	SBI  0x6,4
                 ; 0000 00A4     return ADCW;
000108 b1e4      	IN   R30,0x4
000109 b1f5      	IN   R31,0x4+1
00010a 9621      	ADIW R28,1
00010b 9508      	RET
                 ; 0000 00A5 }
                 ; .FEND
                 ;
                 ;/*
                 ;Gui data ra led
                 ;Gui lan luot data_first, data_second, data_third
                 ;Khi gui het du lieu se tien hanh xuat du lieu
                 ;*/
                 ;void    SEND_DATA_LED(unsigned char  data_first,unsigned char  data_second,unsigned char  data_third)
                 ; 0000 00AD {
                 _SEND_DATA_LED:
                 ; .FSTART _SEND_DATA_LED
                 ; 0000 00AE     unsigned char   i;
                 ; 0000 00AF     unsigned char   data;
                 ; 0000 00B0     data = data_first;
00010c 93aa      	ST   -Y,R26
00010d d395      	RCALL __SAVELOCR2
                 ;	data_first -> Y+4
                 ;	data_second -> Y+3
                 ;	data_third -> Y+2
                 ;	i -> R17
                 ;	data -> R16
00010e 810c      	LDD  R16,Y+4
                 ; 0000 00B1     for(i=0;i<8;i++)
00010f e010      	LDI  R17,LOW(0)
                 _0x30:
000110 3018      	CPI  R17,8
000111 f440      	BRSH _0x31
                 ; 0000 00B2     {
                 ; 0000 00B3         if((data & 0x80) == 0x80)    DO_595_MOSI = 1;
000112 d25b      	RCALL SUBOPT_0x3
000113 f411      	BRNE _0x32
000114 9ac3      	SBI  0x18,3
                 ; 0000 00B4         else    DO_595_MOSI = 0;
000115 c001      	RJMP _0x35
                 _0x32:
000116 98c3      	CBI  0x18,3
                 ; 0000 00B5         data <<= 1;
                 _0x35:
000117 d25a      	RCALL SUBOPT_0x4
                 ; 0000 00B6         DO_595_SCK = 1;
                 ; 0000 00B7         delay_us(3);
                 ; 0000 00B8         DO_595_SCK = 0;
                 ; 0000 00B9         delay_us(1);
                 ; 0000 00BA     }
000118 5f1f      	SUBI R17,-1
000119 cff6      	RJMP _0x30
                 _0x31:
                 ; 0000 00BB      DO_595_MOSI = 1;
00011a 9ac3      	SBI  0x18,3
                 ; 0000 00BC     data = data_second;
00011b 810b      	LDD  R16,Y+3
                 ; 0000 00BD     for(i=0;i<8;i++)
00011c e010      	LDI  R17,LOW(0)
                 _0x3F:
00011d 3018      	CPI  R17,8
00011e f440      	BRSH _0x40
                 ; 0000 00BE     {
                 ; 0000 00BF         if((data & 0x80) == 0x80)    DO_595_MOSI = 1;
00011f d24e      	RCALL SUBOPT_0x3
000120 f411      	BRNE _0x41
000121 9ac3      	SBI  0x18,3
                 ; 0000 00C0         else    DO_595_MOSI = 0;
000122 c001      	RJMP _0x44
                 _0x41:
000123 98c3      	CBI  0x18,3
                 ; 0000 00C1         data <<= 1;
                 _0x44:
000124 d24d      	RCALL SUBOPT_0x4
                 ; 0000 00C2         DO_595_SCK = 1;
                 ; 0000 00C3         delay_us(3);
                 ; 0000 00C4         DO_595_SCK = 0;
                 ; 0000 00C5         delay_us(1);
                 ; 0000 00C6     }
000125 5f1f      	SUBI R17,-1
000126 cff6      	RJMP _0x3F
                 _0x40:
                 ; 0000 00C7      DO_595_MOSI = 1;
000127 9ac3      	SBI  0x18,3
                 ; 0000 00C8     data = data_third;
000128 810a      	LDD  R16,Y+2
                 ; 0000 00C9     for(i=0;i<8;i++)
000129 e010      	LDI  R17,LOW(0)
                 _0x4E:
00012a 3018      	CPI  R17,8
00012b f440      	BRSH _0x4F
                 ; 0000 00CA     {
                 ; 0000 00CB         if((data & 0x80) == 0x80)    DO_595_MOSI = 1;
00012c d241      	RCALL SUBOPT_0x3
00012d f411      	BRNE _0x50
00012e 9ac3      	SBI  0x18,3
                 ; 0000 00CC         else    DO_595_MOSI = 0;
00012f c001      	RJMP _0x53
                 _0x50:
000130 98c3      	CBI  0x18,3
                 ; 0000 00CD         data <<= 1;
                 _0x53:
000131 d240      	RCALL SUBOPT_0x4
                 ; 0000 00CE         DO_595_SCK = 1;
                 ; 0000 00CF         delay_us(3);
                 ; 0000 00D0         DO_595_SCK = 0;
                 ; 0000 00D1         delay_us(1);
                 ; 0000 00D2     }
000132 5f1f      	SUBI R17,-1
000133 cff6      	RJMP _0x4E
                 _0x4F:
                 ; 0000 00D3      DO_595_MOSI = 1;
000134 9ac3      	SBI  0x18,3
                 ; 0000 00D4     CTRL_595_ON;
000135 9ac1      	SBI  0x18,1
                 ; 0000 00D5     delay_us(15);
                +
000136 e387     +LDI R24 , LOW ( 55 )
                +__DELAY_USB_LOOP :
000137 958a     +DEC R24
000138 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 55
                 ; 0000 00D6     CTRL_595_OFF;
000139 98c1      	CBI  0x18,1
                 ; 0000 00D7 }
00013a d36f      	RCALL __LOADLOCR2
00013b 9625      	ADIW R28,5
00013c 9508      	RET
                 ; .FEND
                 ;
                 ;/*
                 ;Ham quet led
                 ;num_led: Thu tu led
                 ;data: Du lieu hien thi tren led.
                 ;*/
                 ;void    SCAN_LED(unsigned char num_led,unsigned char    data)
                 ; 0000 00DF {
                 _SCAN_LED:
                 ; .FSTART _SCAN_LED
                 ; 0000 00E0     unsigned char   byte1,byte2,byte3;
                 ; 0000 00E1     byte1 = 0;
00013d 93aa      	ST   -Y,R26
00013e d362      	RCALL __SAVELOCR4
                 ;	num_led -> Y+5
                 ;	data -> Y+4
                 ;	byte1 -> R17
                 ;	byte2 -> R16
                 ;	byte3 -> R19
00013f e010      	LDI  R17,LOW(0)
                 ; 0000 00E2     byte2 = 0;
000140 e000      	LDI  R16,LOW(0)
                 ; 0000 00E3     byte3 = 0;
000141 e030      	LDI  R19,LOW(0)
                 ; 0000 00E4 
                 ; 0000 00E5     byte2 = (LED[num_led-1] >> 8) & 0xff;
000142 d239      	RCALL SUBOPT_0x5
000143 d357      	RCALL __GETW1P
000144 2fef      	MOV  R30,R31
000145 e0f0      	LDI  R31,0
000146 2f0e      	MOV  R16,R30
                 ; 0000 00E6     byte3 = LED[num_led-1] & 0xff;
000147 d234      	RCALL SUBOPT_0x5
000148 91ec      	LD   R30,X
000149 2f3e      	MOV  R19,R30
                 ; 0000 00E7     if(num_led == 2 || num_led == 6 || num_led == 10)   byte1 = 0x04;
00014a 81ad      	LDD  R26,Y+5
00014b 30a2      	CPI  R26,LOW(0x2)
00014c f021      	BREQ _0x61
00014d 30a6      	CPI  R26,LOW(0x6)
00014e f011      	BREQ _0x61
00014f 30aa      	CPI  R26,LOW(0xA)
000150 f409      	BRNE _0x60
                 _0x61:
000151 e014      	LDI  R17,LOW(4)
                 ; 0000 00E8     byte1 |= BCDLED[data];
                 _0x60:
000152 81ec      	LDD  R30,Y+4
000153 e0f0      	LDI  R31,0
000154 57ee      	SUBI R30,LOW(-_BCDLED)
000155 4ffe      	SBCI R31,HIGH(-_BCDLED)
000156 81e0      	LD   R30,Z
000157 2b1e      	OR   R17,R30
                 ; 0000 00E9     if(data == 10)
000158 81ac      	LDD  R26,Y+4
000159 30aa      	CPI  R26,LOW(0xA)
00015a f419      	BRNE _0x63
                 ; 0000 00EA     {
                 ; 0000 00EB         byte3 = 0;
00015b e030      	LDI  R19,LOW(0)
                 ; 0000 00EC         byte2 = 0;
00015c e000      	LDI  R16,LOW(0)
                 ; 0000 00ED         byte1 = 0;
00015d e010      	LDI  R17,LOW(0)
                 ; 0000 00EE     }
                 ; 0000 00EF     SEND_DATA_LED(byte1,byte2,byte3);
                 _0x63:
00015e 931a      	ST   -Y,R17
00015f 930a      	ST   -Y,R16
000160 2fa3      	MOV  R26,R19
000161 dfaa      	RCALL _SEND_DATA_LED
                 ; 0000 00F0 }
000162 d345      	RCALL __LOADLOCR4
000163 9626      	ADIW R28,6
000164 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;/*
                 ;Doc gia tri dong dien L1, L2 ,L3
                 ;Loai bo cac nhieu co bien do lon.
                 ;Lay trung binh cac gia tri con lai.
                 ;Cap nhat gia tri dong dien.
                 ;*/
                 ;void    Read_Current(void)
                 ; 0000 00FB {
                 _Read_Current:
                 ; .FSTART _Read_Current
                 ; 0000 00FC     unsigned int Uint_Tmp;
                 ; 0000 00FD     unsigned int Uint_CurrentTmp_Array[NUM_SAMPLE];
                 ; 0000 00FE     unsigned char   Uc_loop1_cnt,Uc_loop2_cnt;
                 ; 0000 00FF     unsigned int   Ul_Sum;
                 ; 0000 0100     unsigned long Ul_tmp;
                 ; 0000 0101 
                 ; 0000 0102     // Ul_tmp = ((unsigned long) Read_ADE7753(1,IRMS) * PHASE_1_SCALE)/100/IRMS_scale;
                 ; 0000 0103     Ul_tmp = ((unsigned long) Read_ADE7753(1,IRMS)/800);
000165 972e      	SBIW R28,14
000166 d338      	RCALL __SAVELOCR6
                 ;	Uint_Tmp -> R16,R17
                 ;	Uint_CurrentTmp_Array -> Y+10
                 ;	Uc_loop1_cnt -> R19
                 ;	Uc_loop2_cnt -> R18
                 ;	Ul_Sum -> R20,R21
                 ;	Ul_tmp -> Y+6
000167 d21e      	RCALL SUBOPT_0x6
000168 d220      	RCALL SUBOPT_0x7
                +
000169 e2e0     +LDI R30 , LOW ( 0x320 )
00016a e0f3     +LDI R31 , HIGH ( 0x320 )
00016b e060     +LDI R22 , BYTE3 ( 0x320 )
00016c e070     +LDI R23 , BYTE4 ( 0x320 )
                 	__GETD1N 0x320
00016d d222      	RCALL SUBOPT_0x8
                 ; 0000 0104     // if(Ul_tmp < 450 && Ul_tmp > 100)    Ul_tmp = Ul_tmp*1.1814146648 + Ul_tmp*Ul_tmp*0.0000095023 - Ul_tmp*Ul_tmp*Ul_ ...
                 ; 0000 0105     // else if(Ul_tmp >500 && Ul_tmp < 550)    Ul_tmp = Ul_tmp -(Ul_tmp-500)*15/50;
                 ; 0000 0106     // else if(Ul_tmp > 750)    Ul_tmp = Ul_tmp* 0.9553164373 - Ul_tmp*Ul_tmp*0.0000099864 + Ul_tmp*Ul_tmp*Ul_tmp*0.0000 ...
                 ; 0000 0107     //Ul_tmp = Ul_tmp + Ul_tmp*0.08;
                 ; 0000 0108     AI10__Current_L1[Uc_Current_Array_Cnt] = (unsigned int) (Ul_tmp);
00016e d228      	RCALL SUBOPT_0x9
00016f d22d      	RCALL SUBOPT_0xA
                 ; 0000 0109     // Ul_tmp = ((unsigned long) Read_ADE7753(2,IRMS) * PHASE_2_SCALE)/100/IRMS_scale;
                 ; 0000 010A     Ul_tmp = ((unsigned long) Read_ADE7753(2,IRMS)/1105);
000170 e0e2      	LDI  R30,LOW(2)
000171 93ea      	ST   -Y,R30
000172 d216      	RCALL SUBOPT_0x7
                +
000173 e5e1     +LDI R30 , LOW ( 0x451 )
000174 e0f4     +LDI R31 , HIGH ( 0x451 )
000175 e060     +LDI R22 , BYTE3 ( 0x451 )
000176 e070     +LDI R23 , BYTE4 ( 0x451 )
                 	__GETD1N 0x451
000177 d218      	RCALL SUBOPT_0x8
                 ; 0000 010B     AI10__Current_L2[Uc_Current_Array_Cnt] = (unsigned int) (Ul_tmp);
000178 d22b      	RCALL SUBOPT_0xB
000179 d223      	RCALL SUBOPT_0xA
                 ; 0000 010C     //Ul_tmp = ((unsigned long) Read_ADE7753(3,IRMS) * PHASE_3_SCALE)/100/IRMS_scale;
                 ; 0000 010D     Ul_tmp = ((unsigned long) Read_ADE7753(3,IRMS)/577);
00017a e0e3      	LDI  R30,LOW(3)
00017b 93ea      	ST   -Y,R30
00017c d20c      	RCALL SUBOPT_0x7
                +
00017d e4e1     +LDI R30 , LOW ( 0x241 )
00017e e0f2     +LDI R31 , HIGH ( 0x241 )
00017f e060     +LDI R22 , BYTE3 ( 0x241 )
000180 e070     +LDI R23 , BYTE4 ( 0x241 )
                 	__GETD1N 0x241
000181 d20e      	RCALL SUBOPT_0x8
                 ; 0000 010E     AI10__Current_L3[Uc_Current_Array_Cnt] = (unsigned int) (Ul_tmp);
000182 d227      	RCALL SUBOPT_0xC
000183 d219      	RCALL SUBOPT_0xA
                 ; 0000 010F 
                 ; 0000 0110     AI10_Current_Set = read_adc(0);
000184 e0a0      	LDI  R26,LOW(0)
000185 df77      	RCALL _read_adc
000186 d229      	RCALL SUBOPT_0xD
                 ; 0000 0111     AI10_Current_Set = AI10_Current_Set*(CURRENT_MAX_SET-CURRENT_MIN_SET)*100/1024 + CURRENT_MIN_SET*100;
000187 d22d      	RCALL SUBOPT_0xE
000188 e0e7      	LDI  R30,LOW(7)
000189 d2d0      	RCALL __MULB1W2U
00018a e6a4      	LDI  R26,LOW(100)
00018b e0b0      	LDI  R27,HIGH(100)
00018c d2c5      	RCALL __MULW12U
00018d d2ba      	RCALL __LSRW2
00018e 2fef      	MOV  R30,R31
00018f e0f0      	LDI  R31,0
000190 5ee0      	SUBI R30,LOW(-800)
000191 4ffc      	SBCI R31,HIGH(-800)
000192 d21d      	RCALL SUBOPT_0xD
                 ; 0000 0112 
                 ; 0000 0113     Uc_Current_Array_Cnt++;
000193 9463      	INC  R6
                 ; 0000 0114     if(Uc_Current_Array_Cnt >= NUM_SAMPLE)
000194 e0e5      	LDI  R30,LOW(5)
000195 166e      	CP   R6,R30
000196 f018      	BRLO _0x64
                 ; 0000 0115     {
                 ; 0000 0116         Bit_sample_full = 1;
000197 9468      	SET
000198 f823      	BLD  R2,3
                 ; 0000 0117         Uc_Current_Array_Cnt = 0;
000199 2466      	CLR  R6
                 ; 0000 0118     }
                 ; 0000 0119 
                 ; 0000 011A     if(Bit_sample_full == 0)
                 _0x64:
00019a fc23      	SBRC R2,3
00019b c007      	RJMP _0x65
                 ; 0000 011B     {
                 ; 0000 011C         Uint_dataLed1 = 0;
00019c 2488      	CLR  R8
00019d 2499      	CLR  R9
                 ; 0000 011D         Uint_dataLed2 = 0;
00019e 24aa      	CLR  R10
00019f 24bb      	CLR  R11
                 ; 0000 011E         Uint_dataLed3 = 0;
0001a0 24cc      	CLR  R12
0001a1 24dd      	CLR  R13
                 ; 0000 011F     }
                 ; 0000 0120     else
0001a2 c08e      	RJMP _0x66
                 _0x65:
                 ; 0000 0121     {
                 ; 0000 0122         /* Xu ly du lieu L1 */
                 ; 0000 0123         /* Chuyen sang bo nho dem*/
                 ; 0000 0124         for(Uc_loop1_cnt = 0; Uc_loop1_cnt<NUM_SAMPLE; Uc_loop1_cnt++)
0001a3 e030      	LDI  R19,LOW(0)
                 _0x68:
0001a4 3035      	CPI  R19,5
0001a5 f440      	BRSH _0x69
                 ; 0000 0125         {
                 ; 0000 0126             Uint_CurrentTmp_Array[Uc_loop1_cnt] = AI10__Current_L1[Uc_loop1_cnt];
0001a6 d213      	RCALL SUBOPT_0xF
0001a7 d219      	RCALL SUBOPT_0x10
0001a8 2fe3      	MOV  R30,R19
0001a9 d1ed      	RCALL SUBOPT_0x9
0001aa d21a      	RCALL SUBOPT_0x11
0001ab d21c      	RCALL SUBOPT_0x12
                 ; 0000 0127         }
0001ac 5f3f      	SUBI R19,-1
0001ad cff6      	RJMP _0x68
                 _0x69:
                 ; 0000 0128         /* Sắp xếp tu min-> max*/
                 ; 0000 0129         for(Uc_loop1_cnt = 0; Uc_loop1_cnt<NUM_SAMPLE; Uc_loop1_cnt++)
0001ae e030      	LDI  R19,LOW(0)
                 _0x6B:
0001af 3035      	CPI  R19,5
0001b0 f488      	BRSH _0x6C
                 ; 0000 012A         {
                 ; 0000 012B             for(Uc_loop2_cnt = Uc_loop1_cnt; Uc_loop2_cnt<NUM_SAMPLE; Uc_loop2_cnt++)
0001b1 2f23      	MOV  R18,R19
                 _0x6E:
0001b2 3025      	CPI  R18,5
0001b3 f460      	BRSH _0x6F
                 ; 0000 012C             {
                 ; 0000 012D                 if(Uint_CurrentTmp_Array[Uc_loop1_cnt] > Uint_CurrentTmp_Array[Uc_loop2_cnt])
0001b4 d205      	RCALL SUBOPT_0xF
0001b5 d217      	RCALL SUBOPT_0x13
0001b6 f438      	BRSH _0x70
                 ; 0000 012E                 {
                 ; 0000 012F                     Uint_Tmp = Uint_CurrentTmp_Array[Uc_loop1_cnt];
0001b7 d202      	RCALL SUBOPT_0xF
0001b8 d222      	RCALL SUBOPT_0x14
                 ; 0000 0130                     Uint_CurrentTmp_Array[Uc_loop1_cnt] = Uint_CurrentTmp_Array[Uc_loop2_cnt];
0001b9 d207      	RCALL SUBOPT_0x10
0001ba d224      	RCALL SUBOPT_0x15
0001bb d22a      	RCALL SUBOPT_0x16
                 ; 0000 0131                     Uint_CurrentTmp_Array[Uc_loop2_cnt] = Uint_Tmp;
0001bc d222      	RCALL SUBOPT_0x15
0001bd d22a      	RCALL SUBOPT_0x17
                 ; 0000 0132                 }
                 ; 0000 0133             }
                 _0x70:
0001be 5f2f      	SUBI R18,-1
0001bf cff2      	RJMP _0x6E
                 _0x6F:
                 ; 0000 0134         }
0001c0 5f3f      	SUBI R19,-1
0001c1 cfed      	RJMP _0x6B
                 _0x6C:
                 ; 0000 0135         /* Loc phan du lieu nhieu thap va cao */
                 ; 0000 0136         Ul_Sum = 0;
0001c2 d22a      	RCALL SUBOPT_0x18
                 ; 0000 0137         for(Uc_loop1_cnt = NUM_FILTER;Uc_loop1_cnt<(NUM_SAMPLE - NUM_FILTER); Uc_loop1_cnt++)
                 _0x72:
0001c3 3034      	CPI  R19,4
0001c4 f420      	BRSH _0x73
                 ; 0000 0138         {
                 ; 0000 0139             Ul_Sum += Uint_CurrentTmp_Array[Uc_loop1_cnt];
0001c5 d1f4      	RCALL SUBOPT_0xF
0001c6 d22a      	RCALL SUBOPT_0x19
                 ; 0000 013A         }
0001c7 5f3f      	SUBI R19,-1
0001c8 cffa      	RJMP _0x72
                 _0x73:
                 ; 0000 013B         Ul_Sum = Ul_Sum/(NUM_SAMPLE-2*NUM_FILTER);
0001c9 d22c      	RCALL SUBOPT_0x1A
                 ; 0000 013C         //if(Ul_Sum > 500)    Ul_Sum = Ul_Sum*1.263550988 + Ul_Sum*Ul_Sum*0.0000695432 - Ul_Sum*Ul_Sum*Ul_Sum*0.00000019 ...
                 ; 0000 013D         /* Xuat du lieu len led */
                 ; 0000 013E         Uint_dataLed1 = Ul_Sum;
0001ca 014a      	MOVW R8,R20
                 ; 0000 013F         if(AI10_Current_Set < Uint_dataLed1)    Bit_Warning_1 =1;
0001cb d1e9      	RCALL SUBOPT_0xE
0001cc 15a8      	CP   R26,R8
0001cd 05b9      	CPC  R27,R9
0001ce f410      	BRSH _0x74
0001cf 9468      	SET
0001d0 c001      	RJMP _0x9A
                 ; 0000 0140         else Bit_Warning_1 = 0;
                 _0x74:
0001d1 94e8      	CLT
                 _0x9A:
0001d2 f820      	BLD  R2,0
                 ; 0000 0141 
                 ; 0000 0142         /* Xu ly du lieu L2 */
                 ; 0000 0143         /* Chuyen sang bo nho dem*/
                 ; 0000 0144         for(Uc_loop1_cnt = 0; Uc_loop1_cnt<NUM_SAMPLE; Uc_loop1_cnt++)
0001d3 e030      	LDI  R19,LOW(0)
                 _0x77:
0001d4 3035      	CPI  R19,5
0001d5 f438      	BRSH _0x78
                 ; 0000 0145         {
                 ; 0000 0146             Uint_CurrentTmp_Array[Uc_loop1_cnt] = AI10__Current_L2[Uc_loop1_cnt];
0001d6 d1e3      	RCALL SUBOPT_0xF
0001d7 d1e9      	RCALL SUBOPT_0x10
0001d8 2fe3      	MOV  R30,R19
0001d9 d1ca      	RCALL SUBOPT_0xB
0001da d20b      	RCALL SUBOPT_0x16
                 ; 0000 0147         }
0001db 5f3f      	SUBI R19,-1
0001dc cff7      	RJMP _0x77
                 _0x78:
                 ; 0000 0148         /* Sắp xếp tu min-> max*/
                 ; 0000 0149         for(Uc_loop1_cnt = 0; Uc_loop1_cnt<NUM_SAMPLE; Uc_loop1_cnt++)
0001dd e030      	LDI  R19,LOW(0)
                 _0x7A:
0001de 3035      	CPI  R19,5
0001df f488      	BRSH _0x7B
                 ; 0000 014A         {
                 ; 0000 014B             for(Uc_loop2_cnt = Uc_loop1_cnt; Uc_loop2_cnt<NUM_SAMPLE; Uc_loop2_cnt++)
0001e0 2f23      	MOV  R18,R19
                 _0x7D:
0001e1 3025      	CPI  R18,5
0001e2 f460      	BRSH _0x7E
                 ; 0000 014C             {
                 ; 0000 014D                 if(Uint_CurrentTmp_Array[Uc_loop1_cnt] > Uint_CurrentTmp_Array[Uc_loop2_cnt])
0001e3 d1d6      	RCALL SUBOPT_0xF
0001e4 d1e8      	RCALL SUBOPT_0x13
0001e5 f438      	BRSH _0x7F
                 ; 0000 014E                 {
                 ; 0000 014F                     Uint_Tmp = Uint_CurrentTmp_Array[Uc_loop1_cnt];
0001e6 d1d3      	RCALL SUBOPT_0xF
0001e7 d1f3      	RCALL SUBOPT_0x14
                 ; 0000 0150                     Uint_CurrentTmp_Array[Uc_loop1_cnt] = Uint_CurrentTmp_Array[Uc_loop2_cnt];
0001e8 d1d8      	RCALL SUBOPT_0x10
0001e9 d1f5      	RCALL SUBOPT_0x15
0001ea d1fb      	RCALL SUBOPT_0x16
                 ; 0000 0151                     Uint_CurrentTmp_Array[Uc_loop2_cnt] = Uint_Tmp;
0001eb d1f3      	RCALL SUBOPT_0x15
0001ec d1fb      	RCALL SUBOPT_0x17
                 ; 0000 0152                 }
                 ; 0000 0153             }
                 _0x7F:
0001ed 5f2f      	SUBI R18,-1
0001ee cff2      	RJMP _0x7D
                 _0x7E:
                 ; 0000 0154         }
0001ef 5f3f      	SUBI R19,-1
0001f0 cfed      	RJMP _0x7A
                 _0x7B:
                 ; 0000 0155 
                 ; 0000 0156         /* Loc phan du lieu nhieu thap va cao */
                 ; 0000 0157         Ul_Sum = 0;
0001f1 d1fb      	RCALL SUBOPT_0x18
                 ; 0000 0158         for(Uc_loop1_cnt = NUM_FILTER;Uc_loop1_cnt<(NUM_SAMPLE - NUM_FILTER); Uc_loop1_cnt++)
                 _0x81:
0001f2 3034      	CPI  R19,4
0001f3 f420      	BRSH _0x82
                 ; 0000 0159         {
                 ; 0000 015A             Ul_Sum += Uint_CurrentTmp_Array[Uc_loop1_cnt];
0001f4 d1c5      	RCALL SUBOPT_0xF
0001f5 d1fb      	RCALL SUBOPT_0x19
                 ; 0000 015B         }
0001f6 5f3f      	SUBI R19,-1
0001f7 cffa      	RJMP _0x81
                 _0x82:
                 ; 0000 015C         Ul_Sum = Ul_Sum/(NUM_SAMPLE-2*NUM_FILTER);
0001f8 d1fd      	RCALL SUBOPT_0x1A
                 ; 0000 015D         /* Xuat du lieu len led */
                 ; 0000 015E         Uint_dataLed2 = Ul_Sum;
0001f9 015a      	MOVW R10,R20
                 ; 0000 015F         if(AI10_Current_Set < Uint_dataLed2)    Bit_Warning_2 =1;
0001fa d1ba      	RCALL SUBOPT_0xE
0001fb 15aa      	CP   R26,R10
0001fc 05bb      	CPC  R27,R11
0001fd f410      	BRSH _0x83
0001fe 9468      	SET
0001ff c001      	RJMP _0x9B
                 ; 0000 0160         else Bit_Warning_2 = 0;
                 _0x83:
000200 94e8      	CLT
                 _0x9B:
000201 f821      	BLD  R2,1
                 ; 0000 0161 
                 ; 0000 0162         /* Xu ly du lieu L3 */
                 ; 0000 0163         /* Chuyen sang bo nho dem*/
                 ; 0000 0164         for(Uc_loop1_cnt = 0; Uc_loop1_cnt<NUM_SAMPLE; Uc_loop1_cnt++)
000202 e030      	LDI  R19,LOW(0)
                 _0x86:
000203 3035      	CPI  R19,5
000204 f438      	BRSH _0x87
                 ; 0000 0165         {
                 ; 0000 0166             Uint_CurrentTmp_Array[Uc_loop1_cnt] = AI10__Current_L3[Uc_loop1_cnt];
000205 d1b4      	RCALL SUBOPT_0xF
000206 d1ba      	RCALL SUBOPT_0x10
000207 2fe3      	MOV  R30,R19
000208 d1a1      	RCALL SUBOPT_0xC
000209 d1dc      	RCALL SUBOPT_0x16
                 ; 0000 0167         }
00020a 5f3f      	SUBI R19,-1
00020b cff7      	RJMP _0x86
                 _0x87:
                 ; 0000 0168         /* Sắp xếp tu min-> max*/
                 ; 0000 0169         for(Uc_loop1_cnt = 0; Uc_loop1_cnt<NUM_SAMPLE; Uc_loop1_cnt++)
00020c e030      	LDI  R19,LOW(0)
                 _0x89:
00020d 3035      	CPI  R19,5
00020e f488      	BRSH _0x8A
                 ; 0000 016A         {
                 ; 0000 016B             for(Uc_loop2_cnt = Uc_loop1_cnt; Uc_loop2_cnt<NUM_SAMPLE; Uc_loop2_cnt++)
00020f 2f23      	MOV  R18,R19
                 _0x8C:
000210 3025      	CPI  R18,5
000211 f460      	BRSH _0x8D
                 ; 0000 016C             {
                 ; 0000 016D                 if(Uint_CurrentTmp_Array[Uc_loop1_cnt] > Uint_CurrentTmp_Array[Uc_loop2_cnt])
000212 d1a7      	RCALL SUBOPT_0xF
000213 d1b9      	RCALL SUBOPT_0x13
000214 f438      	BRSH _0x8E
                 ; 0000 016E                 {
                 ; 0000 016F                     Uint_Tmp = Uint_CurrentTmp_Array[Uc_loop1_cnt];
000215 d1a4      	RCALL SUBOPT_0xF
000216 d1c4      	RCALL SUBOPT_0x14
                 ; 0000 0170                     Uint_CurrentTmp_Array[Uc_loop1_cnt] = Uint_CurrentTmp_Array[Uc_loop2_cnt];
000217 d1a9      	RCALL SUBOPT_0x10
000218 d1c6      	RCALL SUBOPT_0x15
000219 d1cc      	RCALL SUBOPT_0x16
                 ; 0000 0171                     Uint_CurrentTmp_Array[Uc_loop2_cnt] = Uint_Tmp;
00021a d1c4      	RCALL SUBOPT_0x15
00021b d1cc      	RCALL SUBOPT_0x17
                 ; 0000 0172                 }
                 ; 0000 0173             }
                 _0x8E:
00021c 5f2f      	SUBI R18,-1
00021d cff2      	RJMP _0x8C
                 _0x8D:
                 ; 0000 0174         }
00021e 5f3f      	SUBI R19,-1
00021f cfed      	RJMP _0x89
                 _0x8A:
                 ; 0000 0175         /* Loc phan du lieu nhieu thap va cao */
                 ; 0000 0176         Ul_Sum = 0;
000220 d1cc      	RCALL SUBOPT_0x18
                 ; 0000 0177         for(Uc_loop1_cnt = NUM_FILTER;Uc_loop1_cnt<(NUM_SAMPLE - NUM_FILTER); Uc_loop1_cnt++)
                 _0x90:
000221 3034      	CPI  R19,4
000222 f420      	BRSH _0x91
                 ; 0000 0178         {
                 ; 0000 0179             Ul_Sum += Uint_CurrentTmp_Array[Uc_loop1_cnt];
000223 d196      	RCALL SUBOPT_0xF
000224 d1cc      	RCALL SUBOPT_0x19
                 ; 0000 017A         }
000225 5f3f      	SUBI R19,-1
000226 cffa      	RJMP _0x90
                 _0x91:
                 ; 0000 017B         Ul_Sum = Ul_Sum/(NUM_SAMPLE-2*NUM_FILTER);
000227 d1ce      	RCALL SUBOPT_0x1A
                 ; 0000 017C         /* Xuat du lieu len led */
                 ; 0000 017D         Uint_dataLed3 = Ul_Sum;
000228 016a      	MOVW R12,R20
                 ; 0000 017E         if(AI10_Current_Set < Uint_dataLed3)    Bit_Warning_3 =1;
000229 d18b      	RCALL SUBOPT_0xE
00022a 15ac      	CP   R26,R12
00022b 05bd      	CPC  R27,R13
00022c f410      	BRSH _0x92
00022d 9468      	SET
00022e c001      	RJMP _0x9C
                 ; 0000 017F         else Bit_Warning_3 = 0;
                 _0x92:
00022f 94e8      	CLT
                 _0x9C:
000230 f822      	BLD  R2,2
                 ; 0000 0180     }
                 _0x66:
                 ; 0000 0181 }
000231 d274      	RCALL __LOADLOCR6
000232 9664      	ADIW R28,20
000233 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0184 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0185 // Declare your local variables here
                 ; 0000 0186 // Input/Output Ports initialization
                 ; 0000 0187 // Port B initialization
                 ; 0000 0188 // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=Out Bit2=In Bit1=Out Bit0=In
                 ; 0000 0189 DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (0<<DDB2) | (1<<DDB1) | (0<<DDB0);
000234 e3ea      	LDI  R30,LOW(58)
000235 bbe7      	OUT  0x17,R30
                 ; 0000 018A // State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=0 Bit2=T Bit1=0 Bit0=T
                 ; 0000 018B PORTB=(0<<PORTB7) | (0<<PORTB6) | (1<<PORTB5) | (0<<PORTB4) | (1<<PORTB3) | (0<<PORTB2) | (1<<PORTB1) | (0<<PORTB0);
000236 e2ea      	LDI  R30,LOW(42)
000237 bbe8      	OUT  0x18,R30
                 ; 0000 018C 
                 ; 0000 018D // Port C initialization
                 ; 0000 018E // Function: Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=In Bit0=In
                 ; 0000 018F DDRC=(0<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (0<<DDC1) | (0<<DDC0);
000238 e3ec      	LDI  R30,LOW(60)
000239 bbe4      	OUT  0x14,R30
                 ; 0000 0190 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0191 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00023a e0e0      	LDI  R30,LOW(0)
00023b bbe5      	OUT  0x15,R30
                 ; 0000 0192 
                 ; 0000 0193 // Port D initialization
                 ; 0000 0194 // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=Out
                 ; 0000 0195 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (1<<DDD4) | (0<<DDD3) | (0<<DDD2) | (1<<DDD1) | (0<<DDD0);
00023c e1e2      	LDI  R30,LOW(18)
00023d bbe1      	OUT  0x11,R30
                 ; 0000 0196 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0197 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00023e e0e0      	LDI  R30,LOW(0)
00023f bbe2      	OUT  0x12,R30
                 ; 0000 0198 
                 ; 0000 0199 // Timer/Counter 0 initialization
                 ; 0000 019A // Clock source: System Clock
                 ; 0000 019B // Clock value: Timer 0 Stopped
                 ; 0000 019C TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
000240 bfe3      	OUT  0x33,R30
                 ; 0000 019D TCNT0=0x94;
000241 e9e4      	LDI  R30,LOW(148)
000242 bfe2      	OUT  0x32,R30
                 ; 0000 019E 
                 ; 0000 019F // Timer/Counter 1 initialization
                 ; 0000 01A0 // Clock source: System Clock
                 ; 0000 01A1 // Clock value: 11059.200 kHz
                 ; 0000 01A2 // Mode: Normal top=0xFFFF
                 ; 0000 01A3 // OC1A output: Disconnected
                 ; 0000 01A4 // OC1B output: Disconnected
                 ; 0000 01A5 // Noise Canceler: Off
                 ; 0000 01A6 // Input Capture on Falling Edge
                 ; 0000 01A7 // Timer Period: 2 ms
                 ; 0000 01A8 // Timer1 Overflow Interrupt: On
                 ; 0000 01A9 // Input Capture Interrupt: Off
                 ; 0000 01AA // Compare A Match Interrupt: Off
                 ; 0000 01AB // Compare B Match Interrupt: Off
                 ; 0000 01AC TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000243 e0e0      	LDI  R30,LOW(0)
000244 bdef      	OUT  0x2F,R30
                 ; 0000 01AD TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
000245 e0e1      	LDI  R30,LOW(1)
000246 bdee      	OUT  0x2E,R30
                 ; 0000 01AE TCNT1H=0xA9;
000247 eae9      	LDI  R30,LOW(169)
000248 bded      	OUT  0x2D,R30
                 ; 0000 01AF TCNT1L=0x9A;
000249 e9ea      	LDI  R30,LOW(154)
00024a bdec      	OUT  0x2C,R30
                 ; 0000 01B0 ICR1H=0x00;
00024b e0e0      	LDI  R30,LOW(0)
00024c bde7      	OUT  0x27,R30
                 ; 0000 01B1 ICR1L=0x00;
00024d bde6      	OUT  0x26,R30
                 ; 0000 01B2 OCR1AH=0x00;
00024e bdeb      	OUT  0x2B,R30
                 ; 0000 01B3 OCR1AL=0x00;
00024f bdea      	OUT  0x2A,R30
                 ; 0000 01B4 OCR1BH=0x00;
000250 bde9      	OUT  0x29,R30
                 ; 0000 01B5 OCR1BL=0x00;
000251 bde8      	OUT  0x28,R30
                 ; 0000 01B6 
                 ; 0000 01B7 // Timer/Counter 2 initialization
                 ; 0000 01B8 // Clock source: System Clock
                 ; 0000 01B9 // Clock value: Timer2 Stopped
                 ; 0000 01BA // Mode: Normal top=0xFF
                 ; 0000 01BB // OC2 output: Disconnected
                 ; 0000 01BC ASSR=0<<AS2;
000252 bde2      	OUT  0x22,R30
                 ; 0000 01BD TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000253 bde5      	OUT  0x25,R30
                 ; 0000 01BE TCNT2=0x00;
000254 bde4      	OUT  0x24,R30
                 ; 0000 01BF OCR2=0x00;
000255 bde3      	OUT  0x23,R30
                 ; 0000 01C0 
                 ; 0000 01C1 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 01C2 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<TOIE0);
000256 e0e4      	LDI  R30,LOW(4)
000257 bfe9      	OUT  0x39,R30
                 ; 0000 01C3 
                 ; 0000 01C4 // External Interrupt(s) initialization
                 ; 0000 01C5 // INT0: Off
                 ; 0000 01C6 // INT1: Off
                 ; 0000 01C7 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000258 e0e0      	LDI  R30,LOW(0)
000259 bfe5      	OUT  0x35,R30
                 ; 0000 01C8 
                 ; 0000 01C9 // USART initialization
                 ; 0000 01CA // USART disabled
                 ; 0000 01CB UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
00025a b9ea      	OUT  0xA,R30
                 ; 0000 01CC 
                 ; 0000 01CD // Analog Comparator initialization
                 ; 0000 01CE // Analog Comparator: Off
                 ; 0000 01CF // The Analog Comparator's positive input is
                 ; 0000 01D0 // connected to the AIN0 pin
                 ; 0000 01D1 // The Analog Comparator's negative input is
                 ; 0000 01D2 // connected to the AIN1 pin
                 ; 0000 01D3 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00025b e8e0      	LDI  R30,LOW(128)
00025c b9e8      	OUT  0x8,R30
                 ; 0000 01D4 
                 ; 0000 01D5 // ADC initialization
                 ; 0000 01D6 // ADC Clock frequency: 345.600 kHz
                 ; 0000 01D7 // ADC Voltage Reference: AREF pin
                 ; 0000 01D8 ADMUX=ADC_VREF_TYPE;
00025d e4e0      	LDI  R30,LOW(64)
00025e b9e7      	OUT  0x7,R30
                 ; 0000 01D9 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
00025f e8e5      	LDI  R30,LOW(133)
000260 b9e6      	OUT  0x6,R30
                 ; 0000 01DA SFIOR=(0<<ACME);
000261 e0e0      	LDI  R30,LOW(0)
000262 bfe0      	OUT  0x30,R30
                 ; 0000 01DB 
                 ; 0000 01DC // SPI initialization
                 ; 0000 01DD // SPI disabled
                 ; 0000 01DE SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000263 b9ed      	OUT  0xD,R30
                 ; 0000 01DF 
                 ; 0000 01E0 // TWI initialization
                 ; 0000 01E1 // TWI disabled
                 ; 0000 01E2 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000264 bfe6      	OUT  0x36,R30
                 ; 0000 01E3 
                 ; 0000 01E4 // Global enable interrupts
                 ; 0000 01E5 #asm("sei")
000265 9478      	sei
                 ; 0000 01E6 Uint_dataLed1 = 1234;
000266 ede2      	LDI  R30,LOW(1234)
000267 e0f4      	LDI  R31,HIGH(1234)
000268 014f      	MOVW R8,R30
                 ; 0000 01E7 Uint_dataLed2 = 2345;
000269 e2e9      	LDI  R30,LOW(2345)
00026a e0f9      	LDI  R31,HIGH(2345)
00026b 015f      	MOVW R10,R30
                 ; 0000 01E8 Uint_dataLed3 = 8818;
00026c e7e2      	LDI  R30,LOW(8818)
00026d e2f2      	LDI  R31,HIGH(8818)
00026e 016f      	MOVW R12,R30
                 ; 0000 01E9 ADE_7753_init();
00026f d0bf      	RCALL _ADE_7753_init
                 ; 0000 01EA Bit_Warning_1 =1;
000270 9468      	SET
000271 f820      	BLD  R2,0
                 ; 0000 01EB delay_ms(100);
000272 e6a4      	LDI  R26,LOW(100)
000273 e0b0      	LDI  R27,0
000274 d1b8      	RCALL _delay_ms
                 ; 0000 01EC Bit_Warning_1 = 0;
000275 94e8      	CLT
000276 f820      	BLD  R2,0
                 ; 0000 01ED while (1)
                 _0x94:
                 ; 0000 01EE     {
                 ; 0000 01EF         Read_Current();
000277 deed      	RCALL _Read_Current
                 ; 0000 01F0         delay_ms(500);
000278 d183      	RCALL SUBOPT_0x1B
                 ; 0000 01F1     }
000279 cffd      	RJMP _0x94
                 ; 0000 01F2 }
                 _0x97:
00027a cfff      	RJMP _0x97
                 ; .FEND
                 ;#include "ADE7753.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "delay.h"
                 ;
                 ;
                 ;void    Send_cmd_ADE7753(unsigned char data)
                 ; 0001 0006 {
                 
                 	.CSEG
                 _Send_cmd_ADE7753:
                 ; .FSTART _Send_cmd_ADE7753
                 ; 0001 0007     unsigned char cnt;
                 ; 0001 0008     unsigned char   tmp = data;
                 ; 0001 0009     for(cnt = 0;cnt < 8; cnt++)
00027b 93aa      	ST   -Y,R26
00027c d226      	RCALL __SAVELOCR2
                 ;	data -> Y+2
                 ;	cnt -> R17
                 ;	tmp -> R16
00027d 810a      	LDD  R16,Y+2
00027e e010      	LDI  R17,LOW(0)
                 _0x20004:
00027f 3018      	CPI  R17,8
000280 f448      	BRSH _0x20005
                 ; 0001 000A     {
                 ; 0001 000B         if((tmp & 0x80) == 0x80)   DOUT_MOSI_SPI_7753_MCU = 1;
000281 d0ec      	RCALL SUBOPT_0x3
000282 f411      	BRNE _0x20006
000283 9a91      	SBI  0x12,1
                 ; 0001 000C         else DOUT_MOSI_SPI_7753_MCU = 0;
000284 c001      	RJMP _0x20009
                 _0x20006:
000285 9891      	CBI  0x12,1
                 ; 0001 000D 
                 ; 0001 000E         tmp <<= 1;
                 _0x20009:
000286 d178      	RCALL SUBOPT_0x1C
                 ; 0001 000F         DOUT_CLK_SPI_7753_MCU = 1;
                 ; 0001 0010         delay_us(40);
                 ; 0001 0011         DOUT_CLK_SPI_7753_MCU = 0;
000287 d17d      	RCALL SUBOPT_0x1D
                 ; 0001 0012         delay_us(40);
                 ; 0001 0013     }
000288 5f1f      	SUBI R17,-1
000289 cff5      	RJMP _0x20004
                 _0x20005:
                 ; 0001 0014 }
00028a d21f      	RCALL __LOADLOCR2
00028b 9623      	ADIW R28,3
00028c 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char    Read_data_ADE7753(void)
                 ; 0001 0017 {
                 _Read_data_ADE7753:
                 ; .FSTART _Read_data_ADE7753
                 ; 0001 0018     unsigned char cnt;
                 ; 0001 0019     unsigned char data;
                 ; 0001 001A     data = 0;
00028d d215      	RCALL __SAVELOCR2
                 ;	cnt -> R17
                 ;	data -> R16
00028e e000      	LDI  R16,LOW(0)
                 ; 0001 001B     for(cnt = 0;cnt < 8; cnt++)
00028f e010      	LDI  R17,LOW(0)
                 _0x20011:
000290 3018      	CPI  R17,8
000291 f430      	BRSH _0x20012
                 ; 0001 001C     {
                 ; 0001 001D         data <<= 1;
000292 d16c      	RCALL SUBOPT_0x1C
                 ; 0001 001E         DOUT_CLK_SPI_7753_MCU = 1;
                 ; 0001 001F         delay_us(40);
                 ; 0001 0020         if(DIN_MISO_SPI_7753_MCU == 1)   data += 1;
000293 9980      	SBIC 0x10,0
000294 5f0f      	SUBI R16,-LOW(1)
                 ; 0001 0021         DOUT_CLK_SPI_7753_MCU = 0;
000295 d16f      	RCALL SUBOPT_0x1D
                 ; 0001 0022         delay_us(40);
                 ; 0001 0023 
                 ; 0001 0024     }
000296 5f1f      	SUBI R17,-1
000297 cff8      	RJMP _0x20011
                 _0x20012:
                 ; 0001 0025     return data;
000298 2fe0      	MOV  R30,R16
000299 c0c3      	RJMP _0x2000001
                 ; 0001 0026 }
                 ; .FEND
                 ;
                 ;void    Write_ADE7753(unsigned char IC_CS,unsigned char addr,unsigned char num_data,unsigned char data_1,unsigned char d ...
                 ; 0001 0029 {
                 _Write_ADE7753:
                 ; .FSTART _Write_ADE7753
                 ; 0001 002A     unsigned char data[4];
                 ; 0001 002B     unsigned char   i;
                 ; 0001 002C     data[0] = data_1;
00029a 93aa      	ST   -Y,R26
00029b 9724      	SBIW R28,4
00029c 931a      	ST   -Y,R17
                 ;	IC_CS -> Y+10
                 ;	addr -> Y+9
                 ;	num_data -> Y+8
                 ;	data_1 -> Y+7
                 ;	data_2 -> Y+6
                 ;	data_3 -> Y+5
                 ;	data -> Y+1
                 ;	i -> R17
00029d 81ef      	LDD  R30,Y+7
00029e 83e9      	STD  Y+1,R30
                 ; 0001 002D     data[1] = data_2;
00029f 81ee      	LDD  R30,Y+6
0002a0 83ea      	STD  Y+2,R30
                 ; 0001 002E     data[2] = data_3;
0002a1 81ed      	LDD  R30,Y+5
0002a2 83eb      	STD  Y+3,R30
                 ; 0001 002F 
                 ; 0001 0030     switch (IC_CS)
0002a3 85ea      	LDD  R30,Y+10
0002a4 d165      	RCALL SUBOPT_0x1E
                 ; 0001 0031     {
                 ; 0001 0032         case 1:
0002a5 f419      	BRNE _0x2001B
                 ; 0001 0033         {
                 ; 0001 0034             PHASE_1_ON;
0002a6 9aac      	SBI  0x15,4
                 ; 0001 0035             PHASE_2_OFF;
0002a7 d167      	RCALL SUBOPT_0x1F
                 ; 0001 0036             PHASE_3_OFF;
                 ; 0001 0037             break;
0002a8 c00f      	RJMP _0x2001A
                 ; 0001 0038         }
                 ; 0001 0039         case 2:
                 _0x2001B:
0002a9 30e2      	CPI  R30,LOW(0x2)
0002aa e0a0      	LDI  R26,HIGH(0x2)
0002ab 07fa      	CPC  R31,R26
0002ac f421      	BRNE _0x20022
                 ; 0001 003A         {
                 ; 0001 003B             PHASE_1_OFF;
0002ad 98ac      	CBI  0x15,4
                 ; 0001 003C             PHASE_2_ON;
0002ae 9aad      	SBI  0x15,5
                 ; 0001 003D             PHASE_3_OFF;
0002af 98ab      	CBI  0x15,3
                 ; 0001 003E             break;
0002b0 c007      	RJMP _0x2001A
                 ; 0001 003F         }
                 ; 0001 0040         case 3:
                 _0x20022:
0002b1 30e3      	CPI  R30,LOW(0x3)
0002b2 e0a0      	LDI  R26,HIGH(0x3)
0002b3 07fa      	CPC  R31,R26
0002b4 f419      	BRNE _0x2001A
                 ; 0001 0041         {
                 ; 0001 0042             PHASE_1_OFF;
0002b5 98ac      	CBI  0x15,4
                 ; 0001 0043             PHASE_2_OFF;
0002b6 98ad      	CBI  0x15,5
                 ; 0001 0044             PHASE_3_ON;
0002b7 9aab      	SBI  0x15,3
                 ; 0001 0045             break;
                 ; 0001 0046         }
                 ; 0001 0047     }
                 _0x2001A:
                 ; 0001 0048     addr |= 0x80;
0002b8 85e9      	LDD  R30,Y+9
0002b9 68e0      	ORI  R30,0x80
0002ba 87e9      	STD  Y+9,R30
                 ; 0001 0049     Send_cmd_ADE7753(addr);
0002bb 85a9      	LDD  R26,Y+9
0002bc dfbe      	RCALL _Send_cmd_ADE7753
                 ; 0001 004A     delay_us(20);
                +
0002bd e48a     +LDI R24 , LOW ( 74 )
                +__DELAY_USB_LOOP :
0002be 958a     +DEC R24
0002bf f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 74
                 ; 0001 004B     for(i=0;i<num_data;i++)    Send_cmd_ADE7753(data[i]);
0002c0 e010      	LDI  R17,LOW(0)
                 _0x20031:
0002c1 85e8      	LDD  R30,Y+8
0002c2 171e      	CP   R17,R30
0002c3 f440      	BRSH _0x20032
0002c4 d14d      	RCALL SUBOPT_0x20
0002c5 01de      	MOVW R26,R28
0002c6 9611      	ADIW R26,1
0002c7 d0fd      	RCALL SUBOPT_0x11
0002c8 91ac      	LD   R26,X
0002c9 dfb1      	RCALL _Send_cmd_ADE7753
0002ca 5f1f      	SUBI R17,-1
0002cb cff5      	RJMP _0x20031
                 _0x20032:
                 ; 0001 004C PORTC.4 = 0;
0002cc 98ac      	CBI  0x15,4
                 ; 0001 004D     PHASE_2_OFF;
0002cd d141      	RCALL SUBOPT_0x1F
                 ; 0001 004E     PHASE_3_OFF;
                 ; 0001 004F }
0002ce 8118      	LDD  R17,Y+0
0002cf 962b      	ADIW R28,11
0002d0 9508      	RET
                 ; .FEND
                 ;unsigned long    Read_ADE7753(unsigned char IC_CS,unsigned char addr,unsigned char num_data)
                 ; 0001 0051 {
                 _Read_ADE7753:
                 ; .FSTART _Read_ADE7753
                 ; 0001 0052     unsigned char   i;
                 ; 0001 0053     unsigned char   data[4];
                 ; 0001 0054     unsigned long int res;
                 ; 0001 0055     for(i=0;i<4;i++)    data[i] = 0;
0002d1 93aa      	ST   -Y,R26
0002d2 9728      	SBIW R28,8
0002d3 931a      	ST   -Y,R17
                 ;	IC_CS -> Y+11
                 ;	addr -> Y+10
                 ;	num_data -> Y+9
                 ;	i -> R17
                 ;	data -> Y+5
                 ;	res -> Y+1
0002d4 e010      	LDI  R17,LOW(0)
                 _0x2003A:
0002d5 3014      	CPI  R17,4
0002d6 f440      	BRSH _0x2003B
0002d7 d13a      	RCALL SUBOPT_0x20
0002d8 01de      	MOVW R26,R28
0002d9 9615      	ADIW R26,5
0002da d0ea      	RCALL SUBOPT_0x11
0002db e0e0      	LDI  R30,LOW(0)
0002dc 93ec      	ST   X,R30
0002dd 5f1f      	SUBI R17,-1
0002de cff6      	RJMP _0x2003A
                 _0x2003B:
                 ; 0001 0056 switch (IC_CS)
0002df 85eb      	LDD  R30,Y+11
0002e0 d129      	RCALL SUBOPT_0x1E
                 ; 0001 0057     {
                 ; 0001 0058         case 1:
0002e1 f419      	BRNE _0x2003F
                 ; 0001 0059         {
                 ; 0001 005A             PHASE_1_ON;
0002e2 9aac      	SBI  0x15,4
                 ; 0001 005B             PHASE_2_OFF;
0002e3 d12b      	RCALL SUBOPT_0x1F
                 ; 0001 005C             PHASE_3_OFF;
                 ; 0001 005D             break;
0002e4 c00f      	RJMP _0x2003E
                 ; 0001 005E         }
                 ; 0001 005F         case 2:
                 _0x2003F:
0002e5 30e2      	CPI  R30,LOW(0x2)
0002e6 e0a0      	LDI  R26,HIGH(0x2)
0002e7 07fa      	CPC  R31,R26
0002e8 f421      	BRNE _0x20046
                 ; 0001 0060         {
                 ; 0001 0061             PHASE_1_OFF;
0002e9 98ac      	CBI  0x15,4
                 ; 0001 0062             PHASE_2_ON;
0002ea 9aad      	SBI  0x15,5
                 ; 0001 0063             PHASE_3_OFF;
0002eb 98ab      	CBI  0x15,3
                 ; 0001 0064             break;
0002ec c007      	RJMP _0x2003E
                 ; 0001 0065         }
                 ; 0001 0066         case 3:
                 _0x20046:
0002ed 30e3      	CPI  R30,LOW(0x3)
0002ee e0a0      	LDI  R26,HIGH(0x3)
0002ef 07fa      	CPC  R31,R26
0002f0 f419      	BRNE _0x2003E
                 ; 0001 0067         {
                 ; 0001 0068             PHASE_1_OFF;
0002f1 98ac      	CBI  0x15,4
                 ; 0001 0069             PHASE_2_OFF;
0002f2 98ad      	CBI  0x15,5
                 ; 0001 006A             PHASE_3_ON;
0002f3 9aab      	SBI  0x15,3
                 ; 0001 006B             break;
                 ; 0001 006C         }
                 ; 0001 006D     }
                 _0x2003E:
                 ; 0001 006E     delay_ms(10);
0002f4 e0aa      	LDI  R26,LOW(10)
0002f5 e0b0      	LDI  R27,0
0002f6 d136      	RCALL _delay_ms
                 ; 0001 006F     addr &= 0x3F;
0002f7 85ea      	LDD  R30,Y+10
0002f8 73ef      	ANDI R30,LOW(0x3F)
0002f9 87ea      	STD  Y+10,R30
                 ; 0001 0070     Send_cmd_ADE7753(addr);
0002fa 85aa      	LDD  R26,Y+10
0002fb df7f      	RCALL _Send_cmd_ADE7753
                 ; 0001 0071     for(i=0;i<num_data;i++) data[i] = Read_data_ADE7753();
0002fc e010      	LDI  R17,LOW(0)
                 _0x20055:
0002fd 85e9      	LDD  R30,Y+9
0002fe 171e      	CP   R17,R30
0002ff f468      	BRSH _0x20056
000300 d111      	RCALL SUBOPT_0x20
000301 01de      	MOVW R26,R28
000302 9615      	ADIW R26,5
000303 0fea      	ADD  R30,R26
000304 1ffb      	ADC  R31,R27
000305 93ff      	PUSH R31
000306 93ef      	PUSH R30
000307 df85      	RCALL _Read_data_ADE7753
000308 91af      	POP  R26
000309 91bf      	POP  R27
00030a 93ec      	ST   X,R30
00030b 5f1f      	SUBI R17,-1
00030c cff0      	RJMP _0x20055
                 _0x20056:
                 ; 0001 0072 PORTC.4 = 0;
00030d 98ac      	CBI  0x15,4
                 ; 0001 0073     PHASE_2_OFF;
00030e d100      	RCALL SUBOPT_0x1F
                 ; 0001 0074     PHASE_3_OFF;
                 ; 0001 0075     res = 0;
00030f e0e0      	LDI  R30,LOW(0)
                +
000310 83e9     +STD Y + 1 , R30
000311 83ea     +STD Y + 1 + 1 , R30
000312 83eb     +STD Y + 1 + 2 , R30
000313 83ec     +STD Y + 1 + 3 , R30
                 	__CLRD1S 1
                 ; 0001 0076     for(i=0;i<num_data;i++)
000314 e010      	LDI  R17,LOW(0)
                 _0x2005E:
000315 85e9      	LDD  R30,Y+9
000316 171e      	CP   R17,R30
000317 f480      	BRSH _0x2005F
                 ; 0001 0077     {
                 ; 0001 0078         res <<= 8;
000318 d0fc      	RCALL SUBOPT_0x21
000319 e0e8      	LDI  R30,LOW(8)
00031a d121      	RCALL __LSLD12
00031b d0fe      	RCALL SUBOPT_0x22
                 ; 0001 0079         res += data[i];
00031c d0f5      	RCALL SUBOPT_0x20
00031d 01de      	MOVW R26,R28
00031e 9615      	ADIW R26,5
00031f d0a5      	RCALL SUBOPT_0x11
000320 91ec      	LD   R30,X
000321 e0f0      	LDI  R31,0
000322 d0f2      	RCALL SUBOPT_0x21
000323 d129      	RCALL __CWD1
000324 d112      	RCALL __ADDD12
000325 d0f4      	RCALL SUBOPT_0x22
                 ; 0001 007A     }
000326 5f1f      	SUBI R17,-1
000327 cfed      	RJMP _0x2005E
                 _0x2005F:
                 ; 0001 007B     return (res);
                +
000328 81e9     +LDD R30 , Y + 1
000329 81fa     +LDD R31 , Y + 1 + 1
00032a 816b     +LDD R22 , Y + 1 + 2
00032b 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
00032c 8118      	LDD  R17,Y+0
00032d 962c      	ADIW R28,12
00032e 9508      	RET
                 ; 0001 007C }
                 ; .FEND
                 ;
                 ;
                 ;void    ADE_7753_init(void)
                 ; 0001 0080 {
                 _ADE_7753_init:
                 ; .FSTART _ADE_7753_init
                 ; 0001 0081     unsigned int   reg = 0;
                 ; 0001 0082     Write_ADE7753(1,MODE,0x00,0x00,0x00);
00032f d173      	RCALL __SAVELOCR2
                 ;	reg -> R16,R17
                +
000330 e000     +LDI R16 , LOW ( 0 )
000331 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000332 d053      	RCALL SUBOPT_0x6
000333 d0eb      	RCALL SUBOPT_0x23
000334 d0ef      	RCALL SUBOPT_0x24
000335 d0ee      	RCALL SUBOPT_0x24
000336 e0a0      	LDI  R26,LOW(0)
000337 df62      	RCALL _Write_ADE7753
                 ; 0001 0083     delay_ms(500);
000338 d0c3      	RCALL SUBOPT_0x1B
                 ; 0001 0084     reg = 0;
                +
000339 e000     +LDI R16 , LOW ( 0 )
00033a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0001 0085     reg |= (1<<SWRST);
00033b 6400      	ORI  R16,LOW(64)
                 ; 0001 0086     Write_ADE7753(1,MODE,(reg>>8)&0xFF,reg & 0xff,0x00);
00033c d049      	RCALL SUBOPT_0x6
00033d d0e1      	RCALL SUBOPT_0x23
00033e 931a      	ST   -Y,R17
00033f 930a      	ST   -Y,R16
000340 e0a0      	LDI  R26,LOW(0)
000341 df58      	RCALL _Write_ADE7753
                 ; 0001 0087     delay_ms(500);
000342 d0b9      	RCALL SUBOPT_0x1B
                 ; 0001 0088     reg = Read_ADE7753(1,MODE);
000343 d042      	RCALL SUBOPT_0x6
000344 d0e2      	RCALL SUBOPT_0x25
                 ; 0001 0089     delay_ms(500);
000345 d0b6      	RCALL SUBOPT_0x1B
                 ; 0001 008A     reg = Read_ADE7753(1,MODE);
000346 d03f      	RCALL SUBOPT_0x6
000347 d0df      	RCALL SUBOPT_0x25
                 ; 0001 008B     reg |= (1<<DISHPF) | (1<<WAVSEL0) | (1<<WAVSEL1);
                +
000348 6001     +ORI R16 , LOW ( 24577 )
000349 6610     +ORI R17 , HIGH ( 24577 )
                 	__ORWRN 16,17,24577
                 ; 0001 008C     // Write_ADE7753(1,MODE,(reg>>8)&0xFF,reg & 0xff,0x00);
                 ; 0001 008D     delay_ms(500);
00034a d0b1      	RCALL SUBOPT_0x1B
                 ; 0001 008E     Write_ADE7753(1,SAGLVL,0X2a,0X00,0X00);
00034b d03a      	RCALL SUBOPT_0x6
00034c e1ef      	LDI  R30,LOW(31)
00034d 93ea      	ST   -Y,R30
00034e d037      	RCALL SUBOPT_0x6
00034f e2ea      	LDI  R30,LOW(42)
000350 93ea      	ST   -Y,R30
000351 d0d2      	RCALL SUBOPT_0x24
000352 e0a0      	LDI  R26,LOW(0)
000353 df46      	RCALL _Write_ADE7753
                 ; 0001 008F     Write_ADE7753(1,SAGCYC,0XFF,0X00,0X00);
000354 d031      	RCALL SUBOPT_0x6
000355 e1ee      	LDI  R30,LOW(30)
000356 93ea      	ST   -Y,R30
000357 d02e      	RCALL SUBOPT_0x6
000358 efef      	LDI  R30,LOW(255)
000359 93ea      	ST   -Y,R30
00035a d0c9      	RCALL SUBOPT_0x24
00035b e0a0      	LDI  R26,LOW(0)
00035c df3d      	RCALL _Write_ADE7753
                 ; 0001 0090 }
                 _0x2000001:
00035d 9109      	LD   R16,Y+
00035e 9119      	LD   R17,Y+
00035f 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _AI10__Current_L1:
000160           	.BYTE 0xA
                 _AI10__Current_L2:
00016a           	.BYTE 0xA
                 _AI10__Current_L3:
000174           	.BYTE 0xA
                 _AI10_Current_Set:
00017e           	.BYTE 0x2
                 _Uc_Buzzer_cnt:
000180           	.BYTE 0x1
                 _Uc_Timer_cnt:
000181           	.BYTE 0x1
                 _BCDLED:
000182           	.BYTE 0xB
                 _LED:
00018d           	.BYTE 0x18
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
000360 eee8      	LDI  R30,LOW(1000)
000361 e0f3      	LDI  R31,HIGH(1000)
000362 d0fd      	RCALL __DIVW21U
000363 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1:
000364 e6e4      	LDI  R30,LOW(100)
000365 e0f0      	LDI  R31,HIGH(100)
000366 d0f9      	RCALL __DIVW21U
000367 01df      	MOVW R26,R30
000368 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
000369 e0ea      	LDI  R30,LOW(10)
00036a e0f0      	LDI  R31,HIGH(10)
00036b d0f4      	RCALL __DIVW21U
00036c 01df      	MOVW R26,R30
00036d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
00036e 2fe0      	MOV  R30,R16
00036f 78e0      	ANDI R30,LOW(0x80)
000370 38e0      	CPI  R30,LOW(0x80)
000371 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x4:
000372 0f00      	LSL  R16
000373 9ac5      	SBI  0x18,5
                +
000374 e08b     +LDI R24 , LOW ( 11 )
                +__DELAY_USB_LOOP :
000375 958a     +DEC R24
000376 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 11
000377 98c5      	CBI  0x18,5
                +
000378 e084     +LDI R24 , LOW ( 4 )
                +__DELAY_USB_LOOP :
000379 958a     +DEC R24
00037a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 4
00037b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x5:
00037c 81ed      	LDD  R30,Y+5
00037d e0f0      	LDI  R31,0
00037e 9731      	SBIW R30,1
00037f e8ad      	LDI  R26,LOW(_LED)
000380 e0b1      	LDI  R27,HIGH(_LED)
000381 0fee      	LSL  R30
000382 1fff      	ROL  R31
000383 0fae      	ADD  R26,R30
000384 1fbf      	ADC  R27,R31
000385 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x6:
000386 e0e1      	LDI  R30,LOW(1)
000387 93ea      	ST   -Y,R30
000388 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x7:
000389 e1e6      	LDI  R30,LOW(22)
00038a 93ea      	ST   -Y,R30
00038b e0a3      	LDI  R26,LOW(3)
00038c df44      	RCALL _Read_ADE7753
00038d 01df      	MOVW R26,R30
00038e 01cb      	MOVW R24,R22
00038f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x8:
000390 d0e2      	RCALL __DIVD21U
                +
000391 83ee     +STD Y + 6 , R30
000392 83ff     +STD Y + 6 + 1 , R31
000393 8768     +STD Y + 6 + 2 , R22
000394 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
000395 2de6      	MOV  R30,R6
000396 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
000397 e6a0      	LDI  R26,LOW(_AI10__Current_L1)
000398 e0b1      	LDI  R27,HIGH(_AI10__Current_L1)
000399 e0f0      	LDI  R31,0
00039a 0fee      	LSL  R30
00039b 1fff      	ROL  R31
00039c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0xA:
00039d 0fea      	ADD  R30,R26
00039e 1ffb      	ADC  R31,R27
00039f 81ae      	LDD  R26,Y+6
0003a0 81bf      	LDD  R27,Y+6+1
0003a1 83a0      	STD  Z+0,R26
0003a2 83b1      	STD  Z+1,R27
0003a3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xB:
0003a4 e6aa      	LDI  R26,LOW(_AI10__Current_L2)
0003a5 e0b1      	LDI  R27,HIGH(_AI10__Current_L2)
0003a6 e0f0      	LDI  R31,0
0003a7 0fee      	LSL  R30
0003a8 1fff      	ROL  R31
0003a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xC:
0003aa e7a4      	LDI  R26,LOW(_AI10__Current_L3)
0003ab e0b1      	LDI  R27,HIGH(_AI10__Current_L3)
0003ac e0f0      	LDI  R31,0
0003ad 0fee      	LSL  R30
0003ae 1fff      	ROL  R31
0003af 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
0003b0 93e0 017e 	STS  _AI10_Current_Set,R30
0003b2 93f0 017f 	STS  _AI10_Current_Set+1,R31
0003b4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xE:
0003b5 91a0 017e 	LDS  R26,_AI10_Current_Set
0003b7 91b0 017f 	LDS  R27,_AI10_Current_Set+1
0003b9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 15 TIMES, CODE SIZE REDUCTION:68 WORDS
                 SUBOPT_0xF:
0003ba 2fe3      	MOV  R30,R19
0003bb e0f0      	LDI  R31,0
0003bc 01de      	MOVW R26,R28
0003bd 961a      	ADIW R26,10
0003be 0fee      	LSL  R30
0003bf 1fff      	ROL  R31
0003c0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x10:
0003c1 0fea      	ADD  R30,R26
0003c2 1ffb      	ADC  R31,R27
0003c3 010f      	MOVW R0,R30
0003c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 21 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x11:
0003c5 0fae      	ADD  R26,R30
0003c6 1fbf      	ADC  R27,R31
0003c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x12:
0003c8 d0d2      	RCALL __GETW1P
0003c9 01d0      	MOVW R26,R0
0003ca 93ed      	ST   X+,R30
0003cb 93fc      	ST   X,R31
0003cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x13:
0003cd dff7      	RCALL SUBOPT_0x11
0003ce 900d      	LD   R0,X+
0003cf 901c      	LD   R1,X
0003d0 2fe2      	MOV  R30,R18
0003d1 e0f0      	LDI  R31,0
0003d2 01de      	MOVW R26,R28
0003d3 961a      	ADIW R26,10
0003d4 0fee      	LSL  R30
0003d5 1fff      	ROL  R31
0003d6 dfee      	RCALL SUBOPT_0x11
0003d7 d0c3      	RCALL __GETW1P
0003d8 15e0      	CP   R30,R0
0003d9 05f1      	CPC  R31,R1
0003da 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x14:
0003db dfe9      	RCALL SUBOPT_0x11
0003dc 910d      	LD   R16,X+
0003dd 911c      	LD   R17,X
0003de cfdb      	RJMP SUBOPT_0xF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x15:
0003df 2fe2      	MOV  R30,R18
0003e0 e0f0      	LDI  R31,0
0003e1 01de      	MOVW R26,R28
0003e2 961a      	ADIW R26,10
0003e3 0fee      	LSL  R30
0003e4 1fff      	ROL  R31
0003e5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x16:
0003e6 dfde      	RCALL SUBOPT_0x11
0003e7 cfe0      	RJMP SUBOPT_0x12
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x17:
0003e8 0fea      	ADD  R30,R26
0003e9 1ffb      	ADC  R31,R27
0003ea 8300      	ST   Z,R16
0003eb 8311      	STD  Z+1,R17
0003ec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x18:
                +
0003ed e040     +LDI R20 , LOW ( 0 )
0003ee e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
0003ef e031      	LDI  R19,LOW(1)
0003f0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x19:
0003f1 dfd3      	RCALL SUBOPT_0x11
0003f2 d0a8      	RCALL __GETW1P
                +
0003f3 0f4e     +ADD R20 , R30
0003f4 1f5f     +ADC R21 , R31
                 	__ADDWRR 20,21,30,31
0003f5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1A:
0003f6 01da      	MOVW R26,R20
0003f7 e0e3      	LDI  R30,LOW(3)
0003f8 e0f0      	LDI  R31,HIGH(3)
0003f9 d066      	RCALL __DIVW21U
0003fa 01af      	MOVW R20,R30
0003fb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1B:
0003fc efa4      	LDI  R26,LOW(500)
0003fd e0b1      	LDI  R27,HIGH(500)
0003fe c02e      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1C:
0003ff 0f00      	LSL  R16
000400 9a94      	SBI  0x12,4
                +
000401 e983     +LDI R24 , LOW ( 147 )
                +__DELAY_USB_LOOP :
000402 958a     +DEC R24
000403 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 147
000404 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
000405 9894      	CBI  0x12,4
                +
000406 e983     +LDI R24 , LOW ( 147 )
                +__DELAY_USB_LOOP :
000407 958a     +DEC R24
000408 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 147
000409 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
00040a e0f0      	LDI  R31,0
00040b 30e1      	CPI  R30,LOW(0x1)
00040c e0a0      	LDI  R26,HIGH(0x1)
00040d 07fa      	CPC  R31,R26
00040e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1F:
00040f 98ad      	CBI  0x15,5
000410 98ab      	CBI  0x15,3
000411 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x20:
000412 2fe1      	MOV  R30,R17
000413 e0f0      	LDI  R31,0
000414 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x21:
                +
000415 81a9     +LDD R26 , Y + 1
000416 81ba     +LDD R27 , Y + 1 + 1
000417 818b     +LDD R24 , Y + 1 + 2
000418 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
000419 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
                +
00041a 83e9     +STD Y + 1 , R30
00041b 83fa     +STD Y + 1 + 1 , R31
00041c 836b     +STD Y + 1 + 2 , R22
00041d 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
00041e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x23:
00041f e0e9      	LDI  R30,LOW(9)
000420 93ea      	ST   -Y,R30
000421 e0e2      	LDI  R30,LOW(2)
000422 93ea      	ST   -Y,R30
000423 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x24:
000424 e0e0      	LDI  R30,LOW(0)
000425 93ea      	ST   -Y,R30
000426 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x25:
000427 e0e9      	LDI  R30,LOW(9)
000428 93ea      	ST   -Y,R30
000429 e0a2      	LDI  R26,LOW(2)
00042a dea6      	RCALL _Read_ADE7753
00042b 018f      	MOVW R16,R30
00042c 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00042d 9610      	adiw r26,0
00042e f039      	breq __delay_ms1
                 __delay_ms0:
                +
00042f ec8d     +LDI R24 , LOW ( 0xACD )
000430 e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
000431 9701     +SBIW R24 , 1
000432 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
000433 95a8      	wdr
000434 9711      	sbiw r26,1
000435 f7c9      	brne __delay_ms0
                 __delay_ms1:
000436 9508      	ret
                 
                 __ADDD12:
000437 0fea      	ADD  R30,R26
000438 1ffb      	ADC  R31,R27
000439 1f68      	ADC  R22,R24
00043a 1f79      	ADC  R23,R25
00043b 9508      	RET
                 
                 __LSLD12:
00043c 23ee      	TST  R30
00043d 2e0e      	MOV  R0,R30
00043e 01fd      	MOVW R30,R26
00043f 01bc      	MOVW R22,R24
000440 f031      	BREQ __LSLD12R
                 __LSLD12L:
000441 0fee      	LSL  R30
000442 1fff      	ROL  R31
000443 1f66      	ROL  R22
000444 1f77      	ROL  R23
000445 940a      	DEC  R0
000446 f7d1      	BRNE __LSLD12L
                 __LSLD12R:
000447 9508      	RET
                 
                 __LSRW2:
000448 95f6      	LSR  R31
000449 95e7      	ROR  R30
00044a 95f6      	LSR  R31
00044b 95e7      	ROR  R30
00044c 9508      	RET
                 
                 __CWD1:
00044d 2f6f      	MOV  R22,R31
00044e 0f66      	ADD  R22,R22
00044f 0b66      	SBC  R22,R22
000450 2f76      	MOV  R23,R22
000451 9508      	RET
                 
                 __MULW12U:
000452 9ffa      	MUL  R31,R26
000453 2df0      	MOV  R31,R0
000454 9feb      	MUL  R30,R27
000455 0df0      	ADD  R31,R0
000456 9fea      	MUL  R30,R26
000457 2de0      	MOV  R30,R0
000458 0df1      	ADD  R31,R1
000459 9508      	RET
                 
                 __MULB1W2U:
00045a 2f6e      	MOV  R22,R30
00045b 9f6a      	MUL  R22,R26
00045c 01f0      	MOVW R30,R0
00045d 9f6b      	MUL  R22,R27
00045e 0df0      	ADD  R31,R0
00045f 9508      	RET
                 
                 __DIVW21U:
000460 2400      	CLR  R0
000461 2411      	CLR  R1
000462 e190      	LDI  R25,16
                 __DIVW21U1:
000463 0faa      	LSL  R26
000464 1fbb      	ROL  R27
000465 1c00      	ROL  R0
000466 1c11      	ROL  R1
000467 1a0e      	SUB  R0,R30
000468 0a1f      	SBC  R1,R31
000469 f418      	BRCC __DIVW21U2
00046a 0e0e      	ADD  R0,R30
00046b 1e1f      	ADC  R1,R31
00046c c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00046d 60a1      	SBR  R26,1
                 __DIVW21U3:
00046e 959a      	DEC  R25
00046f f799      	BRNE __DIVW21U1
000470 01fd      	MOVW R30,R26
000471 01d0      	MOVW R26,R0
000472 9508      	RET
                 
                 __DIVD21U:
000473 933f      	PUSH R19
000474 934f      	PUSH R20
000475 935f      	PUSH R21
000476 2400      	CLR  R0
000477 2411      	CLR  R1
000478 2744      	CLR  R20
000479 2755      	CLR  R21
00047a e230      	LDI  R19,32
                 __DIVD21U1:
00047b 0faa      	LSL  R26
00047c 1fbb      	ROL  R27
00047d 1f88      	ROL  R24
00047e 1f99      	ROL  R25
00047f 1c00      	ROL  R0
000480 1c11      	ROL  R1
000481 1f44      	ROL  R20
000482 1f55      	ROL  R21
000483 1a0e      	SUB  R0,R30
000484 0a1f      	SBC  R1,R31
000485 0b46      	SBC  R20,R22
000486 0b57      	SBC  R21,R23
000487 f428      	BRCC __DIVD21U2
000488 0e0e      	ADD  R0,R30
000489 1e1f      	ADC  R1,R31
00048a 1f46      	ADC  R20,R22
00048b 1f57      	ADC  R21,R23
00048c c001      	RJMP __DIVD21U3
                 __DIVD21U2:
00048d 60a1      	SBR  R26,1
                 __DIVD21U3:
00048e 953a      	DEC  R19
00048f f759      	BRNE __DIVD21U1
000490 01fd      	MOVW R30,R26
000491 01bc      	MOVW R22,R24
000492 01d0      	MOVW R26,R0
000493 01ca      	MOVW R24,R20
000494 915f      	POP  R21
000495 914f      	POP  R20
000496 913f      	POP  R19
000497 9508      	RET
                 
                 __MODW21U:
000498 dfc7      	RCALL __DIVW21U
000499 01fd      	MOVW R30,R26
00049a 9508      	RET
                 
                 __GETW1P:
00049b 91ed      	LD   R30,X+
00049c 91fc      	LD   R31,X
00049d 9711      	SBIW R26,1
00049e 9508      	RET
                 
                 __SAVELOCR6:
00049f 935a      	ST   -Y,R21
                 __SAVELOCR5:
0004a0 934a      	ST   -Y,R20
                 __SAVELOCR4:
0004a1 933a      	ST   -Y,R19
                 __SAVELOCR3:
0004a2 932a      	ST   -Y,R18
                 __SAVELOCR2:
0004a3 931a      	ST   -Y,R17
0004a4 930a      	ST   -Y,R16
0004a5 9508      	RET
                 
                 __LOADLOCR6:
0004a6 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0004a7 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0004a8 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0004a9 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0004aa 8119      	LDD  R17,Y+1
0004ab 8108      	LD   R16,Y
0004ac 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8L register use summary:
r0 :  27 r1 :  14 r2 :  10 r3 :   0 r4 :   0 r5 :   0 r6 :   4 r7 :  16 
r8 :   8 r9 :   2 r10:   8 r11:   2 r12:   8 r13:   2 r14:   0 r15:   2 
r16:  25 r17:  51 r18:  13 r19:  42 r20:  16 r21:  10 r22:  26 r23:  13 
r24:  32 r25:  10 r26: 115 r27:  31 r28:  18 r29:   1 r30: 263 r31:  75 
x  :  16 y  : 115 z  :  12 
Registers used: 31 out of 35 (88.6%)

ATmega8L instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  14 add   :  14 
adiw  :  15 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   6 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :   5 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   0 brmi  :   0 brne  :  39 brpl  :   0 brsh  :  30 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :  21 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  15 
cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   0 cp    :  21 
cpc   :   9 cpi   :  31 cpse  :   0 dec   :  11 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   3 
inc   :   2 ld    :  27 ldd   :  37 ldi   : 176 lds   :   7 lpm   :   7 
lsl   :  12 lsr   :   2 mov   :  27 movw  :  47 mul   :   5 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   1 ori   :   5 out   :  41 
pop   :   5 push  :   5 rcall : 180 ret   :  56 reti  :   1 rjmp  :  81 
rol   :  20 ror   :   2 sbc   :   5 sbci  :   2 sbi   :  19 sbic  :   1 
sbis  :   1 sbiw  :  10 sbr   :   2 sbrc  :   3 sbrs  :   1 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   5 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  52 std   :  20 
sts   :   6 sub   :   2 subi  :  26 swap  :   0 tst   :   1 wdr   :   1 

Instructions used: 59 out of 114 (51.8%)

ATmega8L memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00095a   2324     70   2394    8192  29.2%
[.dseg] 0x000060 0x0001a5      0     69     69    1024   6.7%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 8 warnings
