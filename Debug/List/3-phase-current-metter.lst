
AVRASM ver. 2.1.30  D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-current-metter\Debug\List\3-phase-current-metter.asm Wed Nov 14 14:00:17 2018

D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1086): warning: Register r7 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1087): warning: Register r8 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1088): warning: Register r9 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1089): warning: Register r10 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1090): warning: Register r11 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1091): warning: Register r12 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1092): warning: Register r13 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1093): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8L
                 ;Program type           : Application
                 ;Clock frequency        : 11,059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8L
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Uc_Ledcnt=R7
                 	.DEF _Uint_dataLed1=R8
                 	.DEF _Uint_dataLed1_msb=R9
                 	.DEF _Uint_dataLed2=R10
                 	.DEF _Uint_dataLed2_msb=R11
                 	.DEF _Uint_dataLed3=R12
                 	.DEF _Uint_dataLed3_msb=R13
                 	.DEF _Uc_Current_Array_Cnt=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c01e      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 c042      	RJMP _timer1_ovf_isr
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000013 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000014 0100
000015 0000      	.DB  0x0,0x1,0x0,0x0
000016 0000
000017 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 
                 __GLOBAL_INI_TBL:
000018 0001      	.DW  0x01
000019 0002      	.DW  0x02
00001a 0026      	.DW  __REG_BIT_VARS*2
                 
00001b 0008      	.DW  0x08
00001c 0006      	.DW  0x06
00001d 0028      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
00001e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00001f 94f8      	CLI
000020 27ee      	CLR  R30
000021 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000022 e0f1      	LDI  R31,1
000023 bffb      	OUT  GICR,R31
000024 bfeb      	OUT  GICR,R30
000025 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000026 e08d      	LDI  R24,(14-2)+1
000027 e0a2      	LDI  R26,2
000028 27bb      	CLR  R27
                 __CLEAR_REG:
000029 93ed      	ST   X+,R30
00002a 958a      	DEC  R24
00002b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00002c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00002d e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00002e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00002f 93ed      	ST   X+,R30
000030 9701      	SBIW R24,1
000031 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000032 e3e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000033 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000034 9185      	LPM  R24,Z+
000035 9195      	LPM  R25,Z+
000036 9700      	SBIW R24,0
000037 f061      	BREQ __GLOBAL_INI_END
000038 91a5      	LPM  R26,Z+
000039 91b5      	LPM  R27,Z+
00003a 9005      	LPM  R0,Z+
00003b 9015      	LPM  R1,Z+
00003c 01bf      	MOVW R22,R30
00003d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00003e 9005      	LPM  R0,Z+
00003f 920d      	ST   X+,R0
000040 9701      	SBIW R24,1
000041 f7e1      	BRNE __GLOBAL_INI_LOOP
000042 01fb      	MOVW R30,R22
000043 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000044 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000045 bfed      	OUT  SPL,R30
000046 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000047 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000048 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000049 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00004a c211      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : 3 Phase current metter
                 ;Version : 1.0
                 ;Date    : 11/10/2018
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;Do va hien thi cuong do dong dien
                 ;Su dung IC ADE7753
                 ;
                 ;
                 ;Chip type               : ATmega8L
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 11.059200 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;// Declare your global variables here
                 ;#define DO_595_LATCH  PORTB.1
                 ;#define DO_595_MOSI    PORTB.3
                 ;#define DO_595_SCK    PORTB.5
                 ;
                 ;#define CTRL_595_ON     DO_595_LATCH = 1
                 ;#define CTRL_595_OFF    DO_595_LATCH = 0
                 ;
                 ;#define BUZZER  PORTC.2
                 ;
                 ;#define BUZZER_ON   BUZZER = 1
                 ;#define BUZZER_OFF  BUZZER = 0
                 ;
                 ;#define CS_PHASE1_MCU   PORTC.4
                 ;#define CS_PHASE2_MCU   PORTC.5
                 ;#define CS_PHASE3_MCU   PORTC.3
                 ;
                 ;#define PHASE_1_ON  CS_PHASE1_MCU = 1
                 ;#define PHASE_1_OFF CS_PHASE1_MCU = 0
                 ;#define PHASE_2_ON  CS_PHASE2_MCU = 1
                 ;#define PHASE_2_OFF CS_PHASE2_MCU = 0
                 ;#define PHASE_3_ON  CS_PHASE3_MCU = 1
                 ;#define PHASE_3_OFF CS_PHASE3_MCU = 0
                 ;
                 ;#define DOUT_MOSI_SPI_7753_MCU   PORTD.1
                 ;#define DIN_MISO_SPI_7753_MCU    PIND.0
                 ;#define DOUT_CLK_SPI_7753_MCU   PORTD.4
                 ;
                 ;#define NUM_SAMPLE  20
                 ;#define NUM_FILTER  5
                 ;
                 ;//Dia chi cac thanh ghi SPI_ADE7753
                 ;#define WAVEFORM        0x01,3
                 ;#define AENERGY         0x02,3
                 ;#define RAENERGY        0x03,3
                 ;#define LAENERGY		0x04,3
                 ;#define VAENERGY		0x05,3
                 ;#define RVAENERGY		0x06,3
                 ;#define LVAENERGY		0x07,3
                 ;#define LVARENERGY		0x08,3
                 ;#define MODE			0x09,2
                 ;#define IRQEN			0x0A,2
                 ;#define STATUS			0x0B,2
                 ;#define RSTSTATUS		0x0C,2
                 ;#define CH1OS			0x0D,1
                 ;#define CH2OS			0x0E,1
                 ;#define GAIN			0x0F,1
                 ;#define PHCAL			0x10,1
                 ;#define APOS			0x11,2
                 ;#define WGAIN			0x12,2
                 ;#define WDIV			0x13,1
                 ;#define CFNUM			0x14,2
                 ;#define CFDEN			0x15,2
                 ;#define IRMS			0x16,3
                 ;#define VRMS			0x17,3
                 ;#define IRMSOS			0x18,2
                 ;#define VRMSOS			0x19,2
                 ;#define VAGAIN			0x1A,2
                 ;#define VADIV			0x1B,1
                 ;#define LINECYC			0x1C,2
                 ;#define ZXTOUT			0x1D,2
                 ;#define SAGCYC			0x1E,1
                 ;#define SAGLVL			0x1F,1
                 ;#define IPKLVL			0x20,1
                 ;#define VPKLVL			0x21,1
                 ;#define IPEAK			0x22,3
                 ;#define RSTIPEAK		0x23,3
                 ;#define VPEAK			0x24,3
                 ;#define RSTVPEAK		0x25,3
                 ;#define TEMP			0x26,1
                 ;#define PERIOD			0x27,2
                 ;#define TMODE			0x3D,1
                 ;#define CHKSUM			0x3E,1
                 ;#define DIEREV			0x3F,1
                 ;
                 ;void    SEND_DATA_LED(unsigned char  data_first,unsigned char  data_second,unsigned char  data_third);
                 ;void    SCAN_LED(unsigned char num_led,unsigned char    data);
                 ;
                 ;unsigned char   Uc_Ledcnt=1;
                 ;
                 ;unsigned int   Uint_dataLed1 = 0;
                 ;unsigned int   Uint_dataLed2 = 0;
                 ;unsigned int   Uint_dataLed3 = 0;
                 ;
                 ;bit Bit_sample_full =0;
                 ;
                 ;unsigned long Uint_Current1_Array[NUM_SAMPLE];
                 ;unsigned long Uint_Current2_Array[NUM_SAMPLE];
                 ;unsigned long Uint_Current3_Array[NUM_SAMPLE];
                 ;unsigned char   Uc_Current_Array_Cnt = 0;
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 007A {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
00004b 920a      	ST   -Y,R0
00004c 921a      	ST   -Y,R1
00004d 92fa      	ST   -Y,R15
00004e 936a      	ST   -Y,R22
00004f 937a      	ST   -Y,R23
000050 938a      	ST   -Y,R24
000051 939a      	ST   -Y,R25
000052 93aa      	ST   -Y,R26
000053 93ba      	ST   -Y,R27
000054 93ea      	ST   -Y,R30
000055 93fa      	ST   -Y,R31
000056 b7ef      	IN   R30,SREG
000057 93ea      	ST   -Y,R30
                 ; 0000 007B     unsigned char   data = 0;
                 ; 0000 007C // Reinitialize Timer1 value
                 ; 0000 007D     TCNT1H=0xAA00 >> 8;
000058 931a      	ST   -Y,R17
                 ;	data -> R17
000059 e010      	LDI  R17,0
00005a eaea      	LDI  R30,LOW(170)
00005b bded      	OUT  0x2D,R30
                 ; 0000 007E     TCNT1L=0xAA00 & 0xff;
00005c e0e0      	LDI  R30,LOW(0)
00005d bdec      	OUT  0x2C,R30
                 ; 0000 007F // Place your code here
                 ; 0000 0080     if(Uc_Ledcnt > 12) Uc_Ledcnt=1;
00005e e0ec      	LDI  R30,LOW(12)
00005f 15e7      	CP   R30,R7
000060 f410      	BRSH _0x3
000061 e0e1      	LDI  R30,LOW(1)
000062 2e7e      	MOV  R7,R30
                 ; 0000 0081     if(Uc_Ledcnt == 1)    data = Uint_dataLed1/1000;
                 _0x3:
000063 e0e1      	LDI  R30,LOW(1)
000064 15e7      	CP   R30,R7
000065 f419      	BRNE _0x4
000066 01d4      	MOVW R26,R8
000067 d230      	RCALL SUBOPT_0x0
000068 c041      	RJMP _0xC7
                 ; 0000 0082     else if(Uc_Ledcnt == 2)    data = Uint_dataLed1/100%10;
                 _0x4:
000069 e0e2      	LDI  R30,LOW(2)
00006a 15e7      	CP   R30,R7
00006b f419      	BRNE _0x6
00006c 01d4      	MOVW R26,R8
00006d d22e      	RCALL SUBOPT_0x1
00006e c038      	RJMP _0xC8
                 ; 0000 0083     else if(Uc_Ledcnt == 3)    data = Uint_dataLed1/10%10;
                 _0x6:
00006f e0e3      	LDI  R30,LOW(3)
000070 15e7      	CP   R30,R7
000071 f419      	BRNE _0x8
000072 01d4      	MOVW R26,R8
000073 d22d      	RCALL SUBOPT_0x2
000074 c032      	RJMP _0xC8
                 ; 0000 0084     else if(Uc_Ledcnt == 4)    data = Uint_dataLed1%10;
                 _0x8:
000075 e0e4      	LDI  R30,LOW(4)
000076 15e7      	CP   R30,R7
000077 f411      	BRNE _0xA
000078 01d4      	MOVW R26,R8
000079 c02d      	RJMP _0xC8
                 ; 0000 0085     else if(Uc_Ledcnt == 5)    data = Uint_dataLed2/1000;
                 _0xA:
00007a e0e5      	LDI  R30,LOW(5)
00007b 15e7      	CP   R30,R7
00007c f419      	BRNE _0xC
00007d 01d5      	MOVW R26,R10
00007e d219      	RCALL SUBOPT_0x0
00007f c02a      	RJMP _0xC7
                 ; 0000 0086     else if(Uc_Ledcnt == 6)    data = Uint_dataLed2/100%10;
                 _0xC:
000080 e0e6      	LDI  R30,LOW(6)
000081 15e7      	CP   R30,R7
000082 f419      	BRNE _0xE
000083 01d5      	MOVW R26,R10
000084 d217      	RCALL SUBOPT_0x1
000085 c021      	RJMP _0xC8
                 ; 0000 0087     else if(Uc_Ledcnt == 7)    data = Uint_dataLed2/10%10;
                 _0xE:
000086 e0e7      	LDI  R30,LOW(7)
000087 15e7      	CP   R30,R7
000088 f419      	BRNE _0x10
000089 01d5      	MOVW R26,R10
00008a d216      	RCALL SUBOPT_0x2
00008b c01b      	RJMP _0xC8
                 ; 0000 0088     else if(Uc_Ledcnt == 8)    data = Uint_dataLed2%10;
                 _0x10:
00008c e0e8      	LDI  R30,LOW(8)
00008d 15e7      	CP   R30,R7
00008e f411      	BRNE _0x12
00008f 01d5      	MOVW R26,R10
000090 c016      	RJMP _0xC8
                 ; 0000 0089     else if(Uc_Ledcnt == 9)    data = Uint_dataLed3/1000;
                 _0x12:
000091 e0e9      	LDI  R30,LOW(9)
000092 15e7      	CP   R30,R7
000093 f419      	BRNE _0x14
000094 01d6      	MOVW R26,R12
000095 d202      	RCALL SUBOPT_0x0
000096 c013      	RJMP _0xC7
                 ; 0000 008A     else if(Uc_Ledcnt == 10)    data = Uint_dataLed3/100%10;
                 _0x14:
000097 e0ea      	LDI  R30,LOW(10)
000098 15e7      	CP   R30,R7
000099 f419      	BRNE _0x16
00009a 01d6      	MOVW R26,R12
00009b d200      	RCALL SUBOPT_0x1
00009c c00a      	RJMP _0xC8
                 ; 0000 008B     else if(Uc_Ledcnt == 11)    data = Uint_dataLed3/10%10;
                 _0x16:
00009d e0eb      	LDI  R30,LOW(11)
00009e 15e7      	CP   R30,R7
00009f f419      	BRNE _0x18
0000a0 01d6      	MOVW R26,R12
0000a1 d1ff      	RCALL SUBOPT_0x2
0000a2 c004      	RJMP _0xC8
                 ; 0000 008C     else if(Uc_Ledcnt == 12)    data = Uint_dataLed3%10;
                 _0x18:
0000a3 e0ec      	LDI  R30,LOW(12)
0000a4 15e7      	CP   R30,R7
0000a5 f429      	BRNE _0x1A
0000a6 01d6      	MOVW R26,R12
                 _0xC8:
0000a7 e0ea      	LDI  R30,LOW(10)
0000a8 e0f0      	LDI  R31,HIGH(10)
0000a9 d28d      	RCALL __MODW21U
                 _0xC7:
0000aa 2f1e      	MOV  R17,R30
                 ; 0000 008D     SCAN_LED(Uc_Ledcnt++,data);
                 _0x1A:
0000ab 2de7      	MOV  R30,R7
0000ac 9473      	INC  R7
0000ad 93ea      	ST   -Y,R30
0000ae 2fa1      	MOV  R26,R17
0000af d03a      	RCALL _SCAN_LED
                 ; 0000 008E }
0000b0 9119      	LD   R17,Y+
0000b1 91e9      	LD   R30,Y+
0000b2 bfef      	OUT  SREG,R30
0000b3 91f9      	LD   R31,Y+
0000b4 91e9      	LD   R30,Y+
0000b5 91b9      	LD   R27,Y+
0000b6 91a9      	LD   R26,Y+
0000b7 9199      	LD   R25,Y+
0000b8 9189      	LD   R24,Y+
0000b9 9179      	LD   R23,Y+
0000ba 9169      	LD   R22,Y+
0000bb 90f9      	LD   R15,Y+
0000bc 9019      	LD   R1,Y+
0000bd 9009      	LD   R0,Y+
0000be 9518      	RETI
                 ; .FEND
                 ;
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0095 {
                 ; 0000 0096     ADMUX=adc_input | ADC_VREF_TYPE;
                 ;	adc_input -> Y+0
                 ; 0000 0097     // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0098     delay_us(10);
                 ; 0000 0099     // Start the AD conversion
                 ; 0000 009A     ADCSRA|=(1<<ADSC);
                 ; 0000 009B     // Wait for the AD conversion to complete
                 ; 0000 009C     while ((ADCSRA & (1<<ADIF))==0);
                 ; 0000 009D     ADCSRA|=(1<<ADIF);
                 ; 0000 009E     return ADCW;
                 ; 0000 009F }
                 ;
                 ;void    SEND_DATA_LED(unsigned char  data_first,unsigned char  data_second,unsigned char  data_third)
                 ; 0000 00A2 {
                 _SEND_DATA_LED:
                 ; .FSTART _SEND_DATA_LED
                 ; 0000 00A3     unsigned char   i;
                 ; 0000 00A4     unsigned char   data;
                 ; 0000 00A5     data = data_first;
0000bf 93aa      	ST   -Y,R26
0000c0 d27b      	RCALL __SAVELOCR2
                 ;	data_first -> Y+4
                 ;	data_second -> Y+3
                 ;	data_third -> Y+2
                 ;	i -> R17
                 ;	data -> R16
0000c1 810c      	LDD  R16,Y+4
                 ; 0000 00A6     for(i=0;i<8;i++)
0000c2 e010      	LDI  R17,LOW(0)
                 _0x1F:
0000c3 3018      	CPI  R17,8
0000c4 f440      	BRSH _0x20
                 ; 0000 00A7     {
                 ; 0000 00A8         if((data & 0x80) == 0x80)    DO_595_MOSI = 1;
0000c5 d1e0      	RCALL SUBOPT_0x3
0000c6 f411      	BRNE _0x21
0000c7 9ac3      	SBI  0x18,3
                 ; 0000 00A9         else    DO_595_MOSI = 0;
0000c8 c001      	RJMP _0x24
                 _0x21:
0000c9 98c3      	CBI  0x18,3
                 ; 0000 00AA         data <<= 1;
                 _0x24:
0000ca d1df      	RCALL SUBOPT_0x4
                 ; 0000 00AB         DO_595_SCK = 1;
                 ; 0000 00AC         DO_595_SCK = 0;
                 ; 0000 00AD     }
0000cb 5f1f      	SUBI R17,-1
0000cc cff6      	RJMP _0x1F
                 _0x20:
                 ; 0000 00AE     data = data_second;
0000cd 810b      	LDD  R16,Y+3
                 ; 0000 00AF     for(i=0;i<8;i++)
0000ce e010      	LDI  R17,LOW(0)
                 _0x2C:
0000cf 3018      	CPI  R17,8
0000d0 f440      	BRSH _0x2D
                 ; 0000 00B0     {
                 ; 0000 00B1         if((data & 0x80) == 0x80)    DO_595_MOSI = 1;
0000d1 d1d4      	RCALL SUBOPT_0x3
0000d2 f411      	BRNE _0x2E
0000d3 9ac3      	SBI  0x18,3
                 ; 0000 00B2         else    DO_595_MOSI = 0;
0000d4 c001      	RJMP _0x31
                 _0x2E:
0000d5 98c3      	CBI  0x18,3
                 ; 0000 00B3         data <<= 1;
                 _0x31:
0000d6 d1d3      	RCALL SUBOPT_0x4
                 ; 0000 00B4         DO_595_SCK = 1;
                 ; 0000 00B5         DO_595_SCK = 0;
                 ; 0000 00B6     }
0000d7 5f1f      	SUBI R17,-1
0000d8 cff6      	RJMP _0x2C
                 _0x2D:
                 ; 0000 00B7     data = data_third;
0000d9 810a      	LDD  R16,Y+2
                 ; 0000 00B8     for(i=0;i<8;i++)
0000da e010      	LDI  R17,LOW(0)
                 _0x39:
0000db 3018      	CPI  R17,8
0000dc f440      	BRSH _0x3A
                 ; 0000 00B9     {
                 ; 0000 00BA         if((data & 0x80) == 0x80)    DO_595_MOSI = 1;
0000dd d1c8      	RCALL SUBOPT_0x3
0000de f411      	BRNE _0x3B
0000df 9ac3      	SBI  0x18,3
                 ; 0000 00BB         else    DO_595_MOSI = 0;
0000e0 c001      	RJMP _0x3E
                 _0x3B:
0000e1 98c3      	CBI  0x18,3
                 ; 0000 00BC         data <<= 1;
                 _0x3E:
0000e2 d1c7      	RCALL SUBOPT_0x4
                 ; 0000 00BD         DO_595_SCK = 1;
                 ; 0000 00BE         DO_595_SCK = 0;
                 ; 0000 00BF     }
0000e3 5f1f      	SUBI R17,-1
0000e4 cff6      	RJMP _0x39
                 _0x3A:
                 ; 0000 00C0     CTRL_595_ON;
0000e5 9ac1      	SBI  0x18,1
                 ; 0000 00C1     CTRL_595_OFF;
0000e6 98c1      	CBI  0x18,1
                 ; 0000 00C2 }
0000e7 d259      	RCALL __LOADLOCR2
0000e8 9625      	ADIW R28,5
0000e9 9508      	RET
                 ; .FEND
                 ;
                 ;void    SCAN_LED(unsigned char num_led,unsigned char    data)
                 ; 0000 00C5 {
                 _SCAN_LED:
                 ; .FSTART _SCAN_LED
                 ; 0000 00C6     unsigned char   byte1,byte2,byte3;
                 ; 0000 00C7     byte1 = 0;
0000ea 93aa      	ST   -Y,R26
0000eb d24e      	RCALL __SAVELOCR4
                 ;	num_led -> Y+5
                 ;	data -> Y+4
                 ;	byte1 -> R17
                 ;	byte2 -> R16
                 ;	byte3 -> R19
0000ec e010      	LDI  R17,LOW(0)
                 ; 0000 00C8     byte2 = 0;
0000ed e000      	LDI  R16,LOW(0)
                 ; 0000 00C9     byte3 = 0;
0000ee e030      	LDI  R19,LOW(0)
                 ; 0000 00CA     switch(num_led)
0000ef 81ed      	LDD  R30,Y+5
0000f0 d1bd      	RCALL SUBOPT_0x5
                 ; 0000 00CB     {
                 ; 0000 00CC         case    1:
0000f1 f419      	BRNE _0x4C
                 ; 0000 00CD         {
                 ; 0000 00CE             byte3 = 0x01;
0000f2 e031      	LDI  R19,LOW(1)
                 ; 0000 00CF             byte2 = 0x00;
0000f3 e000      	LDI  R16,LOW(0)
                 ; 0000 00D0             break;
0000f4 c04b      	RJMP _0x4B
                 ; 0000 00D1         }
                 ; 0000 00D2         case    2:
                 _0x4C:
0000f5 d1bd      	RCALL SUBOPT_0x6
0000f6 f421      	BRNE _0x4D
                 ; 0000 00D3         {
                 ; 0000 00D4             byte3 = 0x02;
0000f7 e032      	LDI  R19,LOW(2)
                 ; 0000 00D5             byte2 = 0x00;
0000f8 e000      	LDI  R16,LOW(0)
                 ; 0000 00D6             byte1 = 0x04;
0000f9 e014      	LDI  R17,LOW(4)
                 ; 0000 00D7             break;
0000fa c045      	RJMP _0x4B
                 ; 0000 00D8         }
                 ; 0000 00D9         case    3:
                 _0x4D:
0000fb d1bb      	RCALL SUBOPT_0x7
0000fc f419      	BRNE _0x4E
                 ; 0000 00DA         {
                 ; 0000 00DB             byte3 = 0x04;
0000fd e034      	LDI  R19,LOW(4)
                 ; 0000 00DC             byte2 = 0x00;
0000fe e000      	LDI  R16,LOW(0)
                 ; 0000 00DD             break;
0000ff c040      	RJMP _0x4B
                 ; 0000 00DE         }
                 ; 0000 00DF         case    4:
                 _0x4E:
000100 30e4      	CPI  R30,LOW(0x4)
000101 e0a0      	LDI  R26,HIGH(0x4)
000102 07fa      	CPC  R31,R26
000103 f419      	BRNE _0x4F
                 ; 0000 00E0         {
                 ; 0000 00E1             byte3 = 0x08;
000104 e038      	LDI  R19,LOW(8)
                 ; 0000 00E2             byte2 = 0x00;
000105 e000      	LDI  R16,LOW(0)
                 ; 0000 00E3             break;
000106 c039      	RJMP _0x4B
                 ; 0000 00E4         }
                 ; 0000 00E5         case    5:
                 _0x4F:
000107 30e5      	CPI  R30,LOW(0x5)
000108 e0a0      	LDI  R26,HIGH(0x5)
000109 07fa      	CPC  R31,R26
00010a f419      	BRNE _0x50
                 ; 0000 00E6         {
                 ; 0000 00E7             byte3 = 0x40;
00010b e430      	LDI  R19,LOW(64)
                 ; 0000 00E8             byte2 = 0x00;
00010c e000      	LDI  R16,LOW(0)
                 ; 0000 00E9             break;
00010d c032      	RJMP _0x4B
                 ; 0000 00EA         }
                 ; 0000 00EB         case    6:
                 _0x50:
00010e 30e6      	CPI  R30,LOW(0x6)
00010f e0a0      	LDI  R26,HIGH(0x6)
000110 07fa      	CPC  R31,R26
000111 f421      	BRNE _0x51
                 ; 0000 00EC         {
                 ; 0000 00ED             byte3 = 0x20;
000112 e230      	LDI  R19,LOW(32)
                 ; 0000 00EE             byte2 = 0x00;
000113 e000      	LDI  R16,LOW(0)
                 ; 0000 00EF             byte1 = 0x04;
000114 e014      	LDI  R17,LOW(4)
                 ; 0000 00F0             break;
000115 c02a      	RJMP _0x4B
                 ; 0000 00F1         }
                 ; 0000 00F2         case    7:
                 _0x51:
000116 30e7      	CPI  R30,LOW(0x7)
000117 e0a0      	LDI  R26,HIGH(0x7)
000118 07fa      	CPC  R31,R26
000119 f419      	BRNE _0x52
                 ; 0000 00F3         {
                 ; 0000 00F4             byte3 = 0x10;
00011a e130      	LDI  R19,LOW(16)
                 ; 0000 00F5             byte2 = 0x00;
00011b e000      	LDI  R16,LOW(0)
                 ; 0000 00F6             break;
00011c c023      	RJMP _0x4B
                 ; 0000 00F7         }
                 ; 0000 00F8         case    8:
                 _0x52:
00011d 30e8      	CPI  R30,LOW(0x8)
00011e e0a0      	LDI  R26,HIGH(0x8)
00011f 07fa      	CPC  R31,R26
000120 f419      	BRNE _0x53
                 ; 0000 00F9         {
                 ; 0000 00FA             byte3 = 0x80;
000121 e830      	LDI  R19,LOW(128)
                 ; 0000 00FB             byte2 = 0x00;
000122 e000      	LDI  R16,LOW(0)
                 ; 0000 00FC             break;
000123 c01c      	RJMP _0x4B
                 ; 0000 00FD         }
                 ; 0000 00FE         case    9:
                 _0x53:
000124 30e9      	CPI  R30,LOW(0x9)
000125 e0a0      	LDI  R26,HIGH(0x9)
000126 07fa      	CPC  R31,R26
000127 f419      	BRNE _0x54
                 ; 0000 00FF         {
                 ; 0000 0100             byte3 = 0x00;
000128 e030      	LDI  R19,LOW(0)
                 ; 0000 0101             byte2 = 0x40;
000129 e400      	LDI  R16,LOW(64)
                 ; 0000 0102             break;
00012a c015      	RJMP _0x4B
                 ; 0000 0103         }
                 ; 0000 0104         case    10:
                 _0x54:
00012b 30ea      	CPI  R30,LOW(0xA)
00012c e0a0      	LDI  R26,HIGH(0xA)
00012d 07fa      	CPC  R31,R26
00012e f421      	BRNE _0x55
                 ; 0000 0105         {
                 ; 0000 0106             byte3 = 0x00;
00012f e030      	LDI  R19,LOW(0)
                 ; 0000 0107             byte2 = 0x20;
000130 e200      	LDI  R16,LOW(32)
                 ; 0000 0108             byte1 = 0x04;
000131 e014      	LDI  R17,LOW(4)
                 ; 0000 0109             break;
000132 c00d      	RJMP _0x4B
                 ; 0000 010A         }
                 ; 0000 010B         case    11:
                 _0x55:
000133 30eb      	CPI  R30,LOW(0xB)
000134 e0a0      	LDI  R26,HIGH(0xB)
000135 07fa      	CPC  R31,R26
000136 f419      	BRNE _0x56
                 ; 0000 010C         {
                 ; 0000 010D             byte3 = 0x00;
000137 e030      	LDI  R19,LOW(0)
                 ; 0000 010E             byte2 = 0x10;
000138 e100      	LDI  R16,LOW(16)
                 ; 0000 010F             break;
000139 c006      	RJMP _0x4B
                 ; 0000 0110         }
                 ; 0000 0111         case    12:
                 _0x56:
00013a 30ec      	CPI  R30,LOW(0xC)
00013b e0a0      	LDI  R26,HIGH(0xC)
00013c 07fa      	CPC  R31,R26
00013d f411      	BRNE _0x4B
                 ; 0000 0112         {
                 ; 0000 0113             byte3 = 0x00;
00013e e030      	LDI  R19,LOW(0)
                 ; 0000 0114             byte2 = 0x80;
00013f e800      	LDI  R16,LOW(128)
                 ; 0000 0115             break;
                 ; 0000 0116         }
                 ; 0000 0117     }
                 _0x4B:
                 ; 0000 0118     switch(data)
000140 81ec      	LDD  R30,Y+4
000141 e0f0      	LDI  R31,0
                 ; 0000 0119     {
                 ; 0000 011A         case    0:
000142 9730      	SBIW R30,0
000143 f411      	BRNE _0x5B
                 ; 0000 011B         {
                 ; 0000 011C             byte1 |= 0xF9;
000144 6f19      	ORI  R17,LOW(249)
                 ; 0000 011D             break;
000145 c031      	RJMP _0x5A
                 ; 0000 011E         }
                 ; 0000 011F         case    1:
                 _0x5B:
000146 30e1      	CPI  R30,LOW(0x1)
000147 e0a0      	LDI  R26,HIGH(0x1)
000148 07fa      	CPC  R31,R26
000149 f411      	BRNE _0x5C
                 ; 0000 0120         {
                 ; 0000 0121             byte1 |= 0x81;
00014a 6811      	ORI  R17,LOW(129)
                 ; 0000 0122             break;
00014b c02b      	RJMP _0x5A
                 ; 0000 0123         }
                 ; 0000 0124         case    2:
                 _0x5C:
00014c d166      	RCALL SUBOPT_0x6
00014d f411      	BRNE _0x5D
                 ; 0000 0125         {
                 ; 0000 0126             byte1 |= 0xBA;
00014e 6b1a      	ORI  R17,LOW(186)
                 ; 0000 0127             break;
00014f c027      	RJMP _0x5A
                 ; 0000 0128         }
                 ; 0000 0129         case    3:
                 _0x5D:
000150 d166      	RCALL SUBOPT_0x7
000151 f411      	BRNE _0x5E
                 ; 0000 012A         {
                 ; 0000 012B             byte1 |= 0xAB;
000152 6a1b      	ORI  R17,LOW(171)
                 ; 0000 012C             break;
000153 c023      	RJMP _0x5A
                 ; 0000 012D         }
                 ; 0000 012E         case    4:
                 _0x5E:
000154 30e4      	CPI  R30,LOW(0x4)
000155 e0a0      	LDI  R26,HIGH(0x4)
000156 07fa      	CPC  R31,R26
000157 f411      	BRNE _0x5F
                 ; 0000 012F         {
                 ; 0000 0130             byte1 |= 0xC3;
000158 6c13      	ORI  R17,LOW(195)
                 ; 0000 0131             break;
000159 c01d      	RJMP _0x5A
                 ; 0000 0132         }
                 ; 0000 0133         case    5:
                 _0x5F:
00015a 30e5      	CPI  R30,LOW(0x5)
00015b e0a0      	LDI  R26,HIGH(0x5)
00015c 07fa      	CPC  R31,R26
00015d f411      	BRNE _0x60
                 ; 0000 0134         {
                 ; 0000 0135             byte1 |= 0x6B;
00015e 661b      	ORI  R17,LOW(107)
                 ; 0000 0136             break;
00015f c017      	RJMP _0x5A
                 ; 0000 0137         }
                 ; 0000 0138         case    6:
                 _0x60:
000160 30e6      	CPI  R30,LOW(0x6)
000161 e0a0      	LDI  R26,HIGH(0x6)
000162 07fa      	CPC  R31,R26
000163 f411      	BRNE _0x61
                 ; 0000 0139         {
                 ; 0000 013A             byte1 |= 0x7B;
000164 671b      	ORI  R17,LOW(123)
                 ; 0000 013B             break;
000165 c011      	RJMP _0x5A
                 ; 0000 013C         }
                 ; 0000 013D         case    7:
                 _0x61:
000166 30e7      	CPI  R30,LOW(0x7)
000167 e0a0      	LDI  R26,HIGH(0x7)
000168 07fa      	CPC  R31,R26
000169 f411      	BRNE _0x62
                 ; 0000 013E         {
                 ; 0000 013F             byte1 = 0xA1;
00016a ea11      	LDI  R17,LOW(161)
                 ; 0000 0140             break;
00016b c00b      	RJMP _0x5A
                 ; 0000 0141         }
                 ; 0000 0142         case    8:
                 _0x62:
00016c 30e8      	CPI  R30,LOW(0x8)
00016d e0a0      	LDI  R26,HIGH(0x8)
00016e 07fa      	CPC  R31,R26
00016f f411      	BRNE _0x63
                 ; 0000 0143         {
                 ; 0000 0144             byte1 |= 0xFB;
000170 6f1b      	ORI  R17,LOW(251)
                 ; 0000 0145             break;
000171 c005      	RJMP _0x5A
                 ; 0000 0146         }
                 ; 0000 0147         case    9:
                 _0x63:
000172 30e9      	CPI  R30,LOW(0x9)
000173 e0a0      	LDI  R26,HIGH(0x9)
000174 07fa      	CPC  R31,R26
000175 f409      	BRNE _0x5A
                 ; 0000 0148         {
                 ; 0000 0149             byte1 |= 0xEB;
000176 6e1b      	ORI  R17,LOW(235)
                 ; 0000 014A             break;
                 ; 0000 014B         }
                 ; 0000 014C     }
                 _0x5A:
                 ; 0000 014D     SEND_DATA_LED(byte1,byte2,byte3);
000177 931a      	ST   -Y,R17
000178 930a      	ST   -Y,R16
000179 2fa3      	MOV  R26,R19
00017a df44      	RCALL _SEND_DATA_LED
                 ; 0000 014E }
00017b d1c3      	RCALL __LOADLOCR4
00017c 9626      	ADIW R28,6
00017d 9508      	RET
                 ; .FEND
                 ;
                 ;void    SPI_7753_SEND(unsigned char data)
                 ; 0000 0151 {
                 _SPI_7753_SEND:
                 ; .FSTART _SPI_7753_SEND
                 ; 0000 0152     unsigned char cnt;
                 ; 0000 0153     unsigned char   tmp = data;
                 ; 0000 0154     for(cnt = 0;cnt < 8; cnt++)
00017e 93aa      	ST   -Y,R26
00017f d1bc      	RCALL __SAVELOCR2
                 ;	data -> Y+2
                 ;	cnt -> R17
                 ;	tmp -> R16
000180 810a      	LDD  R16,Y+2
000181 e010      	LDI  R17,LOW(0)
                 _0x66:
000182 3018      	CPI  R17,8
000183 f450      	BRSH _0x67
                 ; 0000 0155     {
                 ; 0000 0156         if((tmp & 0x80) == 0x80)   DOUT_MOSI_SPI_7753_MCU = 1;
000184 d121      	RCALL SUBOPT_0x3
000185 f411      	BRNE _0x68
000186 9a91      	SBI  0x12,1
                 ; 0000 0157         else DOUT_MOSI_SPI_7753_MCU = 0;
000187 c001      	RJMP _0x6B
                 _0x68:
000188 9891      	CBI  0x12,1
                 ; 0000 0158 
                 ; 0000 0159         tmp <<= 1;
                 _0x6B:
000189 0f00      	LSL  R16
                 ; 0000 015A         DOUT_CLK_SPI_7753_MCU = 1;
00018a d130      	RCALL SUBOPT_0x8
                 ; 0000 015B         delay_us(40);
                 ; 0000 015C         DOUT_CLK_SPI_7753_MCU = 0;
00018b d134      	RCALL SUBOPT_0x9
                 ; 0000 015D         delay_us(40);
                 ; 0000 015E     }
00018c 5f1f      	SUBI R17,-1
00018d cff4      	RJMP _0x66
                 _0x67:
                 ; 0000 015F }
00018e d1b2      	RCALL __LOADLOCR2
00018f 9623      	ADIW R28,3
000190 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char    SPI_7753_RECEIVE(void)
                 ; 0000 0162 {
                 _SPI_7753_RECEIVE:
                 ; .FSTART _SPI_7753_RECEIVE
                 ; 0000 0163     unsigned char cnt;
                 ; 0000 0164     unsigned char data;
                 ; 0000 0165     data = 0;
000191 d1aa      	RCALL __SAVELOCR2
                 ;	cnt -> R17
                 ;	data -> R16
000192 e000      	LDI  R16,LOW(0)
                 ; 0000 0166     for(cnt = 0;cnt < 8; cnt++)
000193 e010      	LDI  R17,LOW(0)
                 _0x73:
000194 3018      	CPI  R17,8
000195 f438      	BRSH _0x74
                 ; 0000 0167     {
                 ; 0000 0168         DOUT_CLK_SPI_7753_MCU = 1;
000196 d124      	RCALL SUBOPT_0x8
                 ; 0000 0169         delay_us(40);
                 ; 0000 016A         // DOUT_CLK_SPI_7753_MCU = 0;
                 ; 0000 016B         // delay_us(40);
                 ; 0000 016C         if(DIN_MISO_SPI_7753_MCU == 1)   data += 1;
000197 9980      	SBIC 0x10,0
000198 5f0f      	SUBI R16,-LOW(1)
                 ; 0000 016D         data <<= 1;
000199 0f00      	LSL  R16
                 ; 0000 016E         DOUT_CLK_SPI_7753_MCU = 0;
00019a d125      	RCALL SUBOPT_0x9
                 ; 0000 016F         delay_us(40);
                 ; 0000 0170     }
00019b 5f1f      	SUBI R17,-1
00019c cff7      	RJMP _0x73
                 _0x74:
                 ; 0000 0171     return data;
00019d 2fe0      	MOV  R30,R16
00019e 9109      	LD   R16,Y+
00019f 9119      	LD   R17,Y+
0001a0 9508      	RET
                 ; 0000 0172 }
                 ; .FEND
                 ;
                 ;void    ADE7753_WRITE(unsigned char IC_CS,unsigned char addr,unsigned char num_data,unsigned char data_1,unsigned char d ...
                 ; 0000 0175 {
                 _ADE7753_WRITE:
                 ; .FSTART _ADE7753_WRITE
                 ; 0000 0176     unsigned char data[4];
                 ; 0000 0177     unsigned char   i;
                 ; 0000 0178     data[0] = data_1;
0001a1 93aa      	ST   -Y,R26
0001a2 9724      	SBIW R28,4
0001a3 931a      	ST   -Y,R17
                 ;	IC_CS -> Y+10
                 ;	addr -> Y+9
                 ;	num_data -> Y+8
                 ;	data_1 -> Y+7
                 ;	data_2 -> Y+6
                 ;	data_3 -> Y+5
                 ;	data -> Y+1
                 ;	i -> R17
0001a4 81ef      	LDD  R30,Y+7
0001a5 83e9      	STD  Y+1,R30
                 ; 0000 0179     data[1] = data_2;
0001a6 81ee      	LDD  R30,Y+6
0001a7 83ea      	STD  Y+2,R30
                 ; 0000 017A     data[2] = data_3;
0001a8 81ed      	LDD  R30,Y+5
0001a9 83eb      	STD  Y+3,R30
                 ; 0000 017B 
                 ; 0000 017C     switch (IC_CS)
0001aa 85ea      	LDD  R30,Y+10
0001ab d102      	RCALL SUBOPT_0x5
                 ; 0000 017D     {
                 ; 0000 017E         case 1:
0001ac f419      	BRNE _0x7D
                 ; 0000 017F         {
                 ; 0000 0180             PHASE_1_ON;
0001ad 9aac      	SBI  0x15,4
                 ; 0000 0181             PHASE_2_OFF;
0001ae d116      	RCALL SUBOPT_0xA
                 ; 0000 0182             PHASE_3_OFF;
                 ; 0000 0183             break;
0001af c00b      	RJMP _0x7C
                 ; 0000 0184         }
                 ; 0000 0185         case 2:
                 _0x7D:
0001b0 d102      	RCALL SUBOPT_0x6
0001b1 f421      	BRNE _0x84
                 ; 0000 0186         {
                 ; 0000 0187             PHASE_1_OFF;
0001b2 98ac      	CBI  0x15,4
                 ; 0000 0188             PHASE_2_ON;
0001b3 9aad      	SBI  0x15,5
                 ; 0000 0189             PHASE_3_OFF;
0001b4 98ab      	CBI  0x15,3
                 ; 0000 018A             break;
0001b5 c005      	RJMP _0x7C
                 ; 0000 018B         }
                 ; 0000 018C         case 3:
                 _0x84:
0001b6 d100      	RCALL SUBOPT_0x7
0001b7 f419      	BRNE _0x7C
                 ; 0000 018D         {
                 ; 0000 018E             PHASE_1_OFF;
0001b8 98ac      	CBI  0x15,4
                 ; 0000 018F             PHASE_2_OFF;
0001b9 98ad      	CBI  0x15,5
                 ; 0000 0190             PHASE_3_ON;
0001ba 9aab      	SBI  0x15,3
                 ; 0000 0191             break;
                 ; 0000 0192         }
                 ; 0000 0193     }
                 _0x7C:
                 ; 0000 0194     addr |= 0x80;
0001bb 85e9      	LDD  R30,Y+9
0001bc 68e0      	ORI  R30,0x80
0001bd 87e9      	STD  Y+9,R30
                 ; 0000 0195     SPI_7753_SEND(addr);
0001be 85a9      	LDD  R26,Y+9
0001bf dfbe      	RCALL _SPI_7753_SEND
                 ; 0000 0196     delay_us(20);
                +
0001c0 e48a     +LDI R24 , LOW ( 74 )
                +__DELAY_USB_LOOP :
0001c1 958a     +DEC R24
0001c2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 74
                 ; 0000 0197     for(i=0;i<num_data;i++)    SPI_7753_SEND(data[i]);
0001c3 e010      	LDI  R17,LOW(0)
                 _0x93:
0001c4 85e8      	LDD  R30,Y+8
0001c5 171e      	CP   R17,R30
0001c6 f448      	BRSH _0x94
0001c7 d100      	RCALL SUBOPT_0xB
0001c8 01de      	MOVW R26,R28
0001c9 9611      	ADIW R26,1
0001ca 0fae      	ADD  R26,R30
0001cb 1fbf      	ADC  R27,R31
0001cc 91ac      	LD   R26,X
0001cd dfb0      	RCALL _SPI_7753_SEND
0001ce 5f1f      	SUBI R17,-1
0001cf cff4      	RJMP _0x93
                 _0x94:
                 ; 0000 0198 PORTC.4 = 0;
0001d0 98ac      	CBI  0x15,4
                 ; 0000 0199     PHASE_2_OFF;
0001d1 d0f3      	RCALL SUBOPT_0xA
                 ; 0000 019A     PHASE_3_OFF;
                 ; 0000 019B }
0001d2 8118      	LDD  R17,Y+0
0001d3 962b      	ADIW R28,11
0001d4 9508      	RET
                 ; .FEND
                 ;unsigned long int    ADE7753_READ(unsigned char IC_CS,unsigned char addr,unsigned char num_data)
                 ; 0000 019D {
                 _ADE7753_READ:
                 ; .FSTART _ADE7753_READ
                 ; 0000 019E     unsigned char   i;
                 ; 0000 019F     unsigned char   data[4];
                 ; 0000 01A0     unsigned long int res;
                 ; 0000 01A1     for(i=0;i<4;i++)    data[i] = 0;
0001d5 93aa      	ST   -Y,R26
0001d6 9728      	SBIW R28,8
0001d7 931a      	ST   -Y,R17
                 ;	IC_CS -> Y+11
                 ;	addr -> Y+10
                 ;	num_data -> Y+9
                 ;	i -> R17
                 ;	data -> Y+5
                 ;	res -> Y+1
0001d8 e010      	LDI  R17,LOW(0)
                 _0x9C:
0001d9 3014      	CPI  R17,4
0001da f448      	BRSH _0x9D
0001db d0ec      	RCALL SUBOPT_0xB
0001dc 01de      	MOVW R26,R28
0001dd 9615      	ADIW R26,5
0001de 0fae      	ADD  R26,R30
0001df 1fbf      	ADC  R27,R31
0001e0 e0e0      	LDI  R30,LOW(0)
0001e1 93ec      	ST   X,R30
0001e2 5f1f      	SUBI R17,-1
0001e3 cff5      	RJMP _0x9C
                 _0x9D:
                 ; 0000 01A2 switch (IC_CS)
0001e4 85eb      	LDD  R30,Y+11
0001e5 d0c8      	RCALL SUBOPT_0x5
                 ; 0000 01A3     {
                 ; 0000 01A4         case 1:
0001e6 f419      	BRNE _0xA1
                 ; 0000 01A5         {
                 ; 0000 01A6             PHASE_1_ON;
0001e7 9aac      	SBI  0x15,4
                 ; 0000 01A7             PHASE_2_OFF;
0001e8 d0dc      	RCALL SUBOPT_0xA
                 ; 0000 01A8             PHASE_3_OFF;
                 ; 0000 01A9             break;
0001e9 c00b      	RJMP _0xA0
                 ; 0000 01AA         }
                 ; 0000 01AB         case 2:
                 _0xA1:
0001ea d0c8      	RCALL SUBOPT_0x6
0001eb f421      	BRNE _0xA8
                 ; 0000 01AC         {
                 ; 0000 01AD             PHASE_1_OFF;
0001ec 98ac      	CBI  0x15,4
                 ; 0000 01AE             PHASE_2_ON;
0001ed 9aad      	SBI  0x15,5
                 ; 0000 01AF             PHASE_3_OFF;
0001ee 98ab      	CBI  0x15,3
                 ; 0000 01B0             break;
0001ef c005      	RJMP _0xA0
                 ; 0000 01B1         }
                 ; 0000 01B2         case 3:
                 _0xA8:
0001f0 d0c6      	RCALL SUBOPT_0x7
0001f1 f419      	BRNE _0xA0
                 ; 0000 01B3         {
                 ; 0000 01B4             PHASE_1_OFF;
0001f2 98ac      	CBI  0x15,4
                 ; 0000 01B5             PHASE_2_OFF;
0001f3 98ad      	CBI  0x15,5
                 ; 0000 01B6             PHASE_3_ON;
0001f4 9aab      	SBI  0x15,3
                 ; 0000 01B7             break;
                 ; 0000 01B8         }
                 ; 0000 01B9     }
                 _0xA0:
                 ; 0000 01BA     addr &= 0x3F;
0001f5 85ea      	LDD  R30,Y+10
0001f6 73ef      	ANDI R30,LOW(0x3F)
0001f7 87ea      	STD  Y+10,R30
                 ; 0000 01BB     SPI_7753_SEND(addr);
0001f8 85aa      	LDD  R26,Y+10
0001f9 df84      	RCALL _SPI_7753_SEND
                 ; 0000 01BC     for(i=0;i<num_data;i++) data[i] = SPI_7753_RECEIVE();
0001fa e010      	LDI  R17,LOW(0)
                 _0xB7:
0001fb 85e9      	LDD  R30,Y+9
0001fc 171e      	CP   R17,R30
0001fd f468      	BRSH _0xB8
0001fe d0c9      	RCALL SUBOPT_0xB
0001ff 01de      	MOVW R26,R28
000200 9615      	ADIW R26,5
000201 0fea      	ADD  R30,R26
000202 1ffb      	ADC  R31,R27
000203 93ff      	PUSH R31
000204 93ef      	PUSH R30
000205 df8b      	RCALL _SPI_7753_RECEIVE
000206 91af      	POP  R26
000207 91bf      	POP  R27
000208 93ec      	ST   X,R30
000209 5f1f      	SUBI R17,-1
00020a cff0      	RJMP _0xB7
                 _0xB8:
                 ; 0000 01BD PORTC.4 = 0;
00020b 98ac      	CBI  0x15,4
                 ; 0000 01BE     PHASE_2_OFF;
00020c d0b8      	RCALL SUBOPT_0xA
                 ; 0000 01BF     PHASE_3_OFF;
                 ; 0000 01C0     res = 0;
00020d e0e0      	LDI  R30,LOW(0)
                +
00020e 83e9     +STD Y + 1 , R30
00020f 83ea     +STD Y + 1 + 1 , R30
000210 83eb     +STD Y + 1 + 2 , R30
000211 83ec     +STD Y + 1 + 3 , R30
                 	__CLRD1S 1
                 ; 0000 01C1     for(i=0;i<num_data;i++)
000212 e010      	LDI  R17,LOW(0)
                 _0xC0:
000213 85e9      	LDD  R30,Y+9
000214 171e      	CP   R17,R30
000215 f488      	BRSH _0xC1
                 ; 0000 01C2     {
                 ; 0000 01C3         res <<= 8;
000216 d0b4      	RCALL SUBOPT_0xC
000217 e0e8      	LDI  R30,LOW(8)
000218 d0d5      	RCALL __LSLD12
000219 d0b6      	RCALL SUBOPT_0xD
                 ; 0000 01C4         res += data[i];
00021a d0ad      	RCALL SUBOPT_0xB
00021b 01de      	MOVW R26,R28
00021c 9615      	ADIW R26,5
00021d 0fae      	ADD  R26,R30
00021e 1fbf      	ADC  R27,R31
00021f 91ec      	LD   R30,X
000220 e0f0      	LDI  R31,0
000221 d0a9      	RCALL SUBOPT_0xC
000222 d0d7      	RCALL __CWD1
000223 d0c5      	RCALL __ADDD12
000224 d0ab      	RCALL SUBOPT_0xD
                 ; 0000 01C5     }
000225 5f1f      	SUBI R17,-1
000226 cfec      	RJMP _0xC0
                 _0xC1:
                 ; 0000 01C6     Uint_dataLed2 = data[0];
000227 80ad      	LDD  R10,Y+5
000228 24bb      	CLR  R11
                 ; 0000 01C7 
                 ; 0000 01C8     return (res/3600);
000229 d0a1      	RCALL SUBOPT_0xC
                +
00022a e1e0     +LDI R30 , LOW ( 0xE10 )
00022b e0fe     +LDI R31 , HIGH ( 0xE10 )
00022c e060     +LDI R22 , BYTE3 ( 0xE10 )
00022d e070     +LDI R23 , BYTE4 ( 0xE10 )
                 	__GETD1N 0xE10
00022e d0e3      	RCALL __DIVD21U
00022f 8118      	LDD  R17,Y+0
000230 962c      	ADIW R28,12
000231 9508      	RET
                 ; 0000 01C9 }
                 ; .FEND
                 ;
                 ;void    ADE7753_INIT(void)
                 ; 0000 01CC {
                 _ADE7753_INIT:
                 ; .FSTART _ADE7753_INIT
                 ; 0000 01CD     ADE7753_WRITE(1,MODE,0x00,0x00,0x00);
000232 d0a2      	RCALL SUBOPT_0xE
000233 e0e9      	LDI  R30,LOW(9)
000234 93ea      	ST   -Y,R30
000235 e0e2      	LDI  R30,LOW(2)
000236 d0a1      	RCALL SUBOPT_0xF
000237 d0a0      	RCALL SUBOPT_0xF
000238 d0a2      	RCALL SUBOPT_0x10
                 ; 0000 01CE     ADE7753_WRITE(1,SAGLVL,0X2a,0X00,0X00);
000239 e1ef      	LDI  R30,LOW(31)
00023a 93ea      	ST   -Y,R30
00023b d099      	RCALL SUBOPT_0xE
00023c e2ea      	LDI  R30,LOW(42)
00023d d09a      	RCALL SUBOPT_0xF
00023e d09c      	RCALL SUBOPT_0x10
                 ; 0000 01CF     ADE7753_WRITE(1,SAGCYC,0X04,0X00,0X00);
00023f e1ee      	LDI  R30,LOW(30)
000240 93ea      	ST   -Y,R30
000241 d093      	RCALL SUBOPT_0xE
000242 e0e4      	LDI  R30,LOW(4)
000243 d094      	RCALL SUBOPT_0xF
000244 93ea      	ST   -Y,R30
000245 e0a0      	LDI  R26,LOW(0)
000246 df5a      	RCALL _ADE7753_WRITE
                 ; 0000 01D0 }
000247 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void    READ_AMP(void)
                 ; 0000 01D4 {
                 _READ_AMP:
                 ; .FSTART _READ_AMP
                 ; 0000 01D5     unsigned long Uint_Tmp;
                 ; 0000 01D6     unsigned long Uint_CurrentTmp_Array[NUM_SAMPLE];
                 ; 0000 01D7     unsigned char   Uc_loop1_cnt,Uc_loop2_cnt;
                 ; 0000 01D8     unsigned long   Ul_Sum;
                 ; 0000 01D9 
                 ; 0000 01DA     // Uint_Current1_Array[Uc_Current_Array_Cnt] = (unsigned int)ADE7753_READ(1,IRMS)/100;
                 ; 0000 01DB     Uint_dataLed1 = ADE7753_READ(1,IRMS);
000248 97ef      	SBIW R28,63
000249 9769      	SBIW R28,25
00024a d0f1      	RCALL __SAVELOCR2
                 ;	Uint_Tmp -> Y+86
                 ;	Uint_CurrentTmp_Array -> Y+6
                 ;	Uc_loop1_cnt -> R17
                 ;	Uc_loop2_cnt -> R16
                 ;	Ul_Sum -> Y+2
00024b d089      	RCALL SUBOPT_0xE
00024c e1e6      	LDI  R30,LOW(22)
00024d 93ea      	ST   -Y,R30
00024e e0a3      	LDI  R26,LOW(3)
00024f df85      	RCALL _ADE7753_READ
000250 014f      	MOVW R8,R30
                 ; 0000 01DC     //Uint_Current2_Array[Uc_Current_Array_Cnt] = (unsigned int)ADE7753_READ(2,IRMS)/100;
                 ; 0000 01DD     //Uint_Current3_Array[Uc_Current_Array_Cnt] = (unsigned int)ADE7753_READ(3,IRMS)/100;
                 ; 0000 01DE     Uc_Current_Array_Cnt++;
000251 9463      	INC  R6
                 ; 0000 01DF     if(Uc_Current_Array_Cnt >= NUM_SAMPLE)
000252 e1e4      	LDI  R30,LOW(20)
000253 166e      	CP   R6,R30
000254 f018      	BRLO _0xC2
                 ; 0000 01E0     {
                 ; 0000 01E1         Bit_sample_full = 1;
000255 9468      	SET
000256 f820      	BLD  R2,0
                 ; 0000 01E2         Uc_Current_Array_Cnt = 0;
000257 2466      	CLR  R6
                 ; 0000 01E3     }
                 ; 0000 01E4 
                 ; 0000 01E5     // if(Bit_sample_full == 0)
                 ; 0000 01E6     // {
                 ; 0000 01E7     //     Uint_dataLed1 = 0;
                 ; 0000 01E8     //     //Uint_dataLed2 = 0;
                 ; 0000 01E9     //    //Uint_dataLed3 = 0;
                 ; 0000 01EA     // }
                 ; 0000 01EB     // else
                 ; 0000 01EC     // {
                 ; 0000 01ED     //     /* Chuyen sang bo nho dem*/
                 ; 0000 01EE     //     for(Uc_loop1_cnt = 0; Uc_loop1_cnt<NUM_SAMPLE; Uc_loop1_cnt++)
                 ; 0000 01EF     //     {
                 ; 0000 01F0     //         Uint_CurrentTmp_Array[Uc_loop1_cnt] = Uint_Current1_Array[Uc_loop1_cnt];
                 ; 0000 01F1     //     }
                 ; 0000 01F2     //     /* Sắp xếp tu min-> max*/
                 ; 0000 01F3     //     for(Uc_loop1_cnt = 0; Uc_loop1_cnt<NUM_SAMPLE; Uc_loop1_cnt++)
                 ; 0000 01F4     //     {
                 ; 0000 01F5     //         for(Uc_loop2_cnt = Uc_loop1_cnt; Uc_loop2_cnt<NUM_SAMPLE; Uc_loop2_cnt++)
                 ; 0000 01F6     //         {
                 ; 0000 01F7     //             if(Uint_CurrentTmp_Array[Uc_loop1_cnt] > Uint_CurrentTmp_Array[Uc_loop2_cnt])
                 ; 0000 01F8     //             {
                 ; 0000 01F9     //                 Uint_Tmp = Uint_CurrentTmp_Array[Uc_loop1_cnt];
                 ; 0000 01FA     //                 Uint_CurrentTmp_Array[Uc_loop1_cnt] = Uint_CurrentTmp_Array[Uc_loop2_cnt];
                 ; 0000 01FB     //                 Uint_CurrentTmp_Array[Uc_loop2_cnt] = Uint_Tmp;
                 ; 0000 01FC     //             }
                 ; 0000 01FD     //         }
                 ; 0000 01FE     //     }
                 ; 0000 01FF 
                 ; 0000 0200     //     Ul_Sum = 0;
                 ; 0000 0201     //     for(Uc_loop1_cnt = NUM_FILTER;Uc_loop1_cnt<(NUM_SAMPLE - NUM_FILTER); Uc_loop1_cnt++)
                 ; 0000 0202     //     {
                 ; 0000 0203     //         Ul_Sum += Uint_CurrentTmp_Array[Uc_loop1_cnt];
                 ; 0000 0204     //     }
                 ; 0000 0205     //     Ul_Sum = Ul_Sum/(NUM_SAMPLE-2*NUM_FILTER);
                 ; 0000 0206 
                 ; 0000 0207     //     Uint_dataLed1 = (unsigned int) Ul_Sum;
                 ; 0000 0208     // }
                 ; 0000 0209 }
                 _0xC2:
000258 d0e8      	RCALL __LOADLOCR2
000259 96ef      	ADIW R28,63
00025a 966b      	ADIW R28,27
00025b 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 020C {
                 _main:
                 ; .FSTART _main
                 ; 0000 020D // Declare your local variables here
                 ; 0000 020E // Input/Output Ports initialization
                 ; 0000 020F // Port B initialization
                 ; 0000 0210 // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=Out Bit2=In Bit1=Out Bit0=In
                 ; 0000 0211 DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (0<<DDB2) | (1<<DDB1) | (0<<DDB0);
00025c e3ea      	LDI  R30,LOW(58)
00025d bbe7      	OUT  0x17,R30
                 ; 0000 0212 // State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=0 Bit2=T Bit1=0 Bit0=T
                 ; 0000 0213 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00025e e0e0      	LDI  R30,LOW(0)
00025f bbe8      	OUT  0x18,R30
                 ; 0000 0214 
                 ; 0000 0215 // Port C initialization
                 ; 0000 0216 // Function: Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=In Bit0=In
                 ; 0000 0217 DDRC=(0<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (0<<DDC1) | (0<<DDC0);
000260 e3ec      	LDI  R30,LOW(60)
000261 bbe4      	OUT  0x14,R30
                 ; 0000 0218 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0219 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000262 e0e0      	LDI  R30,LOW(0)
000263 bbe5      	OUT  0x15,R30
                 ; 0000 021A 
                 ; 0000 021B // Port D initialization
                 ; 0000 021C // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=Out
                 ; 0000 021D DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (1<<DDD4) | (0<<DDD3) | (0<<DDD2) | (1<<DDD1) | (0<<DDD0);
000264 e1e2      	LDI  R30,LOW(18)
000265 bbe1      	OUT  0x11,R30
                 ; 0000 021E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 021F PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000266 e0e0      	LDI  R30,LOW(0)
000267 bbe2      	OUT  0x12,R30
                 ; 0000 0220 
                 ; 0000 0221 // Timer/Counter 0 initialization
                 ; 0000 0222 // Clock source: System Clock
                 ; 0000 0223 // Clock value: Timer 0 Stopped
                 ; 0000 0224 TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
000268 bfe3      	OUT  0x33,R30
                 ; 0000 0225 TCNT0=0x94;
000269 e9e4      	LDI  R30,LOW(148)
00026a bfe2      	OUT  0x32,R30
                 ; 0000 0226 
                 ; 0000 0227 // Timer/Counter 1 initialization
                 ; 0000 0228 // Clock source: System Clock
                 ; 0000 0229 // Clock value: 11059.200 kHz
                 ; 0000 022A // Mode: Normal top=0xFFFF
                 ; 0000 022B // OC1A output: Disconnected
                 ; 0000 022C // OC1B output: Disconnected
                 ; 0000 022D // Noise Canceler: Off
                 ; 0000 022E // Input Capture on Falling Edge
                 ; 0000 022F // Timer Period: 2 ms
                 ; 0000 0230 // Timer1 Overflow Interrupt: On
                 ; 0000 0231 // Input Capture Interrupt: Off
                 ; 0000 0232 // Compare A Match Interrupt: Off
                 ; 0000 0233 // Compare B Match Interrupt: Off
                 ; 0000 0234 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00026b e0e0      	LDI  R30,LOW(0)
00026c bdef      	OUT  0x2F,R30
                 ; 0000 0235 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
00026d e0e1      	LDI  R30,LOW(1)
00026e bdee      	OUT  0x2E,R30
                 ; 0000 0236 TCNT1H=0xA9;
00026f eae9      	LDI  R30,LOW(169)
000270 bded      	OUT  0x2D,R30
                 ; 0000 0237 TCNT1L=0x9A;
000271 e9ea      	LDI  R30,LOW(154)
000272 bdec      	OUT  0x2C,R30
                 ; 0000 0238 ICR1H=0x00;
000273 e0e0      	LDI  R30,LOW(0)
000274 bde7      	OUT  0x27,R30
                 ; 0000 0239 ICR1L=0x00;
000275 bde6      	OUT  0x26,R30
                 ; 0000 023A OCR1AH=0x00;
000276 bdeb      	OUT  0x2B,R30
                 ; 0000 023B OCR1AL=0x00;
000277 bdea      	OUT  0x2A,R30
                 ; 0000 023C OCR1BH=0x00;
000278 bde9      	OUT  0x29,R30
                 ; 0000 023D OCR1BL=0x00;
000279 bde8      	OUT  0x28,R30
                 ; 0000 023E 
                 ; 0000 023F // Timer/Counter 2 initialization
                 ; 0000 0240 // Clock source: System Clock
                 ; 0000 0241 // Clock value: Timer2 Stopped
                 ; 0000 0242 // Mode: Normal top=0xFF
                 ; 0000 0243 // OC2 output: Disconnected
                 ; 0000 0244 ASSR=0<<AS2;
00027a bde2      	OUT  0x22,R30
                 ; 0000 0245 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
00027b bde5      	OUT  0x25,R30
                 ; 0000 0246 TCNT2=0x00;
00027c bde4      	OUT  0x24,R30
                 ; 0000 0247 OCR2=0x00;
00027d bde3      	OUT  0x23,R30
                 ; 0000 0248 
                 ; 0000 0249 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 024A TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<TOIE0);
00027e e0e4      	LDI  R30,LOW(4)
00027f bfe9      	OUT  0x39,R30
                 ; 0000 024B 
                 ; 0000 024C // External Interrupt(s) initialization
                 ; 0000 024D // INT0: Off
                 ; 0000 024E // INT1: Off
                 ; 0000 024F MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000280 e0e0      	LDI  R30,LOW(0)
000281 bfe5      	OUT  0x35,R30
                 ; 0000 0250 
                 ; 0000 0251 // USART initialization
                 ; 0000 0252 // USART disabled
                 ; 0000 0253 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000282 b9ea      	OUT  0xA,R30
                 ; 0000 0254 
                 ; 0000 0255 // Analog Comparator initialization
                 ; 0000 0256 // Analog Comparator: Off
                 ; 0000 0257 // The Analog Comparator's positive input is
                 ; 0000 0258 // connected to the AIN0 pin
                 ; 0000 0259 // The Analog Comparator's negative input is
                 ; 0000 025A // connected to the AIN1 pin
                 ; 0000 025B ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000283 e8e0      	LDI  R30,LOW(128)
000284 b9e8      	OUT  0x8,R30
                 ; 0000 025C 
                 ; 0000 025D // ADC initialization
                 ; 0000 025E // ADC Clock frequency: 345.600 kHz
                 ; 0000 025F // ADC Voltage Reference: AREF pin
                 ; 0000 0260 ADMUX=ADC_VREF_TYPE;
000285 e4e0      	LDI  R30,LOW(64)
000286 b9e7      	OUT  0x7,R30
                 ; 0000 0261 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
000287 e8e5      	LDI  R30,LOW(133)
000288 b9e6      	OUT  0x6,R30
                 ; 0000 0262 SFIOR=(0<<ACME);
000289 e0e0      	LDI  R30,LOW(0)
00028a bfe0      	OUT  0x30,R30
                 ; 0000 0263 
                 ; 0000 0264 // SPI initialization
                 ; 0000 0265 // SPI disabled
                 ; 0000 0266 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
00028b b9ed      	OUT  0xD,R30
                 ; 0000 0267 
                 ; 0000 0268 // TWI initialization
                 ; 0000 0269 // TWI disabled
                 ; 0000 026A TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
00028c bfe6      	OUT  0x36,R30
                 ; 0000 026B 
                 ; 0000 026C // Global enable interrupts
                 ; 0000 026D #asm("sei")
00028d 9478      	sei
                 ; 0000 026E ADE7753_INIT();
00028e dfa3      	RCALL _ADE7753_INIT
                 ; 0000 026F  delay_ms(10000);
00028f e1a0      	LDI  R26,LOW(10000)
000290 e2b7      	LDI  R27,HIGH(10000)
000291 d04d      	RCALL _delay_ms
                 ; 0000 0270 // delay_ms(10000);
                 ; 0000 0271 // delay_ms(10000);
                 ; 0000 0272 //PHASE_1_ON;
                 ; 0000 0273 while (1)
                 _0xC3:
                 ; 0000 0274     {
                 ; 0000 0275         delay_ms(200);
000292 eca8      	LDI  R26,LOW(200)
000293 e0b0      	LDI  R27,0
000294 d04a      	RCALL _delay_ms
                 ; 0000 0276         //ADE7753_READ(1,IRMS);
                 ; 0000 0277         READ_AMP();
000295 dfb2      	RCALL _READ_AMP
                 ; 0000 0278     }
000296 cffb      	RJMP _0xC3
                 ; 0000 0279 }
                 _0xC6:
000297 cfff      	RJMP _0xC6
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
000298 eee8      	LDI  R30,LOW(1000)
000299 e0f3      	LDI  R31,HIGH(1000)
00029a d064      	RCALL __DIVW21U
00029b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1:
00029c e6e4      	LDI  R30,LOW(100)
00029d e0f0      	LDI  R31,HIGH(100)
00029e d060      	RCALL __DIVW21U
00029f 01df      	MOVW R26,R30
0002a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
0002a1 e0ea      	LDI  R30,LOW(10)
0002a2 e0f0      	LDI  R31,HIGH(10)
0002a3 d05b      	RCALL __DIVW21U
0002a4 01df      	MOVW R26,R30
0002a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
0002a6 2fe0      	MOV  R30,R16
0002a7 78e0      	ANDI R30,LOW(0x80)
0002a8 38e0      	CPI  R30,LOW(0x80)
0002a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
0002aa 0f00      	LSL  R16
0002ab 9ac5      	SBI  0x18,5
0002ac 98c5      	CBI  0x18,5
0002ad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
0002ae e0f0      	LDI  R31,0
0002af 30e1      	CPI  R30,LOW(0x1)
0002b0 e0a0      	LDI  R26,HIGH(0x1)
0002b1 07fa      	CPC  R31,R26
0002b2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
0002b3 30e2      	CPI  R30,LOW(0x2)
0002b4 e0a0      	LDI  R26,HIGH(0x2)
0002b5 07fa      	CPC  R31,R26
0002b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x7:
0002b7 30e3      	CPI  R30,LOW(0x3)
0002b8 e0a0      	LDI  R26,HIGH(0x3)
0002b9 07fa      	CPC  R31,R26
0002ba 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0002bb 9a94      	SBI  0x12,4
                +
0002bc e983     +LDI R24 , LOW ( 147 )
                +__DELAY_USB_LOOP :
0002bd 958a     +DEC R24
0002be f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 147
0002bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0002c0 9894      	CBI  0x12,4
                +
0002c1 e983     +LDI R24 , LOW ( 147 )
                +__DELAY_USB_LOOP :
0002c2 958a     +DEC R24
0002c3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 147
0002c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
0002c5 98ad      	CBI  0x15,5
0002c6 98ab      	CBI  0x15,3
0002c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
0002c8 2fe1      	MOV  R30,R17
0002c9 e0f0      	LDI  R31,0
0002ca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xC:
                +
0002cb 81a9     +LDD R26 , Y + 1
0002cc 81ba     +LDD R27 , Y + 1 + 1
0002cd 818b     +LDD R24 , Y + 1 + 2
0002ce 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
0002cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
                +
0002d0 83e9     +STD Y + 1 , R30
0002d1 83fa     +STD Y + 1 + 1 , R31
0002d2 836b     +STD Y + 1 + 2 , R22
0002d3 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
0002d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xE:
0002d5 e0e1      	LDI  R30,LOW(1)
0002d6 93ea      	ST   -Y,R30
0002d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
0002d8 93ea      	ST   -Y,R30
0002d9 e0e0      	LDI  R30,LOW(0)
0002da 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
0002db 93ea      	ST   -Y,R30
0002dc e0a0      	LDI  R26,LOW(0)
0002dd dec3      	RCALL _ADE7753_WRITE
0002de cff6      	RJMP SUBOPT_0xE
                 
                 
                 	.CSEG
                 _delay_ms:
0002df 9610      	adiw r26,0
0002e0 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0002e1 ec8d     +LDI R24 , LOW ( 0xACD )
0002e2 e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
0002e3 9701     +SBIW R24 , 1
0002e4 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
0002e5 95a8      	wdr
0002e6 9711      	sbiw r26,1
0002e7 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002e8 9508      	ret
                 
                 __ADDD12:
0002e9 0fea      	ADD  R30,R26
0002ea 1ffb      	ADC  R31,R27
0002eb 1f68      	ADC  R22,R24
0002ec 1f79      	ADC  R23,R25
0002ed 9508      	RET
                 
                 __LSLD12:
0002ee 23ee      	TST  R30
0002ef 2e0e      	MOV  R0,R30
0002f0 01fd      	MOVW R30,R26
0002f1 01bc      	MOVW R22,R24
0002f2 f031      	BREQ __LSLD12R
                 __LSLD12L:
0002f3 0fee      	LSL  R30
0002f4 1fff      	ROL  R31
0002f5 1f66      	ROL  R22
0002f6 1f77      	ROL  R23
0002f7 940a      	DEC  R0
0002f8 f7d1      	BRNE __LSLD12L
                 __LSLD12R:
0002f9 9508      	RET
                 
                 __CWD1:
0002fa 2f6f      	MOV  R22,R31
0002fb 0f66      	ADD  R22,R22
0002fc 0b66      	SBC  R22,R22
0002fd 2f76      	MOV  R23,R22
0002fe 9508      	RET
                 
                 __DIVW21U:
0002ff 2400      	CLR  R0
000300 2411      	CLR  R1
000301 e190      	LDI  R25,16
                 __DIVW21U1:
000302 0faa      	LSL  R26
000303 1fbb      	ROL  R27
000304 1c00      	ROL  R0
000305 1c11      	ROL  R1
000306 1a0e      	SUB  R0,R30
000307 0a1f      	SBC  R1,R31
000308 f418      	BRCC __DIVW21U2
000309 0e0e      	ADD  R0,R30
00030a 1e1f      	ADC  R1,R31
00030b c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00030c 60a1      	SBR  R26,1
                 __DIVW21U3:
00030d 959a      	DEC  R25
00030e f799      	BRNE __DIVW21U1
00030f 01fd      	MOVW R30,R26
000310 01d0      	MOVW R26,R0
000311 9508      	RET
                 
                 __DIVD21U:
000312 933f      	PUSH R19
000313 934f      	PUSH R20
000314 935f      	PUSH R21
000315 2400      	CLR  R0
000316 2411      	CLR  R1
000317 2744      	CLR  R20
000318 2755      	CLR  R21
000319 e230      	LDI  R19,32
                 __DIVD21U1:
00031a 0faa      	LSL  R26
00031b 1fbb      	ROL  R27
00031c 1f88      	ROL  R24
00031d 1f99      	ROL  R25
00031e 1c00      	ROL  R0
00031f 1c11      	ROL  R1
000320 1f44      	ROL  R20
000321 1f55      	ROL  R21
000322 1a0e      	SUB  R0,R30
000323 0a1f      	SBC  R1,R31
000324 0b46      	SBC  R20,R22
000325 0b57      	SBC  R21,R23
000326 f428      	BRCC __DIVD21U2
000327 0e0e      	ADD  R0,R30
000328 1e1f      	ADC  R1,R31
000329 1f46      	ADC  R20,R22
00032a 1f57      	ADC  R21,R23
00032b c001      	RJMP __DIVD21U3
                 __DIVD21U2:
00032c 60a1      	SBR  R26,1
                 __DIVD21U3:
00032d 953a      	DEC  R19
00032e f759      	BRNE __DIVD21U1
00032f 01fd      	MOVW R30,R26
000330 01bc      	MOVW R22,R24
000331 01d0      	MOVW R26,R0
000332 01ca      	MOVW R24,R20
000333 915f      	POP  R21
000334 914f      	POP  R20
000335 913f      	POP  R19
000336 9508      	RET
                 
                 __MODW21U:
000337 dfc7      	RCALL __DIVW21U
000338 01fd      	MOVW R30,R26
000339 9508      	RET
                 
                 __SAVELOCR4:
00033a 933a      	ST   -Y,R19
                 __SAVELOCR3:
00033b 932a      	ST   -Y,R18
                 __SAVELOCR2:
00033c 931a      	ST   -Y,R17
00033d 930a      	ST   -Y,R16
00033e 9508      	RET
                 
                 __LOADLOCR4:
00033f 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000340 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000341 8119      	LDD  R17,Y+1
000342 8108      	LD   R16,Y
000343 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8L register use summary:
r0 :  18 r1 :  11 r2 :   1 r3 :   0 r4 :   0 r5 :   0 r6 :   3 r7 :  16 
r8 :   5 r9 :   0 r10:   5 r11:   1 r12:   4 r13:   0 r14:   0 r15:   2 
r16:  28 r17:  55 r18:   2 r19:  20 r20:   7 r21:   6 r22:  18 r23:   9 
r24:  23 r25:  10 r26:  99 r27:  15 r28:  16 r29:   1 r30: 206 r31:  46 
x  :   7 y  :  92 z  :   7 
Registers used: 29 out of 35 (82.9%)

ATmega8L instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  11 add   :   8 
adiw  :  12 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :   3 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  55 brpl  :   0 brsh  :  10 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :  19 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  10 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  17 
cpc   :  19 cpi   :  26 cpse  :   0 dec   :   7 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 
inc   :   2 ld    :  18 ldd   :  28 ldi   : 150 lds   :   0 lpm   :   7 
lsl   :   6 lsr   :   0 mov   :  11 movw  :  31 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :  10 out   :  40 
pop   :   5 push  :   5 rcall :  85 ret   :  33 reti  :   1 rjmp  :  74 
rol   :  13 ror   :   0 sbc   :   5 sbci  :   0 sbi   :  13 sbic  :   1 
sbis  :   0 sbiw  :  10 sbr   :   2 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   1 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  40 std   :  13 
sts   :   0 sub   :   2 subi  :  10 swap  :   0 tst   :   1 wdr   :   1 

Instructions used: 48 out of 114 (42.1%)

ATmega8L memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000688   1648     24   1672    8192  20.4%
[.dseg] 0x000060 0x000160      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 8 warnings
