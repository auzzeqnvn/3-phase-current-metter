
AVRASM ver. 2.1.30  D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-current-metter\Debug\List\3-phase-current-metter.asm Wed Nov 28 15:42:07 2018

D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1086): warning: Register r7 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1087): warning: Register r8 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1088): warning: Register r9 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1089): warning: Register r6 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1090): warning: Register r11 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-current-metter\Debug\List\3-phase-current-metter.asm(1091): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8L
                 ;Program type           : Application
                 ;Clock frequency        : 11,059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8L
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Uc_Current_Array_Cnt=R7
                 	.DEF _AI10_Current_Set=R8
                 	.DEF _AI10_Current_Set_msb=R9
                 	.DEF _Uc_Buzzer_cnt=R6
                 	.DEF _Uc_Timer_cnt=R11
                 	.DEF _Uc_Select_led=R10
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c025      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 c049      	RJMP _timer1_ovf_isr
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000013 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000014 0000
000015 0000      	.DB  0x0,0x0,0x0,0x0
000016 0001      	.DB  0x1,0x0
                 
                 _0x40003:
000017 81f9
000018 abba
000019 6bc3
00001a a17b      	.DB  0xF9,0x81,0xBA,0xAB,0xC3,0x6B,0x7B,0xA1
00001b ebfb      	.DB  0xFB,0xEB
                 
                 __GLOBAL_INI_TBL:
00001c 0001      	.DW  0x01
00001d 0002      	.DW  0x02
00001e 0026      	.DW  __REG_BIT_VARS*2
                 
00001f 0006      	.DW  0x06
000020 0006      	.DW  0x06
000021 0028      	.DW  __REG_VARS*2
                 
000022 000a      	.DW  0x0A
000023 0184      	.DW  _BCDLED
000024 002e      	.DW  _0x40003*2
                 
                 _0xFFFFFFFF:
000025 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000026 94f8      	CLI
000027 27ee      	CLR  R30
000028 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000029 e0f1      	LDI  R31,1
00002a bffb      	OUT  GICR,R31
00002b bfeb      	OUT  GICR,R30
00002c bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00002d e08d      	LDI  R24,(14-2)+1
00002e e0a2      	LDI  R26,2
00002f 27bb      	CLR  R27
                 __CLEAR_REG:
000030 93ed      	ST   X+,R30
000031 958a      	DEC  R24
000032 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000033 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000034 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000035 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000036 93ed      	ST   X+,R30
000037 9701      	SBIW R24,1
000038 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000039 e3e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00003a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00003b 9185      	LPM  R24,Z+
00003c 9195      	LPM  R25,Z+
00003d 9700      	SBIW R24,0
00003e f061      	BREQ __GLOBAL_INI_END
00003f 91a5      	LPM  R26,Z+
000040 91b5      	LPM  R27,Z+
000041 9005      	LPM  R0,Z+
000042 9015      	LPM  R1,Z+
000043 01bf      	MOVW R22,R30
000044 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000045 9005      	LPM  R0,Z+
000046 920d      	ST   X+,R0
000047 9701      	SBIW R24,1
000048 f7e1      	BRNE __GLOBAL_INI_LOOP
000049 01fb      	MOVW R30,R22
00004a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00004b e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00004c bfed      	OUT  SPL,R30
00004d e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00004e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00004f e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000050 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000051 c133      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : 3 Phase current metter
                 ;Version : 1.0
                 ;Date    : 11/10/2018
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;Do va hien thi cuong do dong dien
                 ;Su dung IC ADE7753
                 ;
                 ;
                 ;Chip type               : ATmega8L
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 11.059200 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <ADE7753.h>
                 ;#include "led.h"
                 ;
                 ;
                 ;#define BUZZER  PORTC.2
                 ;
                 ;#define BUZZER_ON   BUZZER = 1
                 ;#define BUZZER_OFF  BUZZER = 0
                 ;
                 ;#define CURRENT_MAX_SET 15
                 ;#define CURRENT_MIN_SET 8
                 ;
                 ;/* So luong mau lay de tinh toan */
                 ;#define NUM_SAMPLE  5
                 ;/* So luong noise loai bo */
                 ;#define NUM_FILTER  1
                 ;
                 ;bit Bit_Warning_1 = 0;
                 ;bit Bit_Warning_2 = 0;
                 ;bit Bit_Warning_3 = 0;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;/* Co bao da lay du luong mau de tinh toan */
                 ;bit Bit_sample_full =0;
                 ;
                 ;/* mang luu gia tri dong dien */
                 ;unsigned int AI10__Current_L1[NUM_SAMPLE];
                 ;unsigned int AI10__Current_L2[NUM_SAMPLE];
                 ;unsigned int AI10__Current_L3[NUM_SAMPLE];
                 ;unsigned char   Uc_Current_Array_Cnt = 0;
                 ;
                 ;unsigned int    AI10_Current_Set;
                 ;
                 ;unsigned char   Uc_Buzzer_cnt = 0;
                 ;
                 ;unsigned char   Uc_Timer_cnt = 0;
                 ;
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;/* Timer 1.9ms */
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0048 {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
000052 920a      	ST   -Y,R0
000053 921a      	ST   -Y,R1
000054 92fa      	ST   -Y,R15
000055 936a      	ST   -Y,R22
000056 937a      	ST   -Y,R23
000057 938a      	ST   -Y,R24
000058 939a      	ST   -Y,R25
000059 93aa      	ST   -Y,R26
00005a 93ba      	ST   -Y,R27
00005b 93ea      	ST   -Y,R30
00005c 93fa      	ST   -Y,R31
00005d b7ef      	IN   R30,SREG
00005e 93ea      	ST   -Y,R30
                 ; 0000 0049 // Reinitialize Timer1 value
                 ; 0000 004A     TCNT1H=0xAA00 >> 8;
00005f eaea      	LDI  R30,LOW(170)
000060 bded      	OUT  0x2D,R30
                 ; 0000 004B     TCNT1L=0xAA00 & 0xff;
000061 e0e0      	LDI  R30,LOW(0)
000062 bdec      	OUT  0x2C,R30
                 ; 0000 004C // Place your code here
                 ; 0000 004D     if(Uc_Timer_cnt < 200)  Uc_Timer_cnt++;
000063 ece8      	LDI  R30,LOW(200)
000064 16be      	CP   R11,R30
000065 f408      	BRSH _0x3
000066 94b3      	INC  R11
                 ; 0000 004E 
                 ; 0000 004F     SCAN_LED();
                 _0x3:
000067 d274      	RCALL _SCAN_LED
                 ; 0000 0050 
                 ; 0000 0051     /* Bat coi loa buzzer khi co canh bao */
                 ; 0000 0052     if(Bit_Warning_1 || Bit_Warning_2 || Bit_Warning_3)
000068 fc20      	SBRC R2,0
000069 c004      	RJMP _0x5
00006a fc21      	SBRC R2,1
00006b c002      	RJMP _0x5
00006c fe22      	SBRS R2,2
00006d c00d      	RJMP _0x4
                 _0x5:
                 ; 0000 0053     {
                 ; 0000 0054         Uc_Buzzer_cnt++;
00006e 9463      	INC  R6
                 ; 0000 0055         if(Uc_Buzzer_cnt < 100) BUZZER_ON;
00006f e6e4      	LDI  R30,LOW(100)
000070 166e      	CP   R6,R30
000071 f410      	BRSH _0x7
000072 9aaa      	SBI  0x15,2
                 ; 0000 0056         else    if(Uc_Buzzer_cnt < 200) BUZZER_OFF;
000073 c006      	RJMP _0xA
                 _0x7:
000074 ece8      	LDI  R30,LOW(200)
000075 166e      	CP   R6,R30
000076 f410      	BRSH _0xB
000077 98aa      	CBI  0x15,2
                 ; 0000 0057         else Uc_Buzzer_cnt = 0;
000078 c001      	RJMP _0xE
                 _0xB:
000079 2466      	CLR  R6
                 ; 0000 0058     }
                 _0xE:
                 _0xA:
                 ; 0000 0059     else    BUZZER_OFF;
00007a c001      	RJMP _0xF
                 _0x4:
00007b 98aa      	CBI  0x15,2
                 ; 0000 005A }
                 _0xF:
00007c 91e9      	LD   R30,Y+
00007d bfef      	OUT  SREG,R30
00007e 91f9      	LD   R31,Y+
00007f 91e9      	LD   R30,Y+
000080 91b9      	LD   R27,Y+
000081 91a9      	LD   R26,Y+
000082 9199      	LD   R25,Y+
000083 9189      	LD   R24,Y+
000084 9179      	LD   R23,Y+
000085 9169      	LD   R22,Y+
000086 90f9      	LD   R15,Y+
000087 9019      	LD   R1,Y+
000088 9009      	LD   R0,Y+
000089 9518      	RETI
                 ; .FEND
                 ;
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0061 {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0062     ADMUX=adc_input | ADC_VREF_TYPE;
00008a 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00008b 81e8      	LD   R30,Y
00008c 64e0      	ORI  R30,0x40
00008d b9e7      	OUT  0x7,R30
                 ; 0000 0063     // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0064     delay_us(10);
                +
00008e e285     +LDI R24 , LOW ( 37 )
                +__DELAY_USB_LOOP :
00008f 958a     +DEC R24
000090 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 37
                 ; 0000 0065     // Start the AD conversion
                 ; 0000 0066     ADCSRA|=(1<<ADSC);
000091 9a36      	SBI  0x6,6
                 ; 0000 0067     // Wait for the AD conversion to complete
                 ; 0000 0068     while ((ADCSRA & (1<<ADIF))==0);
                 _0x12:
000092 9b34      	SBIS 0x6,4
000093 cffe      	RJMP _0x12
                 ; 0000 0069     ADCSRA|=(1<<ADIF);
000094 9a34      	SBI  0x6,4
                 ; 0000 006A     return ADCW;
000095 b1e4      	IN   R30,0x4
000096 b1f5      	IN   R31,0x4+1
000097 9621      	ADIW R28,1
000098 9508      	RET
                 ; 0000 006B }
                 ; .FEND
                 ;/*
                 ;Doc gia tri dong dien L1, L2 ,L3
                 ;Loai bo cac noise co bien do lon.
                 ;Lay trung binh cac gia tri con lai.
                 ;Cap nhat gia tri dong dien hien thi len led
                 ;Chu ki cap nhat gia tri hien thi la 200*timer
                 ;*/
                 ;void    Read_Current(void)
                 ; 0000 0074 {
                 _Read_Current:
                 ; .FSTART _Read_Current
                 ; 0000 0075     unsigned int Uint_Tmp;
                 ; 0000 0076     unsigned int Uint_CurrentTmp_Array[NUM_SAMPLE];
                 ; 0000 0077     unsigned char   Uc_loop1_cnt,Uc_loop2_cnt;
                 ; 0000 0078     unsigned int   Ul_Sum;
                 ; 0000 0079     unsigned long Ul_tmp;
                 ; 0000 007A 
                 ; 0000 007B     /* Doc gia tri dong dien 1 */
                 ; 0000 007C     Ul_tmp = ((unsigned long) Read_ADE7753(1,IRMS)/728);//800
000099 972e      	SBIW R28,14
00009a d3ee      	RCALL __SAVELOCR6
                 ;	Uint_Tmp -> R16,R17
                 ;	Uint_CurrentTmp_Array -> Y+10
                 ;	Uc_loop1_cnt -> R19
                 ;	Uc_loop2_cnt -> R18
                 ;	Ul_Sum -> R20,R21
                 ;	Ul_tmp -> Y+6
00009b d28b      	RCALL SUBOPT_0x0
00009c d28d      	RCALL SUBOPT_0x1
                +
00009d ede8     +LDI R30 , LOW ( 0x2D8 )
00009e e0f2     +LDI R31 , HIGH ( 0x2D8 )
00009f e060     +LDI R22 , BYTE3 ( 0x2D8 )
0000a0 e070     +LDI R23 , BYTE4 ( 0x2D8 )
                 	__GETD1N 0x2D8
0000a1 d28f      	RCALL SUBOPT_0x2
                 ; 0000 007D     AI10__Current_L1[Uc_Current_Array_Cnt] = (unsigned int) (Ul_tmp);
0000a2 d295      	RCALL SUBOPT_0x3
0000a3 d29a      	RCALL SUBOPT_0x4
                 ; 0000 007E     delay_ms(50);
                 ; 0000 007F 
                 ; 0000 0080      /* Doc gia tri dong dien 2 */
                 ; 0000 0081     Ul_tmp = ((unsigned long) Read_ADE7753(2,IRMS)/1082);//1105
0000a4 e0e2      	LDI  R30,LOW(2)
0000a5 93ea      	ST   -Y,R30
0000a6 d283      	RCALL SUBOPT_0x1
                +
0000a7 e3ea     +LDI R30 , LOW ( 0x43A )
0000a8 e0f4     +LDI R31 , HIGH ( 0x43A )
0000a9 e060     +LDI R22 , BYTE3 ( 0x43A )
0000aa e070     +LDI R23 , BYTE4 ( 0x43A )
                 	__GETD1N 0x43A
0000ab d285      	RCALL SUBOPT_0x2
                 ; 0000 0082     AI10__Current_L2[Uc_Current_Array_Cnt] = (unsigned int) (Ul_tmp);
0000ac d29a      	RCALL SUBOPT_0x5
0000ad d290      	RCALL SUBOPT_0x4
                 ; 0000 0083     delay_ms(50);
                 ; 0000 0084 
                 ; 0000 0085      /* Doc gia tri dong dien 3 */
                 ; 0000 0086     Ul_tmp = ((unsigned long) Read_ADE7753(3,IRMS)/565);//577
0000ae e0e3      	LDI  R30,LOW(3)
0000af 93ea      	ST   -Y,R30
0000b0 d279      	RCALL SUBOPT_0x1
                +
0000b1 e3e5     +LDI R30 , LOW ( 0x235 )
0000b2 e0f2     +LDI R31 , HIGH ( 0x235 )
0000b3 e060     +LDI R22 , BYTE3 ( 0x235 )
0000b4 e070     +LDI R23 , BYTE4 ( 0x235 )
                 	__GETD1N 0x235
0000b5 d27b      	RCALL SUBOPT_0x2
                 ; 0000 0087     AI10__Current_L3[Uc_Current_Array_Cnt] = (unsigned int) (Ul_tmp);
0000b6 d296      	RCALL SUBOPT_0x6
0000b7 d286      	RCALL SUBOPT_0x4
                 ; 0000 0088     delay_ms(50);
                 ; 0000 0089 
                 ; 0000 008A      /* Doc gia tri dong dien cai dat */
                 ; 0000 008B     AI10_Current_Set = read_adc(0);
0000b8 e0a0      	LDI  R26,LOW(0)
0000b9 dfd0      	RCALL _read_adc
0000ba 014f      	MOVW R8,R30
                 ; 0000 008C     AI10_Current_Set = AI10_Current_Set*(CURRENT_MAX_SET-CURRENT_MIN_SET)*100/1024 + CURRENT_MIN_SET*100;
0000bb e0a7      	LDI  R26,LOW(7)
0000bc e0b0      	LDI  R27,HIGH(7)
0000bd d384      	RCALL __MULW12U
0000be e6a4      	LDI  R26,LOW(100)
0000bf e0b0      	LDI  R27,HIGH(100)
0000c0 d381      	RCALL __MULW12U
0000c1 d376      	RCALL __LSRW2
0000c2 2fef      	MOV  R30,R31
0000c3 e0f0      	LDI  R31,0
0000c4 5ee0      	SUBI R30,LOW(-800)
0000c5 4ffc      	SBCI R31,HIGH(-800)
0000c6 014f      	MOVW R8,R30
                 ; 0000 008D 
                 ; 0000 008E     Uc_Current_Array_Cnt++;
0000c7 9473      	INC  R7
                 ; 0000 008F     if(Uc_Current_Array_Cnt >= NUM_SAMPLE)
0000c8 e0e5      	LDI  R30,LOW(5)
0000c9 167e      	CP   R7,R30
0000ca f018      	BRLO _0x15
                 ; 0000 0090     {
                 ; 0000 0091         Bit_sample_full = 1;
0000cb 9468      	SET
0000cc f823      	BLD  R2,3
                 ; 0000 0092         Uc_Current_Array_Cnt = 0;
0000cd 2477      	CLR  R7
                 ; 0000 0093     }
                 ; 0000 0094 
                 ; 0000 0095     if(Bit_sample_full == 0)
                 _0x15:
0000ce fc23      	SBRC R2,3
0000cf c00e      	RJMP _0x16
                 ; 0000 0096     {
                 ; 0000 0097         Uint_dataLed1 = 0;
0000d0 e0e0      	LDI  R30,LOW(0)
0000d1 93e0 0160 	STS  _Uint_dataLed1,R30
0000d3 93e0 0161 	STS  _Uint_dataLed1+1,R30
                 ; 0000 0098         Uint_dataLed2 = 0;
0000d5 93e0 0162 	STS  _Uint_dataLed2,R30
0000d7 93e0 0163 	STS  _Uint_dataLed2+1,R30
                 ; 0000 0099         Uint_dataLed3 = 0;
0000d9 93e0 0164 	STS  _Uint_dataLed3,R30
0000db 93e0 0165 	STS  _Uint_dataLed3+1,R30
                 ; 0000 009A     }
                 ; 0000 009B     else
0000dd c0a4      	RJMP _0x17
                 _0x16:
                 ; 0000 009C     {
                 ; 0000 009D         /* Xu ly du lieu L1 */
                 ; 0000 009E         /* Chuyen sang bo nho dem*/
                 ; 0000 009F         for(Uc_loop1_cnt = 0; Uc_loop1_cnt<NUM_SAMPLE; Uc_loop1_cnt++)
0000de e030      	LDI  R19,LOW(0)
                 _0x19:
0000df 3035      	CPI  R19,5
0000e0 f440      	BRSH _0x1A
                 ; 0000 00A0         {
                 ; 0000 00A1             Uint_CurrentTmp_Array[Uc_loop1_cnt] = AI10__Current_L1[Uc_loop1_cnt];
0000e1 d271      	RCALL SUBOPT_0x7
0000e2 d277      	RCALL SUBOPT_0x8
0000e3 2fe3      	MOV  R30,R19
0000e4 d253      	RCALL SUBOPT_0x3
0000e5 d278      	RCALL SUBOPT_0x9
0000e6 d27a      	RCALL SUBOPT_0xA
                 ; 0000 00A2         }
0000e7 5f3f      	SUBI R19,-1
0000e8 cff6      	RJMP _0x19
                 _0x1A:
                 ; 0000 00A3         /* Sắp xếp tu min-> max*/
                 ; 0000 00A4         for(Uc_loop1_cnt = 0; Uc_loop1_cnt<NUM_SAMPLE; Uc_loop1_cnt++)
0000e9 e030      	LDI  R19,LOW(0)
                 _0x1C:
0000ea 3035      	CPI  R19,5
0000eb f488      	BRSH _0x1D
                 ; 0000 00A5         {
                 ; 0000 00A6             for(Uc_loop2_cnt = Uc_loop1_cnt; Uc_loop2_cnt<NUM_SAMPLE; Uc_loop2_cnt++)
0000ec 2f23      	MOV  R18,R19
                 _0x1F:
0000ed 3025      	CPI  R18,5
0000ee f460      	BRSH _0x20
                 ; 0000 00A7             {
                 ; 0000 00A8                 if(Uint_CurrentTmp_Array[Uc_loop1_cnt] > Uint_CurrentTmp_Array[Uc_loop2_cnt])
0000ef d263      	RCALL SUBOPT_0x7
0000f0 d275      	RCALL SUBOPT_0xB
0000f1 f438      	BRSH _0x21
                 ; 0000 00A9                 {
                 ; 0000 00AA                     Uint_Tmp = Uint_CurrentTmp_Array[Uc_loop1_cnt];
0000f2 d260      	RCALL SUBOPT_0x7
0000f3 d280      	RCALL SUBOPT_0xC
                 ; 0000 00AB                     Uint_CurrentTmp_Array[Uc_loop1_cnt] = Uint_CurrentTmp_Array[Uc_loop2_cnt];
0000f4 d265      	RCALL SUBOPT_0x8
0000f5 d282      	RCALL SUBOPT_0xD
0000f6 d288      	RCALL SUBOPT_0xE
                 ; 0000 00AC                     Uint_CurrentTmp_Array[Uc_loop2_cnt] = Uint_Tmp;
0000f7 d280      	RCALL SUBOPT_0xD
0000f8 d288      	RCALL SUBOPT_0xF
                 ; 0000 00AD                 }
                 ; 0000 00AE             }
                 _0x21:
0000f9 5f2f      	SUBI R18,-1
0000fa cff2      	RJMP _0x1F
                 _0x20:
                 ; 0000 00AF         }
0000fb 5f3f      	SUBI R19,-1
0000fc cfed      	RJMP _0x1C
                 _0x1D:
                 ; 0000 00B0         /* Loc phan du lieu nhieu thap va cao */
                 ; 0000 00B1         Ul_Sum = 0;
0000fd d288      	RCALL SUBOPT_0x10
                 ; 0000 00B2         for(Uc_loop1_cnt = NUM_FILTER;Uc_loop1_cnt<(NUM_SAMPLE - NUM_FILTER); Uc_loop1_cnt++)
                 _0x23:
0000fe 3034      	CPI  R19,4
0000ff f420      	BRSH _0x24
                 ; 0000 00B3         {
                 ; 0000 00B4             Ul_Sum += Uint_CurrentTmp_Array[Uc_loop1_cnt];
000100 d252      	RCALL SUBOPT_0x7
000101 d288      	RCALL SUBOPT_0x11
                 ; 0000 00B5         }
000102 5f3f      	SUBI R19,-1
000103 cffa      	RJMP _0x23
                 _0x24:
                 ; 0000 00B6         Ul_Sum = Ul_Sum/(NUM_SAMPLE-2*NUM_FILTER);
000104 d28a      	RCALL SUBOPT_0x12
                 ; 0000 00B7         /* Xuat du lieu len led */
                 ; 0000 00B8         if(Uc_Timer_cnt == 200) Uint_dataLed1 = Ul_Sum;
000105 f421      	BRNE _0x25
                +
000106 9340 0160+STS _Uint_dataLed1 + ( 0 ) , R20
000108 9350 0161+STS _Uint_dataLed1 + ( 0 ) + 1 , R21
                 	__PUTWMRN _Uint_dataLed1,0,20,21
                 ; 0000 00B9         /* Bat canh bao khi dong dien lon hon dong cai dat */
                 ; 0000 00BA         if(AI10_Current_Set < Uint_dataLed1)    Bit_Warning_1 =1;
                 _0x25:
00010a 91e0 0160 	LDS  R30,_Uint_dataLed1
00010c 91f0 0161 	LDS  R31,_Uint_dataLed1+1
00010e 168e      	CP   R8,R30
00010f 069f      	CPC  R9,R31
000110 f410      	BRSH _0x26
000111 9468      	SET
000112 c001      	RJMP _0x4C
                 ; 0000 00BB         else Bit_Warning_1 = 0;
                 _0x26:
000113 94e8      	CLT
                 _0x4C:
000114 f820      	BLD  R2,0
                 ; 0000 00BC 
                 ; 0000 00BD         /* Xu ly du lieu L2 */
                 ; 0000 00BE         /* Chuyen sang bo nho dem*/
                 ; 0000 00BF         for(Uc_loop1_cnt = 0; Uc_loop1_cnt<NUM_SAMPLE; Uc_loop1_cnt++)
000115 e030      	LDI  R19,LOW(0)
                 _0x29:
000116 3035      	CPI  R19,5
000117 f438      	BRSH _0x2A
                 ; 0000 00C0         {
                 ; 0000 00C1             Uint_CurrentTmp_Array[Uc_loop1_cnt] = AI10__Current_L2[Uc_loop1_cnt];
000118 d23a      	RCALL SUBOPT_0x7
000119 d240      	RCALL SUBOPT_0x8
00011a 2fe3      	MOV  R30,R19
00011b d22b      	RCALL SUBOPT_0x5
00011c d262      	RCALL SUBOPT_0xE
                 ; 0000 00C2         }
00011d 5f3f      	SUBI R19,-1
00011e cff7      	RJMP _0x29
                 _0x2A:
                 ; 0000 00C3         /* Sắp xếp tu min-> max*/
                 ; 0000 00C4         for(Uc_loop1_cnt = 0; Uc_loop1_cnt<NUM_SAMPLE; Uc_loop1_cnt++)
00011f e030      	LDI  R19,LOW(0)
                 _0x2C:
000120 3035      	CPI  R19,5
000121 f488      	BRSH _0x2D
                 ; 0000 00C5         {
                 ; 0000 00C6             for(Uc_loop2_cnt = Uc_loop1_cnt; Uc_loop2_cnt<NUM_SAMPLE; Uc_loop2_cnt++)
000122 2f23      	MOV  R18,R19
                 _0x2F:
000123 3025      	CPI  R18,5
000124 f460      	BRSH _0x30
                 ; 0000 00C7             {
                 ; 0000 00C8                 if(Uint_CurrentTmp_Array[Uc_loop1_cnt] > Uint_CurrentTmp_Array[Uc_loop2_cnt])
000125 d22d      	RCALL SUBOPT_0x7
000126 d23f      	RCALL SUBOPT_0xB
000127 f438      	BRSH _0x31
                 ; 0000 00C9                 {
                 ; 0000 00CA                     Uint_Tmp = Uint_CurrentTmp_Array[Uc_loop1_cnt];
000128 d22a      	RCALL SUBOPT_0x7
000129 d24a      	RCALL SUBOPT_0xC
                 ; 0000 00CB                     Uint_CurrentTmp_Array[Uc_loop1_cnt] = Uint_CurrentTmp_Array[Uc_loop2_cnt];
00012a d22f      	RCALL SUBOPT_0x8
00012b d24c      	RCALL SUBOPT_0xD
00012c d252      	RCALL SUBOPT_0xE
                 ; 0000 00CC                     Uint_CurrentTmp_Array[Uc_loop2_cnt] = Uint_Tmp;
00012d d24a      	RCALL SUBOPT_0xD
00012e d252      	RCALL SUBOPT_0xF
                 ; 0000 00CD                 }
                 ; 0000 00CE             }
                 _0x31:
00012f 5f2f      	SUBI R18,-1
000130 cff2      	RJMP _0x2F
                 _0x30:
                 ; 0000 00CF         }
000131 5f3f      	SUBI R19,-1
000132 cfed      	RJMP _0x2C
                 _0x2D:
                 ; 0000 00D0 
                 ; 0000 00D1         /* Loc phan du lieu nhieu thap va cao */
                 ; 0000 00D2         Ul_Sum = 0;
000133 d252      	RCALL SUBOPT_0x10
                 ; 0000 00D3         for(Uc_loop1_cnt = NUM_FILTER;Uc_loop1_cnt<(NUM_SAMPLE - NUM_FILTER); Uc_loop1_cnt++)
                 _0x33:
000134 3034      	CPI  R19,4
000135 f420      	BRSH _0x34
                 ; 0000 00D4         {
                 ; 0000 00D5             Ul_Sum += Uint_CurrentTmp_Array[Uc_loop1_cnt];
000136 d21c      	RCALL SUBOPT_0x7
000137 d252      	RCALL SUBOPT_0x11
                 ; 0000 00D6         }
000138 5f3f      	SUBI R19,-1
000139 cffa      	RJMP _0x33
                 _0x34:
                 ; 0000 00D7         Ul_Sum = Ul_Sum/(NUM_SAMPLE-2*NUM_FILTER);
00013a d254      	RCALL SUBOPT_0x12
                 ; 0000 00D8         /* Xuat du lieu len led */
                 ; 0000 00D9         if(Uc_Timer_cnt == 200) Uint_dataLed2 = Ul_Sum;
00013b f421      	BRNE _0x35
                +
00013c 9340 0162+STS _Uint_dataLed2 + ( 0 ) , R20
00013e 9350 0163+STS _Uint_dataLed2 + ( 0 ) + 1 , R21
                 	__PUTWMRN _Uint_dataLed2,0,20,21
                 ; 0000 00DA         /* Bat canh bao khi dong dien lon hon dong cai dat */
                 ; 0000 00DB         if(AI10_Current_Set < Uint_dataLed2)    Bit_Warning_2 =1;
                 _0x35:
000140 91e0 0162 	LDS  R30,_Uint_dataLed2
000142 91f0 0163 	LDS  R31,_Uint_dataLed2+1
000144 168e      	CP   R8,R30
000145 069f      	CPC  R9,R31
000146 f410      	BRSH _0x36
000147 9468      	SET
000148 c001      	RJMP _0x4D
                 ; 0000 00DC         else Bit_Warning_2 = 0;
                 _0x36:
000149 94e8      	CLT
                 _0x4D:
00014a f821      	BLD  R2,1
                 ; 0000 00DD 
                 ; 0000 00DE         /* Xu ly du lieu L3 */
                 ; 0000 00DF         /* Chuyen sang bo nho dem*/
                 ; 0000 00E0         for(Uc_loop1_cnt = 0; Uc_loop1_cnt<NUM_SAMPLE; Uc_loop1_cnt++)
00014b e030      	LDI  R19,LOW(0)
                 _0x39:
00014c 3035      	CPI  R19,5
00014d f438      	BRSH _0x3A
                 ; 0000 00E1         {
                 ; 0000 00E2             Uint_CurrentTmp_Array[Uc_loop1_cnt] = AI10__Current_L3[Uc_loop1_cnt];
00014e d204      	RCALL SUBOPT_0x7
00014f d20a      	RCALL SUBOPT_0x8
000150 2fe3      	MOV  R30,R19
000151 d1fb      	RCALL SUBOPT_0x6
000152 d22c      	RCALL SUBOPT_0xE
                 ; 0000 00E3         }
000153 5f3f      	SUBI R19,-1
000154 cff7      	RJMP _0x39
                 _0x3A:
                 ; 0000 00E4         /* Sắp xếp tu min-> max*/
                 ; 0000 00E5         for(Uc_loop1_cnt = 0; Uc_loop1_cnt<NUM_SAMPLE; Uc_loop1_cnt++)
000155 e030      	LDI  R19,LOW(0)
                 _0x3C:
000156 3035      	CPI  R19,5
000157 f488      	BRSH _0x3D
                 ; 0000 00E6         {
                 ; 0000 00E7             for(Uc_loop2_cnt = Uc_loop1_cnt; Uc_loop2_cnt<NUM_SAMPLE; Uc_loop2_cnt++)
000158 2f23      	MOV  R18,R19
                 _0x3F:
000159 3025      	CPI  R18,5
00015a f460      	BRSH _0x40
                 ; 0000 00E8             {
                 ; 0000 00E9                 if(Uint_CurrentTmp_Array[Uc_loop1_cnt] > Uint_CurrentTmp_Array[Uc_loop2_cnt])
00015b d1f7      	RCALL SUBOPT_0x7
00015c d209      	RCALL SUBOPT_0xB
00015d f438      	BRSH _0x41
                 ; 0000 00EA                 {
                 ; 0000 00EB                     Uint_Tmp = Uint_CurrentTmp_Array[Uc_loop1_cnt];
00015e d1f4      	RCALL SUBOPT_0x7
00015f d214      	RCALL SUBOPT_0xC
                 ; 0000 00EC                     Uint_CurrentTmp_Array[Uc_loop1_cnt] = Uint_CurrentTmp_Array[Uc_loop2_cnt];
000160 d1f9      	RCALL SUBOPT_0x8
000161 d216      	RCALL SUBOPT_0xD
000162 d21c      	RCALL SUBOPT_0xE
                 ; 0000 00ED                     Uint_CurrentTmp_Array[Uc_loop2_cnt] = Uint_Tmp;
000163 d214      	RCALL SUBOPT_0xD
000164 d21c      	RCALL SUBOPT_0xF
                 ; 0000 00EE                 }
                 ; 0000 00EF             }
                 _0x41:
000165 5f2f      	SUBI R18,-1
000166 cff2      	RJMP _0x3F
                 _0x40:
                 ; 0000 00F0         }
000167 5f3f      	SUBI R19,-1
000168 cfed      	RJMP _0x3C
                 _0x3D:
                 ; 0000 00F1         /* Loc phan du lieu nhieu thap va cao */
                 ; 0000 00F2         Ul_Sum = 0;
000169 d21c      	RCALL SUBOPT_0x10
                 ; 0000 00F3         for(Uc_loop1_cnt = NUM_FILTER;Uc_loop1_cnt<(NUM_SAMPLE - NUM_FILTER); Uc_loop1_cnt++)
                 _0x43:
00016a 3034      	CPI  R19,4
00016b f420      	BRSH _0x44
                 ; 0000 00F4         {
                 ; 0000 00F5             Ul_Sum += Uint_CurrentTmp_Array[Uc_loop1_cnt];
00016c d1e6      	RCALL SUBOPT_0x7
00016d d21c      	RCALL SUBOPT_0x11
                 ; 0000 00F6         }
00016e 5f3f      	SUBI R19,-1
00016f cffa      	RJMP _0x43
                 _0x44:
                 ; 0000 00F7         Ul_Sum = Ul_Sum/(NUM_SAMPLE-2*NUM_FILTER);
000170 d21e      	RCALL SUBOPT_0x12
                 ; 0000 00F8         /* Xuat du lieu len led */
                 ; 0000 00F9         if(Uc_Timer_cnt == 200)
000171 f429      	BRNE _0x45
                 ; 0000 00FA         {
                 ; 0000 00FB             Uint_dataLed3 = Ul_Sum;
                +
000172 9340 0164+STS _Uint_dataLed3 + ( 0 ) , R20
000174 9350 0165+STS _Uint_dataLed3 + ( 0 ) + 1 , R21
                 	__PUTWMRN _Uint_dataLed3,0,20,21
                 ; 0000 00FC             Uc_Timer_cnt = 0;
000176 24bb      	CLR  R11
                 ; 0000 00FD         }
                 ; 0000 00FE         /* Bat canh bao khi dong dien lon hon dong cai dat */
                 ; 0000 00FF         if(AI10_Current_Set < Uint_dataLed3)    Bit_Warning_3 =1;
                 _0x45:
000177 91e0 0164 	LDS  R30,_Uint_dataLed3
000179 91f0 0165 	LDS  R31,_Uint_dataLed3+1
00017b 168e      	CP   R8,R30
00017c 069f      	CPC  R9,R31
00017d f410      	BRSH _0x46
00017e 9468      	SET
00017f c001      	RJMP _0x4E
                 ; 0000 0100         else Bit_Warning_3 = 0;
                 _0x46:
000180 94e8      	CLT
                 _0x4E:
000181 f822      	BLD  R2,2
                 ; 0000 0101     }
                 _0x17:
                 ; 0000 0102 }
000182 d30d      	RCALL __LOADLOCR6
000183 9664      	ADIW R28,20
000184 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0105 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0106 // Declare your local variables here
                 ; 0000 0107 // Input/Output Ports initialization
                 ; 0000 0108 // Port B initialization
                 ; 0000 0109 // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=Out Bit2=In Bit1=Out Bit0=In
                 ; 0000 010A DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (0<<DDB2) | (1<<DDB1) | (0<<DDB0);
000185 e3ea      	LDI  R30,LOW(58)
000186 bbe7      	OUT  0x17,R30
                 ; 0000 010B // State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=0 Bit2=T Bit1=0 Bit0=T
                 ; 0000 010C PORTB=(0<<PORTB7) | (0<<PORTB6) | (1<<PORTB5) | (0<<PORTB4) | (1<<PORTB3) | (0<<PORTB2) | (1<<PORTB1) | (0<<PORTB0);
000187 e2ea      	LDI  R30,LOW(42)
000188 bbe8      	OUT  0x18,R30
                 ; 0000 010D 
                 ; 0000 010E // Port C initialization
                 ; 0000 010F // Function: Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=In Bit0=In
                 ; 0000 0110 DDRC=(0<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (0<<DDC1) | (0<<DDC0);
000189 e3ec      	LDI  R30,LOW(60)
00018a bbe4      	OUT  0x14,R30
                 ; 0000 0111 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0112 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00018b e0e0      	LDI  R30,LOW(0)
00018c bbe5      	OUT  0x15,R30
                 ; 0000 0113 
                 ; 0000 0114 // Port D initialization
                 ; 0000 0115 // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=Out
                 ; 0000 0116 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (1<<DDD4) | (0<<DDD3) | (0<<DDD2) | (1<<DDD1) | (0<<DDD0);
00018d e1e2      	LDI  R30,LOW(18)
00018e bbe1      	OUT  0x11,R30
                 ; 0000 0117 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0118 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00018f e0e0      	LDI  R30,LOW(0)
000190 bbe2      	OUT  0x12,R30
                 ; 0000 0119 
                 ; 0000 011A // Timer/Counter 0 initialization
                 ; 0000 011B // Clock source: System Clock
                 ; 0000 011C // Clock value: Timer 0 Stopped
                 ; 0000 011D TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
000191 bfe3      	OUT  0x33,R30
                 ; 0000 011E TCNT0=0x94;
000192 e9e4      	LDI  R30,LOW(148)
000193 bfe2      	OUT  0x32,R30
                 ; 0000 011F 
                 ; 0000 0120 // Timer/Counter 1 initialization
                 ; 0000 0121 // Clock source: System Clock
                 ; 0000 0122 // Clock value: 11059.200 kHz
                 ; 0000 0123 // Mode: Normal top=0xFFFF
                 ; 0000 0124 // OC1A output: Disconnected
                 ; 0000 0125 // OC1B output: Disconnected
                 ; 0000 0126 // Noise Canceler: Off
                 ; 0000 0127 // Input Capture on Falling Edge
                 ; 0000 0128 // Timer Period: 2 ms
                 ; 0000 0129 // Timer1 Overflow Interrupt: On
                 ; 0000 012A // Input Capture Interrupt: Off
                 ; 0000 012B // Compare A Match Interrupt: Off
                 ; 0000 012C // Compare B Match Interrupt: Off
                 ; 0000 012D TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000194 e0e0      	LDI  R30,LOW(0)
000195 bdef      	OUT  0x2F,R30
                 ; 0000 012E TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
000196 e0e1      	LDI  R30,LOW(1)
000197 bdee      	OUT  0x2E,R30
                 ; 0000 012F TCNT1H=0xA9;
000198 eae9      	LDI  R30,LOW(169)
000199 bded      	OUT  0x2D,R30
                 ; 0000 0130 TCNT1L=0x9A;
00019a e9ea      	LDI  R30,LOW(154)
00019b bdec      	OUT  0x2C,R30
                 ; 0000 0131 ICR1H=0x00;
00019c e0e0      	LDI  R30,LOW(0)
00019d bde7      	OUT  0x27,R30
                 ; 0000 0132 ICR1L=0x00;
00019e bde6      	OUT  0x26,R30
                 ; 0000 0133 OCR1AH=0x00;
00019f bdeb      	OUT  0x2B,R30
                 ; 0000 0134 OCR1AL=0x00;
0001a0 bdea      	OUT  0x2A,R30
                 ; 0000 0135 OCR1BH=0x00;
0001a1 bde9      	OUT  0x29,R30
                 ; 0000 0136 OCR1BL=0x00;
0001a2 bde8      	OUT  0x28,R30
                 ; 0000 0137 
                 ; 0000 0138 // Timer/Counter 2 initialization
                 ; 0000 0139 // Clock source: System Clock
                 ; 0000 013A // Clock value: Timer2 Stopped
                 ; 0000 013B // Mode: Normal top=0xFF
                 ; 0000 013C // OC2 output: Disconnected
                 ; 0000 013D ASSR=0<<AS2;
0001a3 bde2      	OUT  0x22,R30
                 ; 0000 013E TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0001a4 bde5      	OUT  0x25,R30
                 ; 0000 013F TCNT2=0x00;
0001a5 bde4      	OUT  0x24,R30
                 ; 0000 0140 OCR2=0x00;
0001a6 bde3      	OUT  0x23,R30
                 ; 0000 0141 
                 ; 0000 0142 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0143 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<TOIE0);
0001a7 e0e4      	LDI  R30,LOW(4)
0001a8 bfe9      	OUT  0x39,R30
                 ; 0000 0144 
                 ; 0000 0145 // External Interrupt(s) initialization
                 ; 0000 0146 // INT0: Off
                 ; 0000 0147 // INT1: Off
                 ; 0000 0148 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0001a9 e0e0      	LDI  R30,LOW(0)
0001aa bfe5      	OUT  0x35,R30
                 ; 0000 0149 
                 ; 0000 014A // USART initialization
                 ; 0000 014B // USART disabled
                 ; 0000 014C UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0001ab b9ea      	OUT  0xA,R30
                 ; 0000 014D 
                 ; 0000 014E // Analog Comparator initialization
                 ; 0000 014F // Analog Comparator: Off
                 ; 0000 0150 // The Analog Comparator's positive input is
                 ; 0000 0151 // connected to the AIN0 pin
                 ; 0000 0152 // The Analog Comparator's negative input is
                 ; 0000 0153 // connected to the AIN1 pin
                 ; 0000 0154 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0001ac e8e0      	LDI  R30,LOW(128)
0001ad b9e8      	OUT  0x8,R30
                 ; 0000 0155 
                 ; 0000 0156 // ADC initialization
                 ; 0000 0157 // ADC Clock frequency: 345.600 kHz
                 ; 0000 0158 // ADC Voltage Reference: AREF pin
                 ; 0000 0159 ADMUX=ADC_VREF_TYPE;
0001ae e4e0      	LDI  R30,LOW(64)
0001af b9e7      	OUT  0x7,R30
                 ; 0000 015A ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
0001b0 e8e5      	LDI  R30,LOW(133)
0001b1 b9e6      	OUT  0x6,R30
                 ; 0000 015B SFIOR=(0<<ACME);
0001b2 e0e0      	LDI  R30,LOW(0)
0001b3 bfe0      	OUT  0x30,R30
                 ; 0000 015C 
                 ; 0000 015D // SPI initialization
                 ; 0000 015E // SPI disabled
                 ; 0000 015F SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0001b4 b9ed      	OUT  0xD,R30
                 ; 0000 0160 
                 ; 0000 0161 // TWI initialization
                 ; 0000 0162 // TWI disabled
                 ; 0000 0163 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0001b5 bfe6      	OUT  0x36,R30
                 ; 0000 0164 
                 ; 0000 0165 // Global enable interrupts
                 ; 0000 0166 #asm("sei")
0001b6 9478      	sei
                 ; 0000 0167 Uint_dataLed1 = 8888;
0001b7 ebe8      	LDI  R30,LOW(8888)
0001b8 e2f2      	LDI  R31,HIGH(8888)
0001b9 93e0 0160 	STS  _Uint_dataLed1,R30
0001bb 93f0 0161 	STS  _Uint_dataLed1+1,R31
                 ; 0000 0168 Uint_dataLed2 = 8888;
0001bd 93e0 0162 	STS  _Uint_dataLed2,R30
0001bf 93f0 0163 	STS  _Uint_dataLed2+1,R31
                 ; 0000 0169 Uint_dataLed3 = 8888;
0001c1 93e0 0164 	STS  _Uint_dataLed3,R30
0001c3 93f0 0165 	STS  _Uint_dataLed3+1,R31
                 ; 0000 016A ADE_7753_init();
0001c5 d0c0      	RCALL _ADE_7753_init
                 ; 0000 016B Bit_Warning_1 =1;
0001c6 9468      	SET
0001c7 f820      	BLD  R2,0
                 ; 0000 016C delay_ms(100);
0001c8 e6a4      	LDI  R26,LOW(100)
0001c9 e0b0      	LDI  R27,0
0001ca d24a      	RCALL _delay_ms
                 ; 0000 016D Bit_Warning_1 = 0;
0001cb 94e8      	CLT
0001cc f820      	BLD  R2,0
                 ; 0000 016E while (1)
                 _0x48:
                 ; 0000 016F     {
                 ; 0000 0170         Read_Current();
0001cd decb      	RCALL _Read_Current
                 ; 0000 0171     }
0001ce cffe      	RJMP _0x48
                 ; 0000 0172 }
                 _0x4B:
0001cf cfff      	RJMP _0x4B
                 ; .FEND
                 ;#include "ADE7753.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "delay.h"
                 ;
                 ;
                 ;void    Send_cmd_ADE7753(unsigned char data)
                 ; 0001 0006 {
                 
                 	.CSEG
                 _Send_cmd_ADE7753:
                 ; .FSTART _Send_cmd_ADE7753
                 ; 0001 0007     unsigned char cnt;
                 ; 0001 0008     unsigned char   tmp = data;
                 ; 0001 0009     for(cnt = 0;cnt < 8; cnt++)
0001d0 93aa      	ST   -Y,R26
0001d1 d2bb      	RCALL __SAVELOCR2
                 ;	data -> Y+2
                 ;	cnt -> R17
                 ;	tmp -> R16
0001d2 810a      	LDD  R16,Y+2
0001d3 e010      	LDI  R17,LOW(0)
                 _0x20004:
0001d4 3018      	CPI  R17,8
0001d5 f458      	BRSH _0x20005
                 ; 0001 000A     {
                 ; 0001 000B         if((tmp & 0x80) == 0x80)   DOUT_MOSI_SPI_7753_MCU = 1;
0001d6 2fe0      	MOV  R30,R16
0001d7 78e0      	ANDI R30,LOW(0x80)
0001d8 38e0      	CPI  R30,LOW(0x80)
0001d9 f411      	BRNE _0x20006
0001da 9a91      	SBI  0x12,1
                 ; 0001 000C         else DOUT_MOSI_SPI_7753_MCU = 0;
0001db c001      	RJMP _0x20009
                 _0x20006:
0001dc 9891      	CBI  0x12,1
                 ; 0001 000D 
                 ; 0001 000E         tmp <<= 1;
                 _0x20009:
0001dd d1b9      	RCALL SUBOPT_0x13
                 ; 0001 000F         DOUT_CLK_SPI_7753_MCU = 1;
                 ; 0001 0010         delay_us(40);
                 ; 0001 0011         DOUT_CLK_SPI_7753_MCU = 0;
0001de d1be      	RCALL SUBOPT_0x14
                 ; 0001 0012         delay_us(40);
                 ; 0001 0013     }
0001df 5f1f      	SUBI R17,-1
0001e0 cff3      	RJMP _0x20004
                 _0x20005:
                 ; 0001 0014 }
0001e1 d2b2      	RCALL __LOADLOCR2
0001e2 9623      	ADIW R28,3
0001e3 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char    Read_data_ADE7753(void)
                 ; 0001 0017 {
                 _Read_data_ADE7753:
                 ; .FSTART _Read_data_ADE7753
                 ; 0001 0018     unsigned char cnt;
                 ; 0001 0019     unsigned char data;
                 ; 0001 001A     data = 0;
0001e4 d2a8      	RCALL __SAVELOCR2
                 ;	cnt -> R17
                 ;	data -> R16
0001e5 e000      	LDI  R16,LOW(0)
                 ; 0001 001B     for(cnt = 0;cnt < 8; cnt++)
0001e6 e010      	LDI  R17,LOW(0)
                 _0x20011:
0001e7 3018      	CPI  R17,8
0001e8 f430      	BRSH _0x20012
                 ; 0001 001C     {
                 ; 0001 001D         data <<= 1;
0001e9 d1ad      	RCALL SUBOPT_0x13
                 ; 0001 001E         DOUT_CLK_SPI_7753_MCU = 1;
                 ; 0001 001F         delay_us(40);
                 ; 0001 0020         if(DIN_MISO_SPI_7753_MCU == 1)   data += 1;
0001ea 9980      	SBIC 0x10,0
0001eb 5f0f      	SUBI R16,-LOW(1)
                 ; 0001 0021         DOUT_CLK_SPI_7753_MCU = 0;
0001ec d1b0      	RCALL SUBOPT_0x14
                 ; 0001 0022         delay_us(40);
                 ; 0001 0023 
                 ; 0001 0024     }
0001ed 5f1f      	SUBI R17,-1
0001ee cff8      	RJMP _0x20011
                 _0x20012:
                 ; 0001 0025     return data;
0001ef 2fe0      	MOV  R30,R16
0001f0 c0bd      	RJMP _0x2000001
                 ; 0001 0026 }
                 ; .FEND
                 ;
                 ;void    Write_ADE7753(unsigned char IC_CS,unsigned char addr,unsigned char num_data,unsigned char data_1,unsigned char d ...
                 ; 0001 0029 {
                 _Write_ADE7753:
                 ; .FSTART _Write_ADE7753
                 ; 0001 002A     unsigned char data[4];
                 ; 0001 002B     unsigned char   i;
                 ; 0001 002C     data[0] = data_1;
0001f1 93aa      	ST   -Y,R26
0001f2 9724      	SBIW R28,4
0001f3 931a      	ST   -Y,R17
                 ;	IC_CS -> Y+10
                 ;	addr -> Y+9
                 ;	num_data -> Y+8
                 ;	data_1 -> Y+7
                 ;	data_2 -> Y+6
                 ;	data_3 -> Y+5
                 ;	data -> Y+1
                 ;	i -> R17
0001f4 81ef      	LDD  R30,Y+7
0001f5 83e9      	STD  Y+1,R30
                 ; 0001 002D     data[1] = data_2;
0001f6 81ee      	LDD  R30,Y+6
0001f7 83ea      	STD  Y+2,R30
                 ; 0001 002E     data[2] = data_3;
0001f8 81ed      	LDD  R30,Y+5
0001f9 83eb      	STD  Y+3,R30
                 ; 0001 002F 
                 ; 0001 0030     switch (IC_CS)
0001fa 85ea      	LDD  R30,Y+10
0001fb d1a6      	RCALL SUBOPT_0x15
                 ; 0001 0031     {
                 ; 0001 0032         case 1:
0001fc f419      	BRNE _0x2001B
                 ; 0001 0033         {
                 ; 0001 0034             PHASE_1_ON;
0001fd 9aac      	SBI  0x15,4
                 ; 0001 0035             PHASE_2_OFF;
0001fe d1a8      	RCALL SUBOPT_0x16
                 ; 0001 0036             PHASE_3_OFF;
                 ; 0001 0037             break;
0001ff c00f      	RJMP _0x2001A
                 ; 0001 0038         }
                 ; 0001 0039         case 2:
                 _0x2001B:
000200 30e2      	CPI  R30,LOW(0x2)
000201 e0a0      	LDI  R26,HIGH(0x2)
000202 07fa      	CPC  R31,R26
000203 f421      	BRNE _0x20022
                 ; 0001 003A         {
                 ; 0001 003B             PHASE_1_OFF;
000204 98ac      	CBI  0x15,4
                 ; 0001 003C             PHASE_2_ON;
000205 9aad      	SBI  0x15,5
                 ; 0001 003D             PHASE_3_OFF;
000206 98ab      	CBI  0x15,3
                 ; 0001 003E             break;
000207 c007      	RJMP _0x2001A
                 ; 0001 003F         }
                 ; 0001 0040         case 3:
                 _0x20022:
000208 30e3      	CPI  R30,LOW(0x3)
000209 e0a0      	LDI  R26,HIGH(0x3)
00020a 07fa      	CPC  R31,R26
00020b f419      	BRNE _0x2001A
                 ; 0001 0041         {
                 ; 0001 0042             PHASE_1_OFF;
00020c 98ac      	CBI  0x15,4
                 ; 0001 0043             PHASE_2_OFF;
00020d 98ad      	CBI  0x15,5
                 ; 0001 0044             PHASE_3_ON;
00020e 9aab      	SBI  0x15,3
                 ; 0001 0045             break;
                 ; 0001 0046         }
                 ; 0001 0047     }
                 _0x2001A:
                 ; 0001 0048     addr |= 0x80;
00020f 85e9      	LDD  R30,Y+9
000210 68e0      	ORI  R30,0x80
000211 87e9      	STD  Y+9,R30
                 ; 0001 0049     Send_cmd_ADE7753(addr);
000212 85a9      	LDD  R26,Y+9
000213 dfbc      	RCALL _Send_cmd_ADE7753
                 ; 0001 004A     delay_us(20);
                +
000214 e48a     +LDI R24 , LOW ( 74 )
                +__DELAY_USB_LOOP :
000215 958a     +DEC R24
000216 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 74
                 ; 0001 004B     for(i=0;i<num_data;i++)    Send_cmd_ADE7753(data[i]);
000217 e010      	LDI  R17,LOW(0)
                 _0x20031:
000218 85e8      	LDD  R30,Y+8
000219 171e      	CP   R17,R30
00021a f440      	BRSH _0x20032
00021b d18e      	RCALL SUBOPT_0x17
00021c 01de      	MOVW R26,R28
00021d 9611      	ADIW R26,1
00021e d13f      	RCALL SUBOPT_0x9
00021f 91ac      	LD   R26,X
000220 dfaf      	RCALL _Send_cmd_ADE7753
000221 5f1f      	SUBI R17,-1
000222 cff5      	RJMP _0x20031
                 _0x20032:
                 ; 0001 004C PORTC.4 = 0;
000223 98ac      	CBI  0x15,4
                 ; 0001 004D     PHASE_2_OFF;
000224 d182      	RCALL SUBOPT_0x16
                 ; 0001 004E     PHASE_3_OFF;
                 ; 0001 004F }
000225 8118      	LDD  R17,Y+0
000226 962b      	ADIW R28,11
000227 9508      	RET
                 ; .FEND
                 ;unsigned long    Read_ADE7753(unsigned char IC_CS,unsigned char addr,unsigned char num_data)
                 ; 0001 0051 {
                 _Read_ADE7753:
                 ; .FSTART _Read_ADE7753
                 ; 0001 0052     unsigned char   i;
                 ; 0001 0053     unsigned char   data[4];
                 ; 0001 0054     unsigned long int res;
                 ; 0001 0055     for(i=0;i<4;i++)    data[i] = 0;
000228 93aa      	ST   -Y,R26
000229 9728      	SBIW R28,8
00022a 931a      	ST   -Y,R17
                 ;	IC_CS -> Y+11
                 ;	addr -> Y+10
                 ;	num_data -> Y+9
                 ;	i -> R17
                 ;	data -> Y+5
                 ;	res -> Y+1
00022b e010      	LDI  R17,LOW(0)
                 _0x2003A:
00022c 3014      	CPI  R17,4
00022d f440      	BRSH _0x2003B
00022e d17b      	RCALL SUBOPT_0x17
00022f 01de      	MOVW R26,R28
000230 9615      	ADIW R26,5
000231 d12c      	RCALL SUBOPT_0x9
000232 e0e0      	LDI  R30,LOW(0)
000233 93ec      	ST   X,R30
000234 5f1f      	SUBI R17,-1
000235 cff6      	RJMP _0x2003A
                 _0x2003B:
                 ; 0001 0056 switch (IC_CS)
000236 85eb      	LDD  R30,Y+11
000237 d16a      	RCALL SUBOPT_0x15
                 ; 0001 0057     {
                 ; 0001 0058         case 1:
000238 f419      	BRNE _0x2003F
                 ; 0001 0059         {
                 ; 0001 005A             PHASE_1_ON;
000239 9aac      	SBI  0x15,4
                 ; 0001 005B             PHASE_2_OFF;
00023a d16c      	RCALL SUBOPT_0x16
                 ; 0001 005C             PHASE_3_OFF;
                 ; 0001 005D             break;
00023b c00f      	RJMP _0x2003E
                 ; 0001 005E         }
                 ; 0001 005F         case 2:
                 _0x2003F:
00023c 30e2      	CPI  R30,LOW(0x2)
00023d e0a0      	LDI  R26,HIGH(0x2)
00023e 07fa      	CPC  R31,R26
00023f f421      	BRNE _0x20046
                 ; 0001 0060         {
                 ; 0001 0061             PHASE_1_OFF;
000240 98ac      	CBI  0x15,4
                 ; 0001 0062             PHASE_2_ON;
000241 9aad      	SBI  0x15,5
                 ; 0001 0063             PHASE_3_OFF;
000242 98ab      	CBI  0x15,3
                 ; 0001 0064             break;
000243 c007      	RJMP _0x2003E
                 ; 0001 0065         }
                 ; 0001 0066         case 3:
                 _0x20046:
000244 30e3      	CPI  R30,LOW(0x3)
000245 e0a0      	LDI  R26,HIGH(0x3)
000246 07fa      	CPC  R31,R26
000247 f419      	BRNE _0x2003E
                 ; 0001 0067         {
                 ; 0001 0068             PHASE_1_OFF;
000248 98ac      	CBI  0x15,4
                 ; 0001 0069             PHASE_2_OFF;
000249 98ad      	CBI  0x15,5
                 ; 0001 006A             PHASE_3_ON;
00024a 9aab      	SBI  0x15,3
                 ; 0001 006B             break;
                 ; 0001 006C         }
                 ; 0001 006D     }
                 _0x2003E:
                 ; 0001 006E     delay_ms(10);
00024b e0aa      	LDI  R26,LOW(10)
00024c e0b0      	LDI  R27,0
00024d d1c7      	RCALL _delay_ms
                 ; 0001 006F     addr &= 0x3F;
00024e 85ea      	LDD  R30,Y+10
00024f 73ef      	ANDI R30,LOW(0x3F)
000250 87ea      	STD  Y+10,R30
                 ; 0001 0070     Send_cmd_ADE7753(addr);
000251 85aa      	LDD  R26,Y+10
000252 df7d      	RCALL _Send_cmd_ADE7753
                 ; 0001 0071     for(i=0;i<num_data;i++) data[i] = Read_data_ADE7753();
000253 e010      	LDI  R17,LOW(0)
                 _0x20055:
000254 85e9      	LDD  R30,Y+9
000255 171e      	CP   R17,R30
000256 f468      	BRSH _0x20056
000257 d152      	RCALL SUBOPT_0x17
000258 01de      	MOVW R26,R28
000259 9615      	ADIW R26,5
00025a 0fea      	ADD  R30,R26
00025b 1ffb      	ADC  R31,R27
00025c 93ff      	PUSH R31
00025d 93ef      	PUSH R30
00025e df85      	RCALL _Read_data_ADE7753
00025f 91af      	POP  R26
000260 91bf      	POP  R27
000261 93ec      	ST   X,R30
000262 5f1f      	SUBI R17,-1
000263 cff0      	RJMP _0x20055
                 _0x20056:
                 ; 0001 0072 PORTC.4 = 0;
000264 98ac      	CBI  0x15,4
                 ; 0001 0073     PHASE_2_OFF;
000265 d141      	RCALL SUBOPT_0x16
                 ; 0001 0074     PHASE_3_OFF;
                 ; 0001 0075     res = 0;
000266 e0e0      	LDI  R30,LOW(0)
                +
000267 83e9     +STD Y + 1 , R30
000268 83ea     +STD Y + 1 + 1 , R30
000269 83eb     +STD Y + 1 + 2 , R30
00026a 83ec     +STD Y + 1 + 3 , R30
                 	__CLRD1S 1
                 ; 0001 0076     for(i=0;i<num_data;i++)
00026b e010      	LDI  R17,LOW(0)
                 _0x2005E:
00026c 85e9      	LDD  R30,Y+9
00026d 171e      	CP   R17,R30
00026e f480      	BRSH _0x2005F
                 ; 0001 0077     {
                 ; 0001 0078         res <<= 8;
00026f d13d      	RCALL SUBOPT_0x18
000270 e0e8      	LDI  R30,LOW(8)
000271 d1ba      	RCALL __LSLD12
000272 d13f      	RCALL SUBOPT_0x19
                 ; 0001 0079         res += data[i];
000273 d136      	RCALL SUBOPT_0x17
000274 01de      	MOVW R26,R28
000275 9615      	ADIW R26,5
000276 d0e7      	RCALL SUBOPT_0x9
000277 91ec      	LD   R30,X
000278 e0f0      	LDI  R31,0
000279 d133      	RCALL SUBOPT_0x18
00027a d1c2      	RCALL __CWD1
00027b d1a3      	RCALL __ADDD12
00027c d135      	RCALL SUBOPT_0x19
                 ; 0001 007A     }
00027d 5f1f      	SUBI R17,-1
00027e cfed      	RJMP _0x2005E
                 _0x2005F:
                 ; 0001 007B     return (res);
                +
00027f 81e9     +LDD R30 , Y + 1
000280 81fa     +LDD R31 , Y + 1 + 1
000281 816b     +LDD R22 , Y + 1 + 2
000282 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
000283 8118      	LDD  R17,Y+0
000284 962c      	ADIW R28,12
000285 9508      	RET
                 ; 0001 007C }
                 ; .FEND
                 ;
                 ;
                 ;void    ADE_7753_init(void)
                 ; 0001 0080 {
                 _ADE_7753_init:
                 ; .FSTART _ADE_7753_init
                 ; 0001 0081     unsigned int   reg = 0;
                 ; 0001 0082     Write_ADE7753(1,MODE,0x00,0x00,0x00);
000286 d206      	RCALL __SAVELOCR2
                 ;	reg -> R16,R17
                +
000287 e000     +LDI R16 , LOW ( 0 )
000288 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000289 d09d      	RCALL SUBOPT_0x0
00028a d12c      	RCALL SUBOPT_0x1A
00028b d130      	RCALL SUBOPT_0x1B
00028c d12f      	RCALL SUBOPT_0x1B
00028d d131      	RCALL SUBOPT_0x1C
                 ; 0001 0083     delay_ms(500);
                 ; 0001 0084     reg = 0;
                +
00028e e000     +LDI R16 , LOW ( 0 )
00028f e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0001 0085     reg |= (1<<SWRST);
000290 6400      	ORI  R16,LOW(64)
                 ; 0001 0086     Write_ADE7753(1,MODE,(reg>>8)&0xFF,reg & 0xff,0x00);
000291 d095      	RCALL SUBOPT_0x0
000292 d124      	RCALL SUBOPT_0x1A
000293 931a      	ST   -Y,R17
000294 930a      	ST   -Y,R16
000295 d129      	RCALL SUBOPT_0x1C
                 ; 0001 0087     delay_ms(500);
                 ; 0001 0088     reg = Read_ADE7753(1,MODE);
000296 d090      	RCALL SUBOPT_0x0
000297 d12c      	RCALL SUBOPT_0x1D
                 ; 0001 0089     delay_ms(500);
000298 d131      	RCALL SUBOPT_0x1E
                 ; 0001 008A     reg = Read_ADE7753(1,MODE);
000299 d12a      	RCALL SUBOPT_0x1D
                 ; 0001 008B     reg |= (1<<DISHPF) | (1<<WAVSEL0) | (1<<WAVSEL1);
                +
00029a 6001     +ORI R16 , LOW ( 24577 )
00029b 6610     +ORI R17 , HIGH ( 24577 )
                 	__ORWRN 16,17,24577
                 ; 0001 008C     // Write_ADE7753(1,MODE,(reg>>8)&0xFF,reg & 0xff,0x00);
                 ; 0001 008D     delay_ms(500);
00029c d12d      	RCALL SUBOPT_0x1E
                 ; 0001 008E     Write_ADE7753(1,SAGLVL,0X2a,0X00,0X00);
00029d e1ef      	LDI  R30,LOW(31)
00029e 93ea      	ST   -Y,R30
00029f d087      	RCALL SUBOPT_0x0
0002a0 e2ea      	LDI  R30,LOW(42)
0002a1 93ea      	ST   -Y,R30
0002a2 d119      	RCALL SUBOPT_0x1B
0002a3 e0a0      	LDI  R26,LOW(0)
0002a4 df4c      	RCALL _Write_ADE7753
                 ; 0001 008F     Write_ADE7753(1,SAGCYC,0XFF,0X00,0X00);
0002a5 d081      	RCALL SUBOPT_0x0
0002a6 e1ee      	LDI  R30,LOW(30)
0002a7 93ea      	ST   -Y,R30
0002a8 d07e      	RCALL SUBOPT_0x0
0002a9 efef      	LDI  R30,LOW(255)
0002aa 93ea      	ST   -Y,R30
0002ab d110      	RCALL SUBOPT_0x1B
0002ac e0a0      	LDI  R26,LOW(0)
0002ad df43      	RCALL _Write_ADE7753
                 ; 0001 0090 }
                 _0x2000001:
0002ae 9109      	LD   R16,Y+
0002af 9119      	LD   R17,Y+
0002b0 9508      	RET
                 ; .FEND
                 ;#include "led.h"
                 ;#include "mega8.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "delay.h"
                 ;
                 ;unsigned char   BCDLED[11]={0xF9,0x81,0xBA,0xAB,0xC3,0x6B,0x7B,0xA1,0xFB,0xEB,0};
                 
                 	.DSEG
                 ;
                 ;unsigned char   Uc_Select_led=1;
                 ;
                 ;/*
                 ;Cac gia tri hien thi tren cac led
                 ;Cap nhat gia tri vao cac bien nay de hien thi len led
                 ;*/
                 ;unsigned int   Uint_dataLed1 = 0;
                 ;unsigned int   Uint_dataLed2 = 0;
                 ;unsigned int   Uint_dataLed3 = 0;
                 ;
                 ;/*
                 ;Gui data ra led
                 ;Gui lan luot data_first, data_second, data_third
                 ;Khi gui het du lieu se tien hanh xuat du lieu
                 ;*/
                 ;void    SEND_DATA_LED(unsigned char  data_first,unsigned char  data_second,unsigned char  data_third)
                 ; 0002 0017 {
                 
                 	.CSEG
                 _SEND_DATA_LED:
                 ; .FSTART _SEND_DATA_LED
                 ; 0002 0018     unsigned char   i;
                 ; 0002 0019     unsigned char   data;
                 ; 0002 001A     data = data_first;
0002b1 93aa      	ST   -Y,R26
0002b2 d1da      	RCALL __SAVELOCR2
                 ;	data_first -> Y+4
                 ;	data_second -> Y+3
                 ;	data_third -> Y+2
                 ;	i -> R17
                 ;	data -> R16
0002b3 810c      	LDD  R16,Y+4
                 ; 0002 001B     for(i=0;i<8;i++)
0002b4 e010      	LDI  R17,LOW(0)
                 _0x40005:
0002b5 3018      	CPI  R17,8
0002b6 f440      	BRSH _0x40006
                 ; 0002 001C     {
                 ; 0002 001D         if((data & 0x80))    DO_595_MOSI = 1;
0002b7 ff07      	SBRS R16,7
0002b8 c002      	RJMP _0x40007
0002b9 9ac3      	SBI  0x18,3
                 ; 0002 001E         else    DO_595_MOSI = 0;
0002ba c001      	RJMP _0x4000A
                 _0x40007:
0002bb 98c3      	CBI  0x18,3
                 ; 0002 001F         data <<= 1;
                 _0x4000A:
0002bc d111      	RCALL SUBOPT_0x1F
                 ; 0002 0020         DO_595_SCK = 1;
                 ; 0002 0021         DO_595_SCK = 0;
                 ; 0002 0022     }
0002bd 5f1f      	SUBI R17,-1
0002be cff6      	RJMP _0x40005
                 _0x40006:
                 ; 0002 0023     data = data_second;
0002bf 810b      	LDD  R16,Y+3
                 ; 0002 0024     for(i=0;i<8;i++)
0002c0 e010      	LDI  R17,LOW(0)
                 _0x40012:
0002c1 3018      	CPI  R17,8
0002c2 f440      	BRSH _0x40013
                 ; 0002 0025     {
                 ; 0002 0026         if((data & 0x80))    DO_595_MOSI = 1;
0002c3 ff07      	SBRS R16,7
0002c4 c002      	RJMP _0x40014
0002c5 9ac3      	SBI  0x18,3
                 ; 0002 0027         else    DO_595_MOSI = 0;
0002c6 c001      	RJMP _0x40017
                 _0x40014:
0002c7 98c3      	CBI  0x18,3
                 ; 0002 0028         data <<= 1;
                 _0x40017:
0002c8 d105      	RCALL SUBOPT_0x1F
                 ; 0002 0029         DO_595_SCK = 1;
                 ; 0002 002A         DO_595_SCK = 0;
                 ; 0002 002B     }
0002c9 5f1f      	SUBI R17,-1
0002ca cff6      	RJMP _0x40012
                 _0x40013:
                 ; 0002 002C     data = data_third;
0002cb 810a      	LDD  R16,Y+2
                 ; 0002 002D     for(i=0;i<8;i++)
0002cc e010      	LDI  R17,LOW(0)
                 _0x4001F:
0002cd 3018      	CPI  R17,8
0002ce f440      	BRSH _0x40020
                 ; 0002 002E     {
                 ; 0002 002F         if((data & 0x80))    DO_595_MOSI = 1;
0002cf ff07      	SBRS R16,7
0002d0 c002      	RJMP _0x40021
0002d1 9ac3      	SBI  0x18,3
                 ; 0002 0030         else    DO_595_MOSI = 0;
0002d2 c001      	RJMP _0x40024
                 _0x40021:
0002d3 98c3      	CBI  0x18,3
                 ; 0002 0031         data <<= 1;
                 _0x40024:
0002d4 d0f9      	RCALL SUBOPT_0x1F
                 ; 0002 0032         DO_595_SCK = 1;
                 ; 0002 0033         DO_595_SCK = 0;
                 ; 0002 0034     }
0002d5 5f1f      	SUBI R17,-1
0002d6 cff6      	RJMP _0x4001F
                 _0x40020:
                 ; 0002 0035     CTRL_595_ON;
0002d7 9ac1      	SBI  0x18,1
                 ; 0002 0036     CTRL_595_OFF;
0002d8 98c1      	CBI  0x18,1
                 ; 0002 0037 }
0002d9 d1ba      	RCALL __LOADLOCR2
0002da 9625      	ADIW R28,5
0002db 9508      	RET
                 ; .FEND
                 ;
                 ;/*
                 ;Ham quet led
                 ;num_led: Thu tu led
                 ;data: Du lieu hien thi tren led.
                 ;*/
                 ;void    SCAN_LED(void)
                 ; 0002 003F {
                 _SCAN_LED:
                 ; .FSTART _SCAN_LED
                 ; 0002 0040     unsigned char   byte1,byte2,byte3;
                 ; 0002 0041     unsigned char    data;
                 ; 0002 0042     unsigned char   bit_left;
                 ; 0002 0043     bit_left = 0x01;
0002dc d1ac      	RCALL __SAVELOCR6
                 ;	byte1 -> R17
                 ;	byte2 -> R16
                 ;	byte3 -> R19
                 ;	data -> R18
                 ;	bit_left -> R21
0002dd e051      	LDI  R21,LOW(1)
                 ; 0002 0044     byte1 = 0;
0002de e010      	LDI  R17,LOW(0)
                 ; 0002 0045     byte2 = 0;
0002df e000      	LDI  R16,LOW(0)
                 ; 0002 0046     byte3 = 0;
0002e0 e030      	LDI  R19,LOW(0)
                 ; 0002 0047 
                 ; 0002 0048     Uc_Select_led++;
0002e1 94a3      	INC  R10
                 ; 0002 0049     bit_left <<= (Uc_Select_led-1);
0002e2 2dea      	MOV  R30,R10
0002e3 50e1      	SUBI R30,LOW(1)
0002e4 2fa5      	MOV  R26,R21
0002e5 d13e      	RCALL __LSLB12
0002e6 2f5e      	MOV  R21,R30
                 ; 0002 004A     if(Uc_Select_led > 8)
0002e7 e0e8      	LDI  R30,LOW(8)
0002e8 15ea      	CP   R30,R10
0002e9 f418      	BRSH _0x4002F
                 ; 0002 004B     {
                 ; 0002 004C         Uc_Select_led = 1;
0002ea e0e1      	LDI  R30,LOW(1)
0002eb 2eae      	MOV  R10,R30
                 ; 0002 004D         bit_left = 0x01;
0002ec e051      	LDI  R21,LOW(1)
                 ; 0002 004E     }
                 ; 0002 004F     /* 7-seg 1*/
                 ; 0002 0050     data = Uint_dataLed1/1000;
                 _0x4002F:
0002ed d0e4      	RCALL SUBOPT_0x20
0002ee d0e8      	RCALL SUBOPT_0x21
                 ; 0002 0051     byte1 = BCDLED[data];
                 ; 0002 0052     if(byte1 & bit_left) byte3 |= 0x01;
0002ef f009      	BREQ _0x40030
0002f0 6031      	ORI  R19,LOW(1)
                 ; 0002 0053     data = Uint_dataLed1/100%10;
                 _0x40030:
0002f1 d0e0      	RCALL SUBOPT_0x20
0002f2 d0ef      	RCALL SUBOPT_0x22
                 ; 0002 0054     byte1 = BCDLED[data];
                 ; 0002 0055     byte1 |= 0x04;
                 ; 0002 0056     if(byte1 & bit_left) byte3 |= 0x02;
0002f3 f009      	BREQ _0x40031
0002f4 6032      	ORI  R19,LOW(2)
                 ; 0002 0057     data = Uint_dataLed1/10%10;
                 _0x40031:
0002f5 d0dc      	RCALL SUBOPT_0x20
0002f6 d0fb      	RCALL SUBOPT_0x23
0002f7 d0fd      	RCALL SUBOPT_0x24
                 ; 0002 0058     byte1 = BCDLED[data];
                 ; 0002 0059     if(byte1 & bit_left) byte3 |= 0x04;
0002f8 f009      	BREQ _0x40032
0002f9 6034      	ORI  R19,LOW(4)
                 ; 0002 005A     data = Uint_dataLed1%10;
                 _0x40032:
0002fa d0d7      	RCALL SUBOPT_0x20
0002fb d105      	RCALL SUBOPT_0x25
                 ; 0002 005B     byte1 = BCDLED[data];
                 ; 0002 005C     if(byte1 & bit_left) byte3 |= 0x08;
0002fc f009      	BREQ _0x40033
0002fd 6038      	ORI  R19,LOW(8)
                 ; 0002 005D     /* 7-seg 2 */
                 ; 0002 005E     data = Uint_dataLed2/1000;
                 _0x40033:
0002fe d10c      	RCALL SUBOPT_0x26
0002ff d0d7      	RCALL SUBOPT_0x21
                 ; 0002 005F     byte1 = BCDLED[data];
                 ; 0002 0060     if(byte1 & bit_left) byte3 |= 0x40;
000300 f009      	BREQ _0x40034
000301 6430      	ORI  R19,LOW(64)
                 ; 0002 0061     data = Uint_dataLed2/100%10;
                 _0x40034:
000302 d108      	RCALL SUBOPT_0x26
000303 d0de      	RCALL SUBOPT_0x22
                 ; 0002 0062     byte1 = BCDLED[data];
                 ; 0002 0063     byte1 |= 0x04;
                 ; 0002 0064     if(byte1 & bit_left) byte3 |= 0x20;
000304 f009      	BREQ _0x40035
000305 6230      	ORI  R19,LOW(32)
                 ; 0002 0065     data = Uint_dataLed2/10%10;
                 _0x40035:
000306 d104      	RCALL SUBOPT_0x26
000307 d0ea      	RCALL SUBOPT_0x23
000308 d0ec      	RCALL SUBOPT_0x24
                 ; 0002 0066     byte1 = BCDLED[data];
                 ; 0002 0067     if(byte1 & bit_left) byte3 |= 0x10;
000309 f009      	BREQ _0x40036
00030a 6130      	ORI  R19,LOW(16)
                 ; 0002 0068     data = Uint_dataLed2%10;
                 _0x40036:
00030b d0ff      	RCALL SUBOPT_0x26
00030c d0f4      	RCALL SUBOPT_0x25
                 ; 0002 0069     byte1 = BCDLED[data];
                 ; 0002 006A     if(byte1 & bit_left) byte3 |= 0x80;
00030d f009      	BREQ _0x40037
00030e 6830      	ORI  R19,LOW(128)
                 ; 0002 006B     /* 7-seg 3 */
                 ; 0002 006C     data = Uint_dataLed3/1000;
                 _0x40037:
00030f d100      	RCALL SUBOPT_0x27
000310 d0c6      	RCALL SUBOPT_0x21
                 ; 0002 006D     byte1 = BCDLED[data];
                 ; 0002 006E     if(byte1 & bit_left) byte2 |= 0x40;
000311 f009      	BREQ _0x40038
000312 6400      	ORI  R16,LOW(64)
                 ; 0002 006F     data = Uint_dataLed3/100%10;
                 _0x40038:
000313 d0fc      	RCALL SUBOPT_0x27
000314 d0cd      	RCALL SUBOPT_0x22
                 ; 0002 0070     byte1 = BCDLED[data];
                 ; 0002 0071     byte1 |= 0x04;
                 ; 0002 0072     if(byte1 & bit_left) byte2 |= 0x20;
000315 f009      	BREQ _0x40039
000316 6200      	ORI  R16,LOW(32)
                 ; 0002 0073     data = Uint_dataLed3/10%10;
                 _0x40039:
000317 d0f8      	RCALL SUBOPT_0x27
000318 d0d9      	RCALL SUBOPT_0x23
000319 d0db      	RCALL SUBOPT_0x24
                 ; 0002 0074     byte1 = BCDLED[data];
                 ; 0002 0075     if(byte1 & bit_left) byte2 |= 0x10;
00031a f009      	BREQ _0x4003A
00031b 6100      	ORI  R16,LOW(16)
                 ; 0002 0076     data = Uint_dataLed3%10;
                 _0x4003A:
00031c d0f3      	RCALL SUBOPT_0x27
00031d d0e3      	RCALL SUBOPT_0x25
                 ; 0002 0077     byte1 = BCDLED[data];
                 ; 0002 0078     if(byte1 & bit_left) byte2 |= 0x80;
00031e f009      	BREQ _0x4003B
00031f 6800      	ORI  R16,LOW(128)
                 ; 0002 0079 
                 ; 0002 007A     SEND_DATA_LED(bit_left,byte2,byte3);
                 _0x4003B:
000320 935a      	ST   -Y,R21
000321 930a      	ST   -Y,R16
000322 2fa3      	MOV  R26,R19
000323 df8d      	RCALL _SEND_DATA_LED
                 ; 0002 007B }
000324 d16b      	RCALL __LOADLOCR6
000325 9626      	ADIW R28,6
000326 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _Uint_dataLed1:
000160           	.BYTE 0x2
                 _Uint_dataLed2:
000162           	.BYTE 0x2
                 _Uint_dataLed3:
000164           	.BYTE 0x2
                 _AI10__Current_L1:
000166           	.BYTE 0xA
                 _AI10__Current_L2:
000170           	.BYTE 0xA
                 _AI10__Current_L3:
00017a           	.BYTE 0xA
                 _BCDLED:
000184           	.BYTE 0xB
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x0:
000327 e0e1      	LDI  R30,LOW(1)
000328 93ea      	ST   -Y,R30
000329 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x1:
00032a e1e6      	LDI  R30,LOW(22)
00032b 93ea      	ST   -Y,R30
00032c e0a3      	LDI  R26,LOW(3)
00032d defa      	RCALL _Read_ADE7753
00032e 01df      	MOVW R26,R30
00032f 01cb      	MOVW R24,R22
000330 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x2:
000331 d12b      	RCALL __DIVD21U
                +
000332 83ee     +STD Y + 6 , R30
000333 83ff     +STD Y + 6 + 1 , R31
000334 8768     +STD Y + 6 + 2 , R22
000335 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
000336 2de7      	MOV  R30,R7
000337 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
000338 e6a6      	LDI  R26,LOW(_AI10__Current_L1)
000339 e0b1      	LDI  R27,HIGH(_AI10__Current_L1)
00033a e0f0      	LDI  R31,0
00033b 0fee      	LSL  R30
00033c 1fff      	ROL  R31
00033d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x4:
00033e 0fea      	ADD  R30,R26
00033f 1ffb      	ADC  R31,R27
000340 81ae      	LDD  R26,Y+6
000341 81bf      	LDD  R27,Y+6+1
000342 83a0      	STD  Z+0,R26
000343 83b1      	STD  Z+1,R27
000344 e3a2      	LDI  R26,LOW(50)
000345 e0b0      	LDI  R27,0
000346 c0ce      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
000347 e7a0      	LDI  R26,LOW(_AI10__Current_L2)
000348 e0b1      	LDI  R27,HIGH(_AI10__Current_L2)
000349 e0f0      	LDI  R31,0
00034a 0fee      	LSL  R30
00034b 1fff      	ROL  R31
00034c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
00034d e7aa      	LDI  R26,LOW(_AI10__Current_L3)
00034e e0b1      	LDI  R27,HIGH(_AI10__Current_L3)
00034f e0f0      	LDI  R31,0
000350 0fee      	LSL  R30
000351 1fff      	ROL  R31
000352 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 15 TIMES, CODE SIZE REDUCTION:68 WORDS
                 SUBOPT_0x7:
000353 2fe3      	MOV  R30,R19
000354 e0f0      	LDI  R31,0
000355 01de      	MOVW R26,R28
000356 961a      	ADIW R26,10
000357 0fee      	LSL  R30
000358 1fff      	ROL  R31
000359 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x8:
00035a 0fea      	ADD  R30,R26
00035b 1ffb      	ADC  R31,R27
00035c 010f      	MOVW R0,R30
00035d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 21 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x9:
00035e 0fae      	ADD  R26,R30
00035f 1fbf      	ADC  R27,R31
000360 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xA:
000361 d123      	RCALL __GETW1P
000362 01d0      	MOVW R26,R0
000363 93ed      	ST   X+,R30
000364 93fc      	ST   X,R31
000365 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0xB:
000366 dff7      	RCALL SUBOPT_0x9
000367 900d      	LD   R0,X+
000368 901c      	LD   R1,X
000369 2fe2      	MOV  R30,R18
00036a e0f0      	LDI  R31,0
00036b 01de      	MOVW R26,R28
00036c 961a      	ADIW R26,10
00036d 0fee      	LSL  R30
00036e 1fff      	ROL  R31
00036f dfee      	RCALL SUBOPT_0x9
000370 d114      	RCALL __GETW1P
000371 15e0      	CP   R30,R0
000372 05f1      	CPC  R31,R1
000373 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xC:
000374 dfe9      	RCALL SUBOPT_0x9
000375 910d      	LD   R16,X+
000376 911c      	LD   R17,X
000377 cfdb      	RJMP SUBOPT_0x7
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0xD:
000378 2fe2      	MOV  R30,R18
000379 e0f0      	LDI  R31,0
00037a 01de      	MOVW R26,R28
00037b 961a      	ADIW R26,10
00037c 0fee      	LSL  R30
00037d 1fff      	ROL  R31
00037e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xE:
00037f dfde      	RCALL SUBOPT_0x9
000380 cfe0      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xF:
000381 0fea      	ADD  R30,R26
000382 1ffb      	ADC  R31,R27
000383 8300      	ST   Z,R16
000384 8311      	STD  Z+1,R17
000385 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x10:
                +
000386 e040     +LDI R20 , LOW ( 0 )
000387 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000388 e031      	LDI  R19,LOW(1)
000389 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x11:
00038a dfd3      	RCALL SUBOPT_0x9
00038b d0f9      	RCALL __GETW1P
                +
00038c 0f4e     +ADD R20 , R30
00038d 1f5f     +ADC R21 , R31
                 	__ADDWRR 20,21,30,31
00038e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x12:
00038f 01da      	MOVW R26,R20
000390 e0e3      	LDI  R30,LOW(3)
000391 e0f0      	LDI  R31,HIGH(3)
000392 d0b7      	RCALL __DIVW21U
000393 01af      	MOVW R20,R30
000394 ece8      	LDI  R30,LOW(200)
000395 15eb      	CP   R30,R11
000396 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x13:
000397 0f00      	LSL  R16
000398 9a94      	SBI  0x12,4
                +
000399 e983     +LDI R24 , LOW ( 147 )
                +__DELAY_USB_LOOP :
00039a 958a     +DEC R24
00039b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 147
00039c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
00039d 9894      	CBI  0x12,4
                +
00039e e983     +LDI R24 , LOW ( 147 )
                +__DELAY_USB_LOOP :
00039f 958a     +DEC R24
0003a0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 147
0003a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
0003a2 e0f0      	LDI  R31,0
0003a3 30e1      	CPI  R30,LOW(0x1)
0003a4 e0a0      	LDI  R26,HIGH(0x1)
0003a5 07fa      	CPC  R31,R26
0003a6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
0003a7 98ad      	CBI  0x15,5
0003a8 98ab      	CBI  0x15,3
0003a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
0003aa 2fe1      	MOV  R30,R17
0003ab e0f0      	LDI  R31,0
0003ac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
                +
0003ad 81a9     +LDD R26 , Y + 1
0003ae 81ba     +LDD R27 , Y + 1 + 1
0003af 818b     +LDD R24 , Y + 1 + 2
0003b0 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
0003b1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
                +
0003b2 83e9     +STD Y + 1 , R30
0003b3 83fa     +STD Y + 1 + 1 , R31
0003b4 836b     +STD Y + 1 + 2 , R22
0003b5 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
0003b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
0003b7 e0e9      	LDI  R30,LOW(9)
0003b8 93ea      	ST   -Y,R30
0003b9 e0e2      	LDI  R30,LOW(2)
0003ba 93ea      	ST   -Y,R30
0003bb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
0003bc e0e0      	LDI  R30,LOW(0)
0003bd 93ea      	ST   -Y,R30
0003be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1C:
0003bf e0a0      	LDI  R26,LOW(0)
0003c0 de30      	RCALL _Write_ADE7753
0003c1 efa4      	LDI  R26,LOW(500)
0003c2 e0b1      	LDI  R27,HIGH(500)
0003c3 c051      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1D:
0003c4 e0e9      	LDI  R30,LOW(9)
0003c5 93ea      	ST   -Y,R30
0003c6 e0a2      	LDI  R26,LOW(2)
0003c7 de60      	RCALL _Read_ADE7753
0003c8 018f      	MOVW R16,R30
0003c9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
0003ca efa4      	LDI  R26,LOW(500)
0003cb e0b1      	LDI  R27,HIGH(500)
0003cc d048      	RCALL _delay_ms
0003cd cf59      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1F:
0003ce 0f00      	LSL  R16
0003cf 9ac5      	SBI  0x18,5
0003d0 98c5      	CBI  0x18,5
0003d1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x20:
0003d2 91a0 0160 	LDS  R26,_Uint_dataLed1
0003d4 91b0 0161 	LDS  R27,_Uint_dataLed1+1
0003d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x21:
0003d7 eee8      	LDI  R30,LOW(1000)
0003d8 e0f3      	LDI  R31,HIGH(1000)
0003d9 d070      	RCALL __DIVW21U
0003da 2f2e      	MOV  R18,R30
0003db e0f0      	LDI  R31,0
0003dc 57ec      	SUBI R30,LOW(-_BCDLED)
0003dd 4ffe      	SBCI R31,HIGH(-_BCDLED)
0003de 8110      	LD   R17,Z
0003df 2fe5      	MOV  R30,R21
0003e0 23e1      	AND  R30,R17
0003e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:28 WORDS
                 SUBOPT_0x22:
0003e2 e6e4      	LDI  R30,LOW(100)
0003e3 e0f0      	LDI  R31,HIGH(100)
0003e4 d065      	RCALL __DIVW21U
0003e5 01df      	MOVW R26,R30
0003e6 e0ea      	LDI  R30,LOW(10)
0003e7 e0f0      	LDI  R31,HIGH(10)
0003e8 d099      	RCALL __MODW21U
0003e9 2f2e      	MOV  R18,R30
0003ea e0f0      	LDI  R31,0
0003eb 57ec      	SUBI R30,LOW(-_BCDLED)
0003ec 4ffe      	SBCI R31,HIGH(-_BCDLED)
0003ed 8110      	LD   R17,Z
0003ee 6014      	ORI  R17,LOW(4)
0003ef 2fe5      	MOV  R30,R21
0003f0 23e1      	AND  R30,R17
0003f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x23:
0003f2 e0ea      	LDI  R30,LOW(10)
0003f3 e0f0      	LDI  R31,HIGH(10)
0003f4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:20 WORDS
                 SUBOPT_0x24:
0003f5 d054      	RCALL __DIVW21U
0003f6 01df      	MOVW R26,R30
0003f7 dffa      	RCALL SUBOPT_0x23
0003f8 d089      	RCALL __MODW21U
0003f9 2f2e      	MOV  R18,R30
0003fa e0f0      	LDI  R31,0
0003fb 57ec      	SUBI R30,LOW(-_BCDLED)
0003fc 4ffe      	SBCI R31,HIGH(-_BCDLED)
0003fd 8110      	LD   R17,Z
0003fe 2fe5      	MOV  R30,R21
0003ff 23e1      	AND  R30,R17
000400 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0x25:
000401 dff0      	RCALL SUBOPT_0x23
000402 d07f      	RCALL __MODW21U
000403 2f2e      	MOV  R18,R30
000404 e0f0      	LDI  R31,0
000405 57ec      	SUBI R30,LOW(-_BCDLED)
000406 4ffe      	SBCI R31,HIGH(-_BCDLED)
000407 8110      	LD   R17,Z
000408 2fe5      	MOV  R30,R21
000409 23e1      	AND  R30,R17
00040a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x26:
00040b 91a0 0162 	LDS  R26,_Uint_dataLed2
00040d 91b0 0163 	LDS  R27,_Uint_dataLed2+1
00040f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x27:
000410 91a0 0164 	LDS  R26,_Uint_dataLed3
000412 91b0 0165 	LDS  R27,_Uint_dataLed3+1
000414 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000415 9610      	adiw r26,0
000416 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000417 ec8d     +LDI R24 , LOW ( 0xACD )
000418 e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
000419 9701     +SBIW R24 , 1
00041a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
00041b 95a8      	wdr
00041c 9711      	sbiw r26,1
00041d f7c9      	brne __delay_ms0
                 __delay_ms1:
00041e 9508      	ret
                 
                 __ADDD12:
00041f 0fea      	ADD  R30,R26
000420 1ffb      	ADC  R31,R27
000421 1f68      	ADC  R22,R24
000422 1f79      	ADC  R23,R25
000423 9508      	RET
                 
                 __LSLB12:
000424 23ee      	TST  R30
000425 2e0e      	MOV  R0,R30
000426 2fea      	MOV  R30,R26
000427 f019      	BREQ __LSLB12R
                 __LSLB12L:
000428 0fee      	LSL  R30
000429 940a      	DEC  R0
00042a f7e9      	BRNE __LSLB12L
                 __LSLB12R:
00042b 9508      	RET
                 
                 __LSLD12:
00042c 23ee      	TST  R30
00042d 2e0e      	MOV  R0,R30
00042e 01fd      	MOVW R30,R26
00042f 01bc      	MOVW R22,R24
000430 f031      	BREQ __LSLD12R
                 __LSLD12L:
000431 0fee      	LSL  R30
000432 1fff      	ROL  R31
000433 1f66      	ROL  R22
000434 1f77      	ROL  R23
000435 940a      	DEC  R0
000436 f7d1      	BRNE __LSLD12L
                 __LSLD12R:
000437 9508      	RET
                 
                 __LSRW2:
000438 95f6      	LSR  R31
000439 95e7      	ROR  R30
00043a 95f6      	LSR  R31
00043b 95e7      	ROR  R30
00043c 9508      	RET
                 
                 __CWD1:
00043d 2f6f      	MOV  R22,R31
00043e 0f66      	ADD  R22,R22
00043f 0b66      	SBC  R22,R22
000440 2f76      	MOV  R23,R22
000441 9508      	RET
                 
                 __MULW12U:
000442 9ffa      	MUL  R31,R26
000443 2df0      	MOV  R31,R0
000444 9feb      	MUL  R30,R27
000445 0df0      	ADD  R31,R0
000446 9fea      	MUL  R30,R26
000447 2de0      	MOV  R30,R0
000448 0df1      	ADD  R31,R1
000449 9508      	RET
                 
                 __DIVW21U:
00044a 2400      	CLR  R0
00044b 2411      	CLR  R1
00044c e190      	LDI  R25,16
                 __DIVW21U1:
00044d 0faa      	LSL  R26
00044e 1fbb      	ROL  R27
00044f 1c00      	ROL  R0
000450 1c11      	ROL  R1
000451 1a0e      	SUB  R0,R30
000452 0a1f      	SBC  R1,R31
000453 f418      	BRCC __DIVW21U2
000454 0e0e      	ADD  R0,R30
000455 1e1f      	ADC  R1,R31
000456 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000457 60a1      	SBR  R26,1
                 __DIVW21U3:
000458 959a      	DEC  R25
000459 f799      	BRNE __DIVW21U1
00045a 01fd      	MOVW R30,R26
00045b 01d0      	MOVW R26,R0
00045c 9508      	RET
                 
                 __DIVD21U:
00045d 933f      	PUSH R19
00045e 934f      	PUSH R20
00045f 935f      	PUSH R21
000460 2400      	CLR  R0
000461 2411      	CLR  R1
000462 2744      	CLR  R20
000463 2755      	CLR  R21
000464 e230      	LDI  R19,32
                 __DIVD21U1:
000465 0faa      	LSL  R26
000466 1fbb      	ROL  R27
000467 1f88      	ROL  R24
000468 1f99      	ROL  R25
000469 1c00      	ROL  R0
00046a 1c11      	ROL  R1
00046b 1f44      	ROL  R20
00046c 1f55      	ROL  R21
00046d 1a0e      	SUB  R0,R30
00046e 0a1f      	SBC  R1,R31
00046f 0b46      	SBC  R20,R22
000470 0b57      	SBC  R21,R23
000471 f428      	BRCC __DIVD21U2
000472 0e0e      	ADD  R0,R30
000473 1e1f      	ADC  R1,R31
000474 1f46      	ADC  R20,R22
000475 1f57      	ADC  R21,R23
000476 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000477 60a1      	SBR  R26,1
                 __DIVD21U3:
000478 953a      	DEC  R19
000479 f759      	BRNE __DIVD21U1
00047a 01fd      	MOVW R30,R26
00047b 01bc      	MOVW R22,R24
00047c 01d0      	MOVW R26,R0
00047d 01ca      	MOVW R24,R20
00047e 915f      	POP  R21
00047f 914f      	POP  R20
000480 913f      	POP  R19
000481 9508      	RET
                 
                 __MODW21U:
000482 dfc7      	RCALL __DIVW21U
000483 01fd      	MOVW R30,R26
000484 9508      	RET
                 
                 __GETW1P:
000485 91ed      	LD   R30,X+
000486 91fc      	LD   R31,X
000487 9711      	SBIW R26,1
000488 9508      	RET
                 
                 __SAVELOCR6:
000489 935a      	ST   -Y,R21
                 __SAVELOCR5:
00048a 934a      	ST   -Y,R20
                 __SAVELOCR4:
00048b 933a      	ST   -Y,R19
                 __SAVELOCR3:
00048c 932a      	ST   -Y,R18
                 __SAVELOCR2:
00048d 931a      	ST   -Y,R17
00048e 930a      	ST   -Y,R16
00048f 9508      	RET
                 
                 __LOADLOCR6:
000490 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000491 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000492 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000493 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000494 8119      	LDD  R17,Y+1
000495 8108      	LD   R16,Y
000496 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8L register use summary:
r0 :  27 r1 :  14 r2 :  10 r3 :   0 r4 :   0 r5 :   0 r6 :   4 r7 :   4 
r8 :   5 r9 :   3 r10:   4 r11:   4 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  30 r17:  51 r18:  17 r19:  48 r20:  16 r21:  22 r22:  23 r23:  13 
r24:  26 r25:  10 r26:  89 r27:  30 r28:  18 r29:   1 r30: 256 r31:  81 
x  :  15 y  : 107 z  :  15 
Registers used: 29 out of 35 (82.9%)

ATmega8L instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  13 add   :  12 
adiw  :  15 and   :   4 andi  :   2 asr   :   0 bclr  :   0 bld   :   6 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  16 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  23 brpl  :   0 brsh  :  31 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :  21 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  11 
cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   0 cp    :  13 
cpc   :   9 cpi   :  24 cpse  :   0 dec   :   9 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   3 
inc   :   4 ld    :  28 ldd   :  33 ldi   : 160 lds   :  12 lpm   :   7 
lsl   :  12 lsr   :   2 mov   :  34 movw  :  30 mul   :   3 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :  18 out   :  41 
pop   :   5 push  :   5 rcall : 187 ret   :  56 reti  :   1 rjmp  :  75 
rol   :  19 ror   :   2 sbc   :   5 sbci  :   5 sbi   :  16 sbic  :   1 
sbis  :   1 sbiw  :   9 sbr   :   2 sbrc  :   3 sbrs  :   4 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   5 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  49 std   :  20 
sts   :  18 sub   :   2 subi  :  28 swap  :   0 tst   :   2 wdr   :   1 

Instructions used: 59 out of 114 (51.8%)

ATmega8L memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00092e   2312     38   2350    8192  28.7%
[.dseg] 0x000060 0x00018f      0     47     47    1024   4.6%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 6 warnings
